<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on City of Wings</title>
    <link>https://city.shaform.com/en/category/notes/</link>
    <description>Recent content in Notes on City of Wings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 Jan 2019 18:10:00 -0500</lastBuildDate>
    
	<atom:link href="https://city.shaform.com/en/category/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sort Sequences for PackedSequence in PyTorch</title>
      <link>https://city.shaform.com/en/2019/01/15/sort-sequences-in-pytorch/</link>
      <pubDate>Tue, 15 Jan 2019 18:10:00 -0500</pubDate>
      
      <guid>https://city.shaform.com/en/2019/01/15/sort-sequences-in-pytorch/</guid>
      <description>Introduction Although using PackedSequence in PyTorch allows faster processing for sequential data, there is something inconvenient: the sequences must be sorted according to lengths in a batch. If we are doing Seq2Seq such as machine translation, there exist input and output sequences, and their lengths might not match. We could simply sort the sequences according to lengths of input and only use PackedSequence in encoder while not using it in decoder.</description>
    </item>
    
    <item>
      <title>Migrate from Pelican and WordPress to Hugo</title>
      <link>https://city.shaform.com/en/2018/07/22/migrate-from-pelican-and-wordpress-to-hugo/</link>
      <pubDate>Sun, 22 Jul 2018 14:30:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/en/2018/07/22/migrate-from-pelican-and-wordpress-to-hugo/</guid>
      <description>Back in 2014, I migrated my blogs to Pelican. While there were many static site generators to choose from, the reason I chose Pelican was twofold. Firstly, I was influenced by my friend who used Pelican. Secondly, I had been using Python for some time and therefore I liked the fact that Pelican was developed with Python.
Years have passed. It appears that my friend is no longer using Pelican for her blog.</description>
    </item>
    
    <item>
      <title>Generate RSS Feed for All Languages in Hugo</title>
      <link>https://city.shaform.com/en/2018/07/16/generate-rss-feed-for-all-languages-in-hugo/</link>
      <pubDate>Mon, 16 Jul 2018 21:30:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/en/2018/07/16/generate-rss-feed-for-all-languages-in-hugo/</guid>
      <description>Hugo supports multilingual sites natively, and it generates a RSS feed for each sub-site of different language. However, it might be desirable to generate a global feed that includes all articles in all sub-sites.
One possibility is to define a custom output format for homepage in config.toml:
[outputs] home = [&amp;#34;HTML&amp;#34;, &amp;#34;RSS&amp;#34;, &amp;#34;FEED&amp;#34;] [mediaTypes] [mediaTypes.&amp;#34;application/rss&amp;#34;] suffixes = [&amp;#34;xml&amp;#34;] [outputFormats] [outputFormats.FEED] mediatype = &amp;#34;application/rss&amp;#34; baseName = &amp;#34;feed&amp;#34; In layouts/index.feed.xml, we then use the following range loop to iterate though all pages in all languages:</description>
    </item>
    
    <item>
      <title>Install TensorFlow and Caffe on Ubuntu 16.04 with Anaconda</title>
      <link>https://city.shaform.com/en/2017/10/23/install-tensorflow-and-caffe-on-ubuntu/</link>
      <pubDate>Mon, 23 Oct 2017 21:30:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/en/2017/10/23/install-tensorflow-and-caffe-on-ubuntu/</guid>
      <description>Previously I have written about 在Ubuntu 安裝 TensorFlow 的紀錄 (Installing TensorFlow on Ubuntu). Years have passed, and even though Ubuntu is still on 16.04，TensorFlow has already made great progress. I&amp;rsquo;ve decided to write another post to show how to install TensorFlow and Caffe with Anaconda. GPU</description>
    </item>
    
    <item>
      <title>Using Caffe for Sentiment Analysis</title>
      <link>https://city.shaform.com/en/2015/06/06/caffe-sentiment-analysis/</link>
      <pubDate>Sat, 06 Jun 2015 11:05:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/en/2015/06/06/caffe-sentiment-analysis/</guid>
      <description>Caffe is a deep learning framework that can be used to develop neural network models. Although Caffe is usually used for image classification, it does not prevent us from utilizing it for other tasks. In this article, we outline the procedure to convert Paragraph Vectors into the LMDB format that Caffe understands, and create a simple model to train and predict the sentiment for movie reviews.
Data Preparation While in the previous post we use custom Chinese corpus for sentiment analysis, this time we utilize the scripts provided by mesnilgr/iclr15 to download the Large Movie Review Dataset so it&amp;rsquo;s easier to reproduce the results.</description>
    </item>
    
    <item>
      <title>Notes about Migrating from Qwerty to Dvorak</title>
      <link>https://city.shaform.com/en/2013/07/12/qwerty-to-dvorak/</link>
      <pubDate>Fri, 12 Jul 2013 18:53:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/en/2013/07/12/qwerty-to-dvorak/</guid>
      <description>Windows Newer versions of Windows could use different keyboard layouts for the login screen. Just choose it when installing or add the relevant input method in language settings. Linux Newer versions of Linux distributions also support dvorak layout when installing. If you want to set the layout temporarily, you could also use the following commands: setxkbmap dvorak # change to dvorak setxkbmap us # change back to qwerty Xrdp If</description>
    </item>
    
  </channel>
</rss>