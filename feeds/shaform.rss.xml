<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>翼之都, City of Wings - Shaform</title><link>http://city.shaform.com/</link><description></description><lastBuildDate>Tue, 04 Apr 2017 15:37:00 +0800</lastBuildDate><item><title>生成對抗網路 - Generative Adversarial Networks</title><link>http://city.shaform.com/blog/2017/04/04/generative-adversarial-networks.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;記得最早聽說 &lt;a href="https://arxiv.org/abs/1701.00160"&gt;Generative Adversarial Networks&lt;/a&gt; 似乎是去年看到&lt;a href="https://bamos.github.io/2016/08/09/deep-completion/"&gt;〈Image Completion with Deep Learning in TensorFlow〉&lt;/a&gt;這篇文章。這篇文章提到如何用 GAN 來對圖片進行腦補。比如說像是把人臉的中心遮起來，然後再用 GAN 補完幻想的人臉。效果如下所示。當時覺得感覺好酷阿，想像中可以腦補的東西真的很多，例如後來看到有人&lt;a href="https://blog.insightdatascience.com/isee-removing-eyeglasses-from-faces-using-deep-learning-d4e7d935376f"&gt;腦補眼鏡&lt;/a&gt;、&lt;a href="http://www.digitaltrends.com/photography/faceapp-neural-net-image-editing/"&gt;腦補笑容和年紀&lt;/a&gt;，或者&lt;a href="https://zhuanlan.zhihu.com/p/25542274"&gt;腦補動漫人物&lt;/a&gt;。而 GAN 作為其中一種生成模型，&lt;a href="https://www.quora.com/What-are-the-pros-and-cons-of-Generative-Adversarial-Networks-vs-Variational-Autoencoders"&gt;視覺效果是相當不錯的&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote class="twitter-tweet tw-align-center" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Superb tutorial on adversarial nets by &lt;a href="https://twitter.com/brandondamos"&gt;@brandondamos&lt;/a&gt;&lt;br&gt;Bonus section: thoughts on Torch vs TF&lt;a href="https://t.co/uwG8l2qytd"&gt;https://t.co …&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Tue, 04 Apr 2017 15:37:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2017-04-04:/blog/2017/04/04/generative-adversarial-networks.html</guid><category>GAN</category><category>TensorFlow</category><category>deep learning</category></item><item><title>用 Ansible 和 yadm 來加速重灌流程</title><link>http://city.shaform.com/blog/2017/03/25/ansible-and-yadm.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;還記得&lt;a href="https://shaform.wordpress.com/2013/01/01/computer-system-administration/"&gt;當年修計算機系統管理&lt;/a&gt;時曾經為了做 NFS + NIS 的作業自行開了三台虛擬機設定環境，同時灌三台電腦實在是煞費精力。在此之後雖然比較少遇到此情形，但還是得常常重灌電腦。像是研究所期間，自己的桌機、筆電，以及實驗室的桌機都是自己裝的 Ubuntu，而每次升級病發就會想重灌成新的版本，久了以後慢慢把安裝的東西寫成 Bash scripts，可是還是相當繁瑣。&lt;/p&gt;
&lt;p&gt;就在最近的時候，偷聽大大們聊天，得知了 &lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt; 這個方便的自動化部屬工具。由於它使用時目的端完全不須安裝任何套件，而是從本地端完全使用 SSH 進去目的端安裝設定軟體，感覺也挺適合個人重灌的需求。於是就花了一點時間研究了一下。在此同時，也得知了 &lt;a href="https://github.com/TheLocehiliosan/yadm"&gt;yadm&lt;/a&gt; 這個 &lt;a href="https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789"&gt;dotfiles&lt;/a&gt; 管理套件，也花了一點時間把原本用 Makefile 來安裝的 dotfiles 改成用 yadm 管理了。&lt;/p&gt;
&lt;h2&gt;Ansible 設定&lt;/h2&gt;
&lt;p&gt;實際上 Ansible 的功用是用來自動化部署而不是拿來重灌個人電腦的，所以尋找文件時常常看到許多複雜功能 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 25 Mar 2017 09:09:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2017-03-25:/blog/2017/03/25/ansible-and-yadm.html</guid><category>ansible</category><category>yadm</category></item><item><title>用 Sacred 追蹤實驗數據</title><link>http://city.shaform.com/blog/2017/03/18/run-experiments-with-sacred.html</link><description>&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;前陣子相當恰好的常有跑大量實驗的需求，跑著跑著就開始覺得管理實驗執行和整理數據實在相當繁瑣且容易產生錯誤。&lt;/p&gt;
&lt;p&gt;以執行而言，由於處理的檔案龐大、計算時間冗長、使用機器繁多，如何最有效率的把實驗跑完，同時又盡可能避免重複計算浪費時間，就成了難題。尤其考慮有時會因為不可抗力因素導致部份實驗中斷，此時要如何從一半的結果繼續執行，同時又最節省時間也是值得思考的點。&lt;/p&gt;
&lt;p&gt;管理實驗數據部份，也因為使用機器增多及實驗繁多而複雜了起來。看到有種作法是利用 bash script 或者 Makefile 紀錄參數，然後將不同參數輸出的 stdout 導進指定的檔案名字裡來產生不同條件的實驗數據。不過這樣做很容易就會不小心改了參數卻把輸出導進錯誤的地方，導致最後數據錯誤。同時如果有很多台機器，資料又存在本機，那就得進行不少手動處理而無法全自動重現實驗結果。&lt;/p&gt;
&lt;p&gt;感覺如果每次開始新的實驗就在程式碼中使用大量的自訂程式來處理這些問題好像一不小心就會花去太多時間。可是如果在忙亂中持續用奇怪的作法做實驗，心中的不安全感產生的焦慮又與日俱增，實在相當痛苦。&lt;/p&gt;
&lt;p&gt;之前問了友人：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「大大都怎麼跑實驗阿？」&lt;/p&gt;
&lt;p&gt;「包成 Docker 先放著。或是用 Makefile + GitLab 做版本管控。
用 Jenkins + ZooKeeper 管理，然後隨時打點 OpenTSDB 用 Grafana …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 18 Mar 2017 15:33:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2017-03-18:/blog/2017/03/18/run-experiments-with-sacred.html</guid><category>Sacred</category><category>python</category><category>jupyter</category></item><item><title>用 TensorBox 製作簡易貓貓辨識器</title><link>http://city.shaform.com/blog/2016/11/05/detect-cats-with-tensorbox.html</link><description>&lt;p&gt;最近恰好有個需求是要收集大量特定物體的圖片，直覺的想法就是訓練一個該物體的偵測器，然後再用這個偵測器從大量圖片中找出符合需求的區塊。經過一番搜尋，發現 &lt;a href="https://github.com/Russell91/TensorBox"&gt;TensorBox&lt;/a&gt; 似乎是個用來訓練單一物體偵測器的簡單套件，於是便利用貓咪來進行了簡單的嘗試。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Detect a Cat" src="http://city.shaform.com/images/cat-detector.png"&gt;&lt;/p&gt;
&lt;p&gt;本文使用的套件有的是只支援 Python 2，此時執行時將會以 &lt;code&gt;python&lt;/code&gt; 程式執行。但筆者寫的 scripts 大多是 Python 3，本文中就以 &lt;code&gt;python3&lt;/code&gt; 來表示。&lt;/p&gt;
&lt;p&gt;本文將會用到不少套件，實際放置套件的資料夾結構如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./
./cats
./TensorBox
./labelImg
./labels
./data
./data/train
./data/test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;實際的程式可在 &lt;a href="https://github.com/shaform/experiments/tree/master/cat"&gt;shaform/experiments/cat&lt;/a&gt; 裡找到，本文只會顯示重點部份。&lt;/p&gt;
&lt;h2&gt;收集資料&lt;/h2&gt;
&lt;p&gt;首先我們使用 &lt;a href="https://github.com/maxogden/cats"&gt;maxogden/cats&lt;/a&gt; 收集好的小規模貓貓照片來進行實驗，我們將利用 &lt;code&gt;catmapper&lt;/code&gt; 資料夾中的照片做為訓練資料，最後再用 &lt;code&gt;cat_photos&lt;/code&gt; 裡的照片來觀看結果 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 05 Nov 2016 13:40:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2016-11-05:/blog/2016/11/05/detect-cats-with-tensorbox.html</guid><category>TensorBox</category><category>TensorFlow</category><category>object detection</category><category>cats</category></item><item><title>在 Ubuntu 16.04 安裝 CUDA 8.0 和 TensorFlow 0.11 並使用內顯顯示畫面</title><link>http://city.shaform.com/blog/2016/10/31/install-tensorflow-with-cuda.html</link><description>&lt;p&gt;本文紀錄了使用內顯來顯示畫面，而透過 Nvidia 顯卡來進行 CUDA 計算的安裝步驟。&lt;/p&gt;
&lt;h2&gt;顯卡設定&lt;/h2&gt;
&lt;h3&gt;基礎設定&lt;/h3&gt;
&lt;p&gt;首先在 BIOS 裡設定內顯為主要顯卡，並且將螢幕接到內顯輸出上。&lt;/p&gt;
&lt;h3&gt;安裝 CUDA&lt;/h3&gt;
&lt;p&gt;接著到 &lt;a href="https://developer.nvidia.com/cuda-downloads"&gt;CUDA 下載頁面&lt;/a&gt;下載對應的 deb 檔案。緊接著，重開 Ubuntu，並在登入畫面時按下 &lt;code&gt;Ctrl-Alt-F1&lt;/code&gt; 進入命令列界面。&lt;/p&gt;
&lt;p&gt;執行以下指令關閉 &lt;code&gt;lightdm&lt;/code&gt;，據&lt;a href="https://gist.github.com/bearpaw/c38ef18ec45ba6548ec0"&gt;這裡&lt;/a&gt;的講法，這樣就可以達成將內顯和顯卡功能分開的目的。筆者測試如果沒執行這個指令，則最後安裝完 CUDA 重開機就會無法進入圖形登入畫面。&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;sudo service lightdm stop
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;接著實際安裝 CUDA，並重新開機，確認可以登入：&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;sudo dpkg -i cuda-repo-&amp;lt;distro&amp;gt;_ …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Mon, 31 Oct 2016 21:28:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2016-10-31:/blog/2016/10/31/install-tensorflow-with-cuda.html</guid><category>TensorFlow</category><category>Caffe</category><category>CUDA</category><category>Ubuntu</category></item><item><title>找出 GitHub 上和 Python 3 不相容的 Python 專案</title><link>http://city.shaform.com/blog/2016/09/10/py3tracker.html</link><description>&lt;h1&gt;Porting to Python 3&lt;/h1&gt;
&lt;p&gt;Python 3 已經釋出近八年，原本一片慘紅的 &lt;a href="http://py3readiness.org/"&gt;Python 3 Readiness&lt;/a&gt; 和 &lt;a href="http://python3wos.mybluemix.net/"&gt;PYTHON 3 WALL OF SUPERPOWERS&lt;/a&gt; 都已經接近全綠，真的可以看見社群逐漸朝向 Python 3 的努力。事實上，&lt;a href="http://blog.jupyter.org/2016/07/08/ipython-5-0-released/#endofsupportforpython2"&gt;也開始有些專案漸漸要中止 Python 2 的支援了。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然而其實還是有不少常用的 packages 並不支援 Python 3，像是最近常會用到的 &lt;a href="https://github.com/s3tools/s3cmd"&gt;s3cmd&lt;/a&gt; 就是一例。到了他們的 Issues 頁面瞧瞧，發現其實&lt;a href="https://github.com/s3tools/s3cmd/issues/335"&gt;很早以前就有想支援 Python 3 的聲音&lt;/a&gt;，只是一直沒有人力去做。&lt;/p&gt;
&lt;p&gt;其實，雖然要完全支援的話工程有點浩大，但一小步一小步做起來就在可以處理的範圍之內。有些情況甚至用 &lt;a href="https://docs.python.org/3.5/library/2to3.html"&gt;2to3&lt;/a&gt; 就能有很大幫助了 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 10 Sep 2016 19:44:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2016-09-10:/blog/2016/09/10/py3tracker.html</guid><category>Python3</category><category>2to3</category><category>GitHub</category><category>py3tracker</category></item><item><title>bs2 公開板備份初探</title><link>http://city.shaform.com/blog/2016/07/26/bs2-backup.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.bs2.to/"&gt;bs2.to&lt;/a&gt; 就要關閉了，雖然官方有提供個人板備份功能，可是公開板因為著作權問題無法備份，而若要自行轉寄信箱又太過操勞，於是我就想研究一下是否有自動備份的選擇。&lt;/p&gt;
&lt;p&gt;經過一番搜尋，似乎有個古老的 &lt;a href="https://github.com/iblis17/bs2-crawler"&gt;bs2-crawler&lt;/a&gt;。雖然一開始無法成功跑起來，不過經過修改，似乎真的可以拿來備份 bs2 的看板了。&lt;/p&gt;
&lt;p&gt;以下就是修改版本 &lt;a href="https://github.com/shaform/bs2-crawler"&gt;bs2-crawler@shaform&lt;/a&gt;，的使用教學。&lt;/p&gt;
&lt;h1&gt;安裝&lt;/h1&gt;
&lt;p&gt;首先 clone 我們修改的版本：&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;git clone https://github.com/shaform/bs2-crawler
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;可以用 Python 3 執行，首先使用 &lt;a href="https://docs.python.org/3/library/venv.html"&gt;pyvenv&lt;/a&gt; 創立虛擬環境，好安裝自己的套件：&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; bs2-crawler
&lt;/span&gt;&lt;span class="hll"&gt;pyvenv env
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="nb"&gt;source&lt;/span&gt; env/bin/activate
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;p&gt;緊接著，安裝所有這次會用到的套件：&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;pip3 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Tue, 26 Jul 2016 22:30:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2016-07-26:/blog/2016/07/26/bs2-backup.html</guid><category>Python</category><category>bs2</category></item><item><title>價格追蹤：使用 gspread 自動更新 Google Sheets</title><link>http://city.shaform.com/blog/2016/03/19/gspread.html</link><description>&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.google.com/sheets/about/"&gt;Google Sheets&lt;/a&gt; 和傳統試算表最大的差異或許在於他的資料存放在遠端，所以可以從任何地方存取，也很方便和別人共享編輯。因為這個特性，使得我偶爾會將一些實驗資料放到 Google Sheets 上面。&lt;/p&gt;
&lt;p&gt;有的時候這些實驗數據是隨著時間固定產生的，此時如果總是自己剪剪貼貼，難免會覺得有些浪費時間。幸好，Google 提供了 &lt;a href="https://developers.google.com/google-apps/spreadsheets/"&gt;Sheets API&lt;/a&gt;，所以我們可以透過程式自動將資料寫進試算表裡。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/burnash/gspread"&gt;gspread&lt;/a&gt; 將底層的 API 又包裝成更方便好用的界面，是使用 Python 來存取 Google Sheets 很好的選擇。&lt;/p&gt;
&lt;p&gt;本文便使用 Python 3 配合 gspread 來展示寫入 Google Sheets 的方法。確切的來說，我將寫一個程式每天去某個網站檢查目前的記憶體價格，然後把每天查到的價格寫入一個試算表裡，藉此追蹤價格變化。&lt;/p&gt;
&lt;h1&gt;環境設置&lt;/h1&gt;
&lt;p&gt;首先使用 &lt;a href="https://docs.python.org/3/library/venv.html"&gt;pyvenv&lt;/a&gt; 創立虛擬環境，好安裝自己的套件：&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;pyvenv-3.5 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 19 Mar 2016 09:02:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2016-03-19:/blog/2016/03/19/gspread.html</guid><category>Python 3</category><category>gspread</category><category>Google Sheets</category></item><item><title>Scrapy + Python 3: PTT 資料抓取與分析</title><link>http://city.shaform.com/blog/2016/02/28/scrapy.html</link><description>&lt;h1&gt;Scrapy 1.1 with Python 3 Support&lt;/h1&gt;
&lt;p&gt;很久很久以前，曾經想要學學網路爬蟲，爬一些 &lt;a href="https://www.ptt.cc/bbs/index.html"&gt;PTT&lt;/a&gt; 的資料來看看能幹嘛。當時找到了 &lt;a href="http://scrapy.org/"&gt;Scrapy&lt;/a&gt; 這個程式庫，覺得很有潛力。只可惜當初他還不太支援 &lt;a href="http://cyrille.rossant.net/why-you-should-move-to-python-3-now/"&gt;Python 3&lt;/a&gt;，於是就暫且放下學習的念頭，想說先等等看。&lt;/p&gt;
&lt;p&gt;如今，&lt;a href="https://pypi.python.org/pypi/Scrapy/1.1.0"&gt;Scrapy 1.1&lt;/a&gt; 釋出，除了一些功能的更新外，他也終於要&lt;a href="https://github.com/scrapy/scrapy/issues/263"&gt;支援基本的 Python 3&lt;/a&gt; 了！於是抱持著推廣 Python 3 的想法，重拾之前的目標，實際測試了一下網路爬蟲的撰寫。&lt;/p&gt;
&lt;h1&gt;環境設置&lt;/h1&gt;
&lt;p&gt;由於這次是要爬 PTT 的資料，為了避免一旦被鎖 IP，就會無法上 PTT，很不方便。所以我特地使用了 NTU CS …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sun, 28 Feb 2016 10:23:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2016-02-28:/blog/2016/02/28/scrapy.html</guid><category>Python 3</category><category>Scrapy</category><category>PTT</category></item><item><title>Caffe 程式閱讀筆記</title><link>http://city.shaform.com/blog/2016/02/26/caffe.html</link><description>&lt;p&gt;前陣子有機會研究了一下 Caffe framework 的程式碼，於是把內容記下來避免忘記。
由於自己對該程式庫也不是很熟悉，加上一直拖稿導致 Caffe 在撰寫期間也已經有不少變動，
以致可能有許多不正確的地方，還請各位大大不吝指教。&lt;/p&gt;
&lt;p&gt;主要分成四個部份來講。首先是整個 Caffe 的大架構，以及一些重要的元件。
其次，我也研究了如何自己新增一個 layer。
接下來，再重新回到 Caffe 做更深入的解析。&lt;/p&gt;
&lt;iframe style="margin-left: auto; margin-right: auto; display: block;" src="https://docs.google.com/presentation/d/1jqVDrFxG9wJwovmH0XqP5wZZq1jBxRylHQRkQsz40tE/embed?start=false&amp;loop=false&amp;delayms=10000" frameborder="0" width="480" height="389" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;

&lt;h1&gt;架構&lt;/h1&gt;
&lt;p&gt;那麼，就從大架構開始講起。
Caffe 的 command line 工具有幾個功能，他可以讓你 train 一個 model，
也可以讓你用 train 好的 model 來進行效能的檢驗。當他在做 training 時，
他會建立一個 Solver 物件，他的主要功能就是協調類神經網路的運作來進行訓練。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Overview" src="http://city.shaform.com/images/caffe_overview.png"&gt;&lt;/p&gt;
&lt;p&gt;我們可以用一個設定檔來指定 Solver 的參數 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Fri, 26 Feb 2016 07:12:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2016-02-26:/blog/2016/02/26/caffe.html</guid><category>Caffe</category><category>deep learning</category></item><item><title>IPython Notebook 初探</title><link>http://city.shaform.com/blog/2015/12/26/ipython-notebook.html</link><description>&lt;h1&gt;為什麼是 IPython Notebook?&lt;/h1&gt;
&lt;p&gt;還記得第一次認識到 &lt;a href="http://ipython.org/notebook.html"&gt;IPython Notebook&lt;/a&gt;
是在 &lt;a href="http://www.meetup.com/Taipei-py/"&gt;Taipei.py&lt;/a&gt; 吧。
當時我還十分懷疑到底使用瀏覽器界面寫 Python 能有什麼好處。
尤其，這樣根本無法使用 Vim 的強大指令。
雖然有安裝並嘗試了一下，但最後還是沒有繼續使用 IPython Notebook。
不過 &lt;a href="http://ipython.org/index.html"&gt;IPython interactive shell&lt;/a&gt;
倒確實是比原本的指令列好用許多，於是我慢慢也開始用它來取代原本的 Python 指令列了。&lt;/p&gt;
&lt;p&gt;第二次遇到 IPython Notebook 則是在寫 &lt;a href="http://cs231n.stanford.edu"&gt;CS231n&lt;/a&gt; 作業時。
在那堂課裡，每份作業都是用 IPython Notebook 來呈現。
同學可以在 Notebook 上及其他 Python 檔案裡編輯，並在 Notebook 裡直接驗證結果。
我這才發現這真的是一個跟別人分享與教學的強大方法。
尤其又有 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 26 Dec 2015 18:46:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2015-12-26:/blog/2015/12/26/ipython-notebook.html</guid><category>IPython Notebook</category><category>Python</category><category>IPython</category><category>matplotlib</category><category>pandas</category><category>numpy</category><category>scikit-learn</category></item><item><title>snappycat: A command line tool to decompress snappy files produced by Hadoop</title><link>http://city.shaform.com/blog/2015/11/06/snappycat.html</link><description>&lt;p&gt;最近在學習 Spark 的時候常會接觸到 &lt;a href="https://blog.cloudera.com/blog/2011/09/snappy-and-hadoop/"&gt;Snappy&lt;/a&gt; 壓縮而成的檔案。雖然在 Spark
裡只要用 &lt;code&gt;sc.textFile&lt;/code&gt; 就可以直接讀取。可是有時也想把檔案下載到 local
端處理。&lt;/p&gt;
&lt;p&gt;然而因為 Hadoop 的檔案格式不是單純的 Snappy，所以要讀取就會有些麻煩。&lt;/p&gt;
&lt;p&gt;稍微找一下現存的解法似乎都是直接用 Java 去連結 Hadoop
的程式庫，感覺在設置上有些複雜。而且發現目前使用的某個工具似乎在遇到空的 Snappy
flie 時會有錯誤產生。 所以利用空閒的時間稍微研究了一下檔案格式。&lt;/p&gt;
&lt;p&gt;簡單來說，Hadoop 會把每個檔案分成許多個 blocks，而每個 block 各自獨立使用 Snappy
壓縮。在壓縮後的 block 前面，會附上兩個 32-bit 的數字，其中第一個是解壓縮後 block
的大小。第二個則是壓縮後的大小，也就是接在這數字後面的那串資料的大小 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Fri, 06 Nov 2015 21:20:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2015-11-06:/blog/2015/11/06/snappycat.html</guid><category>Hadoop</category><category>Spark</category><category>snappy</category><category>snappycat</category></item><item><title>用 Apache Spark 來訓練 Word2vec 詞向量 Skip-gram Word Embeddings</title><link>http://city.shaform.com/blog/2015/08/30/spark-for-word2vec.html</link><description>&lt;p&gt;先前曾提過 &lt;a href="http://city.shaform.com/blog/2014/11/04/word2vec.html"&gt;word2vec 可以把語料中的詞轉換成詞向量&lt;/a&gt;。
雖然原本提供的 &lt;a href="https://groups.google.com/forum/#!forum/word2vec-toolkit"&gt;word2vec&lt;/a&gt; 工具速度已經很快，
但是如果要訓練更大規模的語料還是需要不少時間。
例如之前在處理 &lt;a href="http://www.lemurproject.org/clueweb09.php/"&gt;ClueWeb09&lt;/a&gt; 時，以實驗室的機器來說，就算只處理中文部份，
也要一個月以上才能跑完。
此時除了購買更強大的機器外，如果已經有不少機器，
或許可以利用平行運算的方式來加速。&lt;/p&gt;
&lt;p&gt;最近剛好接觸到了 &lt;a href="https://spark.apache.org/"&gt;Apache Spark&lt;/a&gt;，他是一個開源的運算平台，
可以運用多台電腦進行平行運算。
且因為把很多資料直接放在記憶體中處理，又比 &lt;a href="http://hadoop.apache.org/"&gt;Apache Hadoop&lt;/a&gt; 單純的
MapReduce 更快一些。更重要的是，他的機器學習函式庫 &lt;a href="https://spark.apache.org/docs/latest/mllib-guide.html"&gt;MLlib&lt;/a&gt;
已經實作了 word2vec 當中的 &lt;a href="http://arxiv.org/pdf/1301.3781.pdf"&gt;skip-gram&lt;/a&gt; 模型，正好可以直接拿來訓練詞向量。&lt;/p&gt;
&lt;h1&gt;安裝&lt;/h1&gt;
&lt;p&gt;關於如何將 Spark 安裝在一個 cluster 上，可以參考&lt;a href="http://spark.apache.org/docs/latest/index.html"&gt;官方文件&lt;/a&gt;。
這裡我們只簡單的安裝單機版的 Spark 方便快速的實驗。
我們將會使用 &lt;a href="http://releases.ubuntu.com/14.04/"&gt;Ubuntu …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sun, 30 Aug 2015 17:15:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2015-08-30:/blog/2015/08/30/spark-for-word2vec.html</guid><category>word2vec</category><category>Spark</category><category>Scala</category><category>word embeddings</category></item><item><title>Using Caffe for Sentiment Analysis</title><link>http://city.shaform.com/blog/2015/06/06/caffe-sentiment-analysis.html</link><description>&lt;p&gt;&lt;a href="http://caffe.berkeleyvision.org/"&gt;Caffe&lt;/a&gt; is a deep learning framework that can be used to
develop neural network models. Although Caffe is usually used
for image classification, it does not prevent us from utilizing it
for other tasks. In this article, we outline the procedure to convert
&lt;a href="http://arxiv.org/abs/1405.4053"&gt;Paragraph Vectors&lt;/a&gt; into the &lt;a href="http://symas.com/mdb/"&gt;LMDB&lt;/a&gt; format that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 06 Jun 2015 11:05:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2015-06-06:/blog/2015/06/06/caffe-sentiment-analysis.html</guid><category>word2vec</category><category>Caffe</category><category>sentiment analysis</category><category>deep learning</category></item><item><title>一起聚餐去，金流系統 (Dine together - Payment System)</title><link>http://city.shaform.com/blog/2015/04/20/dine-together-payment-system.html</link><description>&lt;p&gt;在交大時因為地處偏僻又經濟拮据，很少有機會出去校外吃飯。來了台北以後，開始有機會和朋友出去聚餐。有次一大群人一起去吃飯，結帳時大家七手八腳的把錢擺在桌上，最後結帳的人拿了錢去付時，才發現短少了一些，但也無法釐清是誰少付了。自己也曾有次雖然只是三四人的聚餐，不過付完找錢完事後才發現虧了兩三百元呢。&lt;/p&gt;
&lt;p&gt;確實這種朋友聚餐若不能分開結帳，付起帳來總讓人心慌慌。有許多的風險容易浮現：（1）在蒐集錢時可能有所短缺（2）可能會出現偽鈔（3）其實也可能店家會找錯、算錯（4）然而有些同學會在店家找錢時迅速的先拿走自己該找的部份，以致主付者難以確認店家是否找錯錢。&lt;/p&gt;
&lt;p&gt;雖然想說可以透過每次聚餐前都事先準備好所有零錢，讓自己可以恰好付出自己的部份，不過有時還是會忘記。這時就會想如果有個金流系統可以幫忙解決這種情形該有多好。&lt;/p&gt;
&lt;p&gt;運作的方法大約是這樣。聚餐後，可以用這金流系統建立一個聚餐事件，然後把所有人加進來。大家輸入自己該付的錢後，系統就會確認儲值的錢足夠，並自動扣款，事後交給主事人。程式還會幫妳計算總和的錢數，讓你可以較易跟店家確認他是否算錯錢。&lt;/p&gt;
&lt;p&gt;可以用手機拍照紀錄菜單，這樣如果跟店家確認發現金額不符後，還可根據紀錄查出到底是哪位同學少付了，並溝通得到更正。&lt;/p&gt;
&lt;p&gt;由於透過金流平台溝通，所有的對話都會讓所有聚餐的同學都看到。因此可以形成輿論壓力，讓有理的一方能順利得到金額的更正。&lt;/p&gt;
&lt;p&gt;如果真的無法解決爭端，還可以評價對方的壞行為。這樣他下次跟其他人聚餐時，不好的評價就會顯示出來 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Mon, 20 Apr 2015 08:34:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2015-04-20:/blog/2015/04/20/dine-together-payment-system.html</guid><category>payments</category></item><item><title>用 rnnlm, liblinear 和 word2vec 做中文情感分析測試</title><link>http://city.shaform.com/blog/2015/03/27/sentiment-analysis.html</link><description>&lt;p&gt;最近在研究一些 NLP 工具的使用方法，所以稍微紀錄一下心得。這次的實驗主要是參考 Tomas Mikolov 在 &lt;a href="https://code.google.com/p/word2vec/"&gt;word2vec&lt;/a&gt; 論壇上發表的&lt;a href="https://groups.google.com/d/msg/word2vec-toolkit/Q49FIrNOQRo/J6KG8mUj45sJ"&gt;文章&lt;/a&gt;，以及 &lt;a href="http://arxiv.org/abs/1412.5335"&gt;Ensemble of Generative and Discriminative Techniques for Sentiment Analysis of Movie Reviews&lt;/a&gt; 的程式碼。不過改運用在中文上，並且用簡單的 TF-IDF 取代 Naive Bayes Support Vector
Machine。&lt;/p&gt;
&lt;p&gt;資料集是使用 2014 年 NTU NLP 課程的旅館評論資料 &lt;code&gt;207884_hotel_training.txt&lt;/code&gt;，然後稍微進行一些處理。將資料修改成以下格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;LABEL TOKENS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每行有一則資料，先是正負向標記：1 表示正 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Fri, 27 Mar 2015 21:45:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2015-03-27:/blog/2015/03/27/sentiment-analysis.html</guid><category>word2vec</category><category>Chinese</category><category>python</category><category>liblinear</category><category>rnnlm</category><category>tf-idf</category><category>sentiment analysis</category></item><item><title>建立 LDAP 鏡像、及日常管理指令集</title><link>http://city.shaform.com/blog/2014/12/14/mirror-and-mgmt-on-ldap.html</link><description>&lt;h2&gt;建立鏡像&lt;/h2&gt;
&lt;p&gt;假設只有一台 LDAP server，則一旦 crash 大家都無法登入了，故可以建立一個鏡像 server，不斷同步資料內容。這篇假設你已經建好前篇的 ldap.lab.csie.ntu.edu.tw，而想再建一個 ldapm.lab.csie.ntu.edu.tw。則在 clients 的設定可設為：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/ldap/ldap.conf
URI     ldaps://ldap.lab.csie.ntu.edu.tw ldaps://ldapm.lab.csie.ntu.edu.tw
TLS_CACERT      /etc/ssl/certs …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sun, 14 Dec 2014 17:42:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-12-14:/blog/2014/12/14/mirror-and-mgmt-on-ldap.html</guid><category>LDAP</category><category>linux</category><category>Debian</category></item><item><title>在 Debian 7.7 系統中轉移 NIS 到 LDAP</title><link>http://city.shaform.com/blog/2014/12/13/migrate-from-nis-to-ldap.html</link><description>&lt;p&gt;本文件紀錄了基本的 LDAP 設置。&lt;/p&gt;
&lt;h2&gt;設定 LDAP Master&lt;/h2&gt;
&lt;h3&gt;基本設置&lt;/h3&gt;
&lt;p&gt;首先編輯 &lt;code&gt;/etc/ldap/ldap.conf&lt;/code&gt; 填上適當的網域名稱。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BASE    dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
URI     ldap://ldap.lab.csie.ntu.edu.tw
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 URI 必須是可以連上 Master server 的 IP 或網域名稱。&lt;/p&gt;
&lt;p&gt;緊接著，安裝 OpenLDAP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install slapd ldap-utils
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此時它只會要你設定一個 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 13 Dec 2014 17:42:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-12-13:/blog/2014/12/13/migrate-from-nis-to-ldap.html</guid><category>LDAP</category><category>NIS</category><category>linux</category><category>Debian</category><category>SSH</category></item><item><title>連結兩個私有內網</title><link>http://city.shaform.com/blog/2014/11/12/connect-subnets.html</link><description>&lt;p&gt;實驗室的工作站先生們待在兩個不同的內網，各自透過一台工作站當 gateway 和外面的世界溝通。因此，要連結彼此時，常需要透過 gateway 的特定 port 來轉送到 sshd。這樣每台機器的其他不同 services 也都要額外開個 port，感覺非常不方便。&lt;/p&gt;
&lt;p&gt;記得學長大大離開實驗室前，總是不能忘懷他們無法在一起的困難。於是晚輩們就決定試圖解決這個問題了！&lt;/p&gt;
&lt;h2&gt;機器配置&lt;/h2&gt;
&lt;p&gt;假設現在有兩群工作站：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bob     eth0: 192.168.13.1/24  eth1: 140.112.13.5
jack    eth0: 192.168.13.2/24

ted     eth0: 192.168.14.1/24  eth1: 140 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Wed, 12 Nov 2014 09:20:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-11-12:/blog/2014/11/12/connect-subnets.html</guid><category>linux</category><category>subnet</category><category>network</category></item><item><title>Google Inbox-like Web Browsing</title><link>http://city.shaform.com/blog/2014/11/07/google-inbox-like-web-browsing.html</link><description>&lt;p&gt;Last time, I explored the idea of designing a web browsing UI that reduces the possibility of distractions in &lt;a href="http://city.shaform.com/blog/2013/10/20/single-minded.html"&gt;〈Single-minded : an Internet reader, made for readers, made by readers〉&lt;/a&gt;. While that idea might sound interesting, the design itself was somewhat primitive. Recently, Google has announced &lt;a href="http://www.google.com/inbox/"&gt;Inbox&lt;/a&gt;, a new way to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Fri, 07 Nov 2014 18:52:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-11-07:/blog/2014/11/07/google-inbox-like-web-browsing.html</guid><category>browser</category><category>Internet</category><category>Google Inbox</category></item><item><title>用中文資料測試 word2vec</title><link>http://city.shaform.com/blog/2014/11/04/word2vec.html</link><description>&lt;p&gt;最近因為一些學習上的需要接觸了 &lt;a href="https://code.google.com/p/word2vec/"&gt;word2vec&lt;/a&gt;，覺得好像是有點神秘的東西。一般初學自然語言處理的時候，處理文字最簡單的模型就是把每個詞當作一個單位，比如說用個 id 來表示他。然後再去算詞與詞之間的統計關係。或者是利用句子的文法結構來進行其他處理。如果把每個詞出現的次數當作一個維度的話，也可以把句子或文件用一個向量來表示。&lt;/p&gt;
&lt;p&gt;不過 word2vec 是把每個詞本身用一個多維向量來表示，把詞投影到一個向量空間裡。而且不知道為什麼投影出來的空間有些特殊的性質，比如說相同屬性的詞可能會靠得很近，甚至部份的向量有邏輯上的線性關係等等：&lt;/p&gt;
&lt;p&gt;vector('King') - vector('Man') + vector('Woman') ~= vector('Queen')&lt;/p&gt;
&lt;p&gt;這份筆記紀錄了使用 word2vec 處理中文資料的小小實驗。&lt;/p&gt;
&lt;h2&gt;語料&lt;/h2&gt;
&lt;p&gt;不太確定有什麼開放的中文語料可供使用，於是決定先用&lt;a href="https://github.com/audreyt/moedict-webkit"&gt;萌典&lt;/a&gt;來做實驗，可按照教學，下載萌典資料：&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;git clone --depth &lt;span class="m"&gt;1&lt;/span&gt; https://github.com/g0v/moedict-data.git
&lt;/span&gt;&lt;span class="hll"&gt;git clone --depth …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Tue, 04 Nov 2014 17:20:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-11-04:/blog/2014/11/04/word2vec.html</guid><category>word2vec</category><category>Chinese</category><category>python</category><category>jieba</category></item><item><title>在工作站上使用自己的 Python 並安裝自訂套件</title><link>http://city.shaform.com/blog/2014/06/22/pyvenv-and-virtualenv.html</link><description>&lt;p&gt;使用工作站時常會遇到想要自行安裝 Python 套件，結果卻沒有管理權限的問題。雖然可以自行在 local 安裝套件，或者是乾脆自行安裝 local 版的 Python，但設置的程序稍微有點麻煩，而且遇到想要同時使用多種版本的 Python 時，設置就更複雜了。&lt;/p&gt;
&lt;p&gt;遇到這種情形的時候，建立 Python 的 virtual environment 就可以方便的使用多個不同版本與環境的 Python。&lt;/p&gt;
&lt;h2&gt;pyvenv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.4/library/venv.html"&gt;pyvenv&lt;/a&gt; 是在 Python 3.3 後新加入官方 Python 發行版的一個 module，可以讓使用者建立自己的 virtual environment。雖然很可惜的，Debian 系的 OS 因為 &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=732703"&gt;bug 732703&lt;/a&gt; 所以暫時無法使用。不過還是介紹一下他的用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 ENV_DIR 建立 virtual …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sun, 22 Jun 2014 10:30:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-06-22:/blog/2014/06/22/pyvenv-and-virtualenv.html</guid><category>linux</category><category>Python</category><category>pyvenv</category><category>virtualenv</category></item><item><title>解決 Ubuntu 加密 Home 目錄後無法遠端用 public key 登入的問題</title><link>http://city.shaform.com/blog/2014/06/21/fix-public-key-login-for-encrypted-home.html</link><description>&lt;p&gt;通常啟用 SSH 登入會遇到一個大問題：經常會有奇怪的人想要暴力破解密碼，取得登入權限。最早我都是限制只能從校內 IP 來源登入來減輕這個問題，然而最近的電腦是在 NAT 背後，透過一個 port 連結 SSH，所以似乎看不到真正的來源 IP，因此無法輕易過濾。&lt;/p&gt;
&lt;p&gt;我最後決定停用密碼登入的功能，改成只能用 public key 登入，這樣子可能比較難以猜中正確的密鑰。不過實際用起來偶爾會發現登入失敗搞不清楚理由，後來才發現是因為我的 Ubuntu 啟用了家目錄加密的功能，因此尚未登入之前根本讀不到 &lt;code&gt;authorized_keys&lt;/code&gt; 設定檔。為了解決這個問題，必須移動設定檔的位置才行。&lt;/p&gt;
&lt;h2&gt;Generate SSH Keys&lt;/h2&gt;
&lt;p&gt;首先如果沒有自己的 SSH keys 的話可以參考&lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;〈Generating SSH Keys〉&lt;/a&gt;建立自己的 SSH keys。大致上是使用如下指令：&lt;/p&gt;
&lt;div class="sh-highlight"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;ssh-keygen -t rsa …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 21 Jun 2014 09:00:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-06-21:/blog/2014/06/21/fix-public-key-login-for-encrypted-home.html</guid><category>public key</category><category>linux</category><category>Ubuntu</category><category>SSH</category></item><item><title>在 UEFI 模式下同時安裝 Windows 8.1 和 Ubuntu 14.04</title><link>http://city.shaform.com/blog/2014/06/19/install-w8-ubuntu-with-uefi.html</link><description>&lt;p&gt;總是喜歡在自己的電腦上裝 Linux。小時候安裝還很麻煩，要燒光碟。後來研究了從硬碟安裝的方法，可又需要額外的磁區。一直到 USB 隨身碟普及了以後，重灌才成為一件比較方便的事。尤其 &lt;a href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt; 的安裝界面做的還不錯，後來就一直用到今天。&lt;/p&gt;
&lt;p&gt;雖然習慣使用 Linux，可是有時候還是會遇到要在 Windows 上才能寫的作業，所以每次都把電腦灌成雙系統，也慢慢熟悉了這個過程，一直以來不太有改變。不過最近拿到一台有 &lt;a href="http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"&gt;UEFI&lt;/a&gt; 開機的 Lenovo ThinkPad X1 Carbon 筆電，又想在啟用 Secure Boot 的情況下同時裝雙系統，設置上就比較麻煩了。本文就是記載這個過程。&lt;/p&gt;
&lt;h2&gt;安裝 Windows 8&lt;/h2&gt;
&lt;p&gt;原本如果是在正常的電腦上安裝 Windows 8，可以透過 &lt;a href="http://www.microsoftstore.com/store/msusa/html/pbPage.Help_Win7_usbdvd_dwnTool"&gt;Windows USB/DVD download tool&lt;/a&gt; 來製作安裝用隨身碟，但在 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Thu, 19 Jun 2014 16:05:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-06-19:/blog/2014/06/19/install-w8-ubuntu-with-uefi.html</guid><category>UEFI</category><category>Windows 8</category><category>Windows 8.1</category><category>Ubuntu 14.04</category></item><item><title>簡單的 BBS 掛站設定</title><link>http://city.shaform.com/blog/2014/05/27/stay-on-bbs.html</link><description>&lt;p&gt;很久以前看到了 othree 的&lt;a href="https://blog.othree.net/log/2005/12/16/stay-on-bbs-setting/"&gt;〈掛站系統設定篇〉&lt;/a&gt;，學會了如何在工作站上掛著 BBS。在那以後就很少使用桌面軟體來連 BBS。使用工作站掛站的優點主要是不用一直重新登入很方便，另外在一些公共區域上網時，避免直接使用明文帳密連結 telnet 而透過 ssh 感覺比較安心一點。（不過其實我建議 BBS 還是使用不同的密碼比較好呀。）&lt;/p&gt;
&lt;p&gt;後來我發現其實掛一些我平常在逛的站如 PTT or BS2 其實很少會遇到逾時被登出的狀況，所以就省去了使用 expect 來不斷送出空白訊號的麻煩。就用這篇文章來紀錄這個簡化的掛站方法。&lt;/p&gt;
&lt;p&gt;首先在 &lt;code&gt;$HOME&lt;/code&gt; 目錄建一個叫做 &lt;code&gt;screenrc-bbs&lt;/code&gt; 的資料夾，接下來在資料夾裡根據想逛的 bbs 建立 screenrc 檔案。&lt;/p&gt;
&lt;p&gt;比如說 screenrc-bbs/ptt：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vbell off 
screen -t &lt;span class="s1"&gt;&amp;#39;ptt&amp;#39;&lt;/span&gt; ssh bbsu@ptt.cc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;screenrc-bbs …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Tue, 27 May 2014 13:21:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-05-27:/blog/2014/05/27/stay-on-bbs.html</guid><category>PTT</category><category>BBS</category><category>linux</category></item><item><title>從 Pixnet 轉移到 Pelican</title><link>http://city.shaform.com/blog/2014/05/17/migrate-from-pixnet-to-pelican.html</link><description>&lt;p&gt;「翼之都」這個技術部落格其實早在 2006 年就成立了，一直放在 Blogger 上，但很少新增文章。最近好不容易開始打算多寫一些技術文，卻突然發現在 Blogger 上實在是有點麻煩：它對於一些程式碼的的支援有點不直覺，而文章的寫作方式也有許多不符我的需求。最後索性就把這個網誌改用 Pelican 建立了。而因為文章只有一點點，所以是用手動搬的。&lt;/p&gt;
&lt;p&gt;搬完以後覺得這種靜態網頁在管理和備份文章上實在是很方便。想到「浮光」這個文章集散處，其實完全是由很少 HTML 的靜態文章所組成，實在是很適合放到 Pelican 上，再者 Pixnet 的後台界面自己一直不是很喜歡，所以就乾脆一起搬了。&lt;/p&gt;
&lt;p&gt;以下記載完成這件事的流程，使用的環境是 Ubuntu 14.04 64-bit。&lt;/p&gt;
&lt;h2&gt;安裝 Pelican&lt;/h2&gt;
&lt;p&gt;詳細安裝方法可見 &lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html"&gt;Getting started&lt;/a&gt; 文件，我自己選的方法是用 &lt;a href="http://virtualenvwrapper.readthedocs.org"&gt;virtualenvwrapper&lt;/a&gt;，並從 source code …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 17 May 2014 07:25:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-05-17:/blog/2014/05/17/migrate-from-pixnet-to-pelican.html</guid><category>Pixnet</category><category>Pelican</category><category>Python</category></item><item><title>在 Ubuntu 12.04 安裝 HDFS 及 HBase 筆記</title><link>http://city.shaform.com/blog/2014/04/13/hbase-on-ubuntu-12.04.html</link><description>&lt;p&gt;這篇是假設 master, slave-1, slave-2 的 domain name/ip 分別為： master-dn, slave-1-dn, slave-2-dn。&lt;/p&gt;
&lt;h2&gt;一、HDFS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 JDK 7&lt;/p&gt;
&lt;div class="sh-highlight" markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get upgrade &lt;span class="c1"&gt;# 更新套件庫&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;sudo apt-get install software-properties-common python-software-properties  &lt;span class="c1"&gt;# 取得 add-apt-repository&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;sudo add-apt-repository ppa:webupd8team/java  &lt;span class="c1"&gt;# 新增有 oracle-java7-installer 的 ppa&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;sudo apt-get update
&lt;/span&gt;&lt;span class="hll"&gt;sudo apt-get install oracle-java7-installer
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設定 SSH&lt;/p&gt;
&lt;div class="sh-highlight" markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="hll"&gt;ssh-keygen -b …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sun, 13 Apr 2014 15:56:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2014-04-13:/blog/2014/04/13/hbase-on-ubuntu-12.04.html</guid><category>Hadoop</category><category>HBase</category><category>HDFS</category><category>Ubuntu</category></item><item><title>Single-minded : an Internet reader, made for readers, made by readers</title><link>http://city.shaform.com/blog/2013/10/20/single-minded.html</link><description>&lt;h2&gt;Realization&lt;/h2&gt;
&lt;p&gt;I've known it for a long time that it’s difficult for me to read long articles on the web. I thought it’s because of the screen. It made my eyes get tired so easily. However, when I started to read The Shallows written by Nicholas Carr, I …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sun, 20 Oct 2013 20:25:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2013-10-20:/blog/2013/10/20/single-minded.html</guid><category>browser</category><category>Internet</category></item><item><title>qwerty 轉換到 dvorak 筆記: Notes about Migrating from Qwerty to Dvorak</title><link>http://city.shaform.com/blog/2013/07/12/qwerty-to-dvorak.html</link><description>&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;Windows 是透過新增輸入法的方式增加 dvoark 鍵盤，如果是新的版本，登入畫面也可以選擇不同的鍵盤使用，如果一開始安裝就選擇 dvorak 的話，就會成為預設值。如果是 XP 或者想要把像是注音輸入法的符號對應也改成 dvorak 的話，可以參考我以前寫的文章：&lt;a href="http://shaform.wordpress.com/2007/07/14/dvorak/"&gt;〈Dvorak: 另一種鍵盤排列〉&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;(Newer versions of Windows could use different keyboard layouts for the login screen.
Just choose it when installing or add the relevant input method in language settings.)&lt;/p&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;最近的 Linux distributions …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Fri, 12 Jul 2013 18:53:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2013-07-12:/blog/2013/07/12/qwerty-to-dvorak.html</guid><category>dvorak</category><category>linux</category><category>qwerty</category><category>windows</category><category>自由行列</category><category>行列</category><category>輸入法</category></item><item><title>設定 Vim 將 qwerty 鍵盤轉為 dvorak 鍵盤</title><link>http://city.shaform.com/blog/2013/07/09/vim-qwerty-to-dvorak.html</link><description>&lt;p&gt;還記得從前在交大參加校內程式競賽時，Fedora?/FreeBSD? 環境裡頭不知為何無法透過圖形界面執行鍵盤設定，也找不到 setxkbmap，以至於無法使用 &lt;a href="http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard"&gt;dvorak&lt;/a&gt; 的窘境。每每被迫使用 qwerty 來競賽，總是覺得慢人一截。一直在研究有什麼方法可以用 command line 或設定檔強制轉換鍵盤，不過始終無果。最近用到 Red Hat Enterprise Linux 又遇到很類似的問題，同時也發現透過 rdp 連進機器時，設定的方法似乎會跟平常不太一樣。&lt;/p&gt;
&lt;p&gt;雖然 Google 良久還是沒有太多進展，但最近研究 vim 設定時突然發現可以直接修改 vim 的鍵盤對應，如此一來至少在用 vim 寫程式時能夠使用自己習慣的鍵盤排列。&lt;/p&gt;
&lt;p&gt;只要在 .vimrc 中加入如下設定，就可以在 vim 大部分的模式中直接轉換成 dvorak 鍵盤：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;keymap&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;dvorak …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Tue, 09 Jul 2013 21:28:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2013-07-09:/blog/2013/07/09/vim-qwerty-to-dvorak.html</guid><category>dvorak</category><category>qwerty</category><category>vim</category><category>vimrc</category></item><item><title>最低成本的程式協作: CoProgramming</title><link>http://city.shaform.com/blog/2013/03/05/coprogramming.html</link><description>&lt;h2&gt;緣起&lt;/h2&gt;
&lt;p&gt;在程式課堂，團隊合作常常是件頭痛的事，若是每個人各自工作，常會產生許多難以整合的版本。即使是一起到電腦教室討論，也常是一個人寫程式，其他人在旁邊看。雖然有版本控制系統等等合作工具，然而我從來沒有成功在一堂課中讓隊友學會其運作(應該說是幾乎，僅有在雙方都早已會使用，或者是由我做所有merge時才曾使用)，事實上，像 git, hg 等等複雜的系統，是否真的適合這種小型專案也尚有可懷疑的地方，尤其，有些作業所有的程式碼都在同一個檔案中，使得版本控制系統用起來十分不順手。&lt;/p&gt;
&lt;p&gt;我突然想起在&lt;a href="http://en.wikipedia.org/wiki/Here_Comes_Everybody"&gt;《Here Comes Everybody》&lt;/a&gt;書裡看過的說法：Wikipedia 的貢獻者中，絕大多數可能只有編輯過一兩行的文章。一家公司如果大部分的員工都只做一點工作，則這家公司多半無法生存。可是在 Wikipedia 的例子裡，合作的成本被降的很低，所以原來不可能利用的小量付出，也能被整合成一個共同成果。&lt;/p&gt;
&lt;p&gt;這確實就是我們遇到的情況，有時在課堂中的程式作業規模是如此的小，任何的合作成本都太過高昂。而且，這種只存在一學期的臨時團隊，根本難以形成向心力。而要求任何人為了一學期的作業學會複雜的版本控制系統更是完全不實際的想法。&lt;/p&gt;
&lt;p&gt;如果要成功整合大家一起完成這種小型的合作、如果要在每個人只寫幾行程式的情況下依然可以合作，唯一的可能性就是要將合作成本壓到極端的低。可是，要怎麼做呢 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Tue, 05 Mar 2013 08:03:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2013-03-05:/blog/2013/03/05/coprogramming.html</guid><category>軟體開發</category><category>CoProgramming</category><category>Google Drive</category></item><item><title>稍微整理了一下自由行列的原始碼</title><link>http://city.shaform.com/blog/2013/02/26/freearray-bugfixes.html</link><description>&lt;h2&gt;停擺多年&lt;/h2&gt;
&lt;p&gt;還記得數年前完成了&lt;a href="http://city.shaform.com/blog/2010/02/15/intro-to-freearray.html"&gt;「自由行列輸入法」&lt;/a&gt;的測試版本，雖然一開始還有斷斷續續修正一些 bugs，但到後來這個專案就完全停擺了。當然其中一個重要理由是突然發現 &lt;a href="http://hyperrate.com/thread.php?tid=18200"&gt;gcin 原本就有支援智慧選詞的行列輸入法&lt;/a&gt;，覺得花那麼多力氣重造輪子有點不值得。但其實也是沒有特別的新功能可以開發，而且程式本身寫的太亂不太好維護，加上課業繁忙，所以就沒有投注太多關心。&lt;/p&gt;
&lt;p&gt;gcin 的版本雖然很好，但對 Dvorak 和「行列定符」的支援總是差了那麼一點，而且不知為何總是無法習慣使用 gcin，所以後來就沒有繼續使用。而隨著作業系統的更新，之前的自由行列輸入法也不知為何無法編譯了，於是我就重回注音輸入法的懷抱，和行列輸入法疏離了許久。&lt;/p&gt;
&lt;p&gt;後來剛好又看到行列以及 dvorak 的討論串，加上最近剛好比較有空，就想把之前的程式碼翻修一下，看看能不能動，也順便把原始碼轉到現在比較習慣的 &lt;a href="https://github.com/shaform/ibus-freearray"&gt;GitHub&lt;/a&gt;。雖然只花了幾天時間，不過其實遇到的問題也不少，甚至有些問題的根源還很難弄明白。&lt;/p&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;首先遇到的問題是不知為何編譯時所連結的外部函式庫，包含 sqlite3, ibus, freearray 等等，都無法順利連結，使用到的函式都變成了 undefined …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Tue, 26 Feb 2013 14:17:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2013-02-26:/blog/2013/02/26/freearray-bugfixes.html</guid><category>自由行列</category><category>軟體開發</category><category>輸入法</category></item><item><title>ibus-faft 開發日誌</title><link>http://city.shaform.com/blog/2010/02/20/ibus-faft-develop-notes.html</link><description>&lt;p&gt;FreeArray for Test for the Input Bus 是基於 ibus 輸入法架構所製作之行列輸入法引擎，其結合來自 libchewing 的斷詞模組實作智慧選字功能，並利用「行列定符」改進原行列的符號輸入。此外，對 dvorak 鍵盤具有完整支援。&lt;/p&gt;
&lt;p&gt;在開發過程中，除了引用大量 libchewing 的程式碼外，也參考了 &lt;a href="http://code.google.com/p/ibus-array/"&gt;ibus-array&lt;/a&gt;, &lt;a href="https://github.com/definite/ibus-chewing"&gt;ibus-chewing&lt;/a&gt; 的程式碼才得以完成。&lt;/p&gt;
&lt;p&gt;時間大約是在 2010 年 2 月初直到 2 月中，連續而密集的開發。&lt;/p&gt;
&lt;h2&gt;libchewing&lt;/h2&gt;
&lt;p&gt;研究 libchewing 其實已經頗久了，直到現在對它的了解也才只是剛好得以把斷詞模組和一部分的輸入處理拿來用而已。為了配合 faft，而對 libchewing 做了些改動，主要是把 Phone 換成 ArrayCode …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Sat, 20 Feb 2010 19:46:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2010-02-20:/blog/2010/02/20/ibus-faft-develop-notes.html</guid><category>自由行列</category><category>軟體開發</category><category>輸入法</category><category>ibus</category></item><item><title>簡介自由行列專案</title><link>http://city.shaform.com/blog/2010/02/15/intro-to-freearray.html</link><description>&lt;p&gt;本持自由軟體，Release Early, Release Often 之精神，我實在應該趕快把自由行列的程式碼公開出來。不過覺得程式碼實在太醜，而且其實根本也還沒寫出什麼，再者我現在其實是一邊寫一邊學 OOP，因此程式碼常有大幅改動，再者又覺 SVN 操作好麻煩，所以遲遲未發。&lt;/p&gt;
&lt;p&gt;不過為了避免自由行列的想法消失在歷史之中。於是決定，先把自由行列專案的簡介發出。&lt;/p&gt;
&lt;h2&gt;簡易使用&lt;/h2&gt;
&lt;p&gt;行列輸入法雖然是用字根組字的輸入法，然而由於其字根的特性，需要花的記憶心力其實是比較小的，只是為了求快或者避免選字，時常必須記憶特別碼或簡碼。並且因為有些組字必須選字，而有些則不用，使得要時常注意螢幕或者把它的行為強記下來。&lt;/p&gt;
&lt;p&gt;引入智慧選字的功能之後，自由行列的新特性將是簡易。也許不再追求最快的輸入法，但是卻有機會成為組字輸入法中最易上手，選字機會最低的輸入法。每次出字時，不會再有依是否要選字而有的不一致行為，同時我也想將加上特定字尾才能輸出難字的功能去掉，而藏在「w」中的符號表，也被拿到「`」之下。如此一來，輸入的一致性將大為提高。&lt;/p&gt;
&lt;h2&gt;符號輸入&lt;/h2&gt;
&lt;p&gt;符號輸入是自由行列要改進的核心事項之一。除了符號表之外，還有從透過從行列字根發展出的「符根」輸出符號的「行列定符 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaform</dc:creator><pubDate>Mon, 15 Feb 2010 15:46:00 +0800</pubDate><guid isPermaLink="false">tag:city.shaform.com,2010-02-15:/blog/2010/02/15/intro-to-freearray.html</guid><category>自由行列</category><category>軟體開發</category><category>輸入法</category></item></channel></rss>