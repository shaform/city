<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>City of Wings - 翼之都</title><link href="http://city.shaform.com/" rel="alternate"></link><link href="http://city.shaform.com/feeds/all.atom.xml" rel="self"></link><id>http://city.shaform.com/</id><updated>2015-03-27T21:45:00+08:00</updated><entry><title>用 rnnlm, liblinear 和 word2vec 做中文情感分析測試</title><link href="http://city.shaform.com/blog/2015/03/27/sentiment-analysis.html" rel="alternate"></link><updated>2015-03-27T21:45:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2015-03-27:blog/2015/03/27/sentiment-analysis.html</id><summary type="html">&lt;p&gt;最近在研究一些 NLP 工具的使用方法，所以稍微紀錄一下心得。這次的實驗主要是參考 Tomas Mikolov 在 &lt;a href="https://code.google.com/p/word2vec/"&gt;word2vec&lt;/a&gt; 論壇上發表的&lt;a href="https://groups.google.com/d/msg/word2vec-toolkit/Q49FIrNOQRo/J6KG8mUj45sJ"&gt;文章&lt;/a&gt;，以及 &lt;a href="http://arxiv.org/abs/1412.5335"&gt;Ensemble of Generative and Discriminative Techniques for Sentiment Analysis of Movie Reviews&lt;/a&gt; 的程式碼。不過改運用在中文上，並且用簡單的 TF-IDF 取代 Naive Bayes Support Vector
Machine。&lt;/p&gt;
&lt;p&gt;資料集是使用 2014 年 NTU NLP 課程的旅館評論資料 &lt;code&gt;207884_hotel_training.txt&lt;/code&gt;，然後稍微進行一些處理。將資料修改成以下格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;LABEL TOKENS
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每行有一則資料，先是正負向標記：1 表示正、2 表示負。其後接上斷詞後的評論（以空白分隔每個詞）。過濾掉斷詞失敗的句子後，共剩下 1124 句正向評論和 1217 句負向評論。&lt;/p&gt;
&lt;p&gt;接下來我寫了一個 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/split.py"&gt;split.py&lt;/a&gt; 把資料分成測試集和訓練集：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 split.py --input data/data.txt --train_pos data/train_pos.txt --train_neg data/train_neg.txt --test_pos data/test_pos.txt --test_neg data/test_neg.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我分別取了十分之一當作測試資料：有 112 句正向、121 句負向。&lt;/p&gt;
&lt;h1&gt;RNNLM&lt;/h1&gt;
&lt;p&gt;首先，我參考了 &lt;a href="https://github.com/mesnilgr/iclr15"&gt;mesnilgr/iclr15&lt;/a&gt; 的做法，使用 &lt;a href="http://rnnlm.org/"&gt;rnnlm&lt;/a&gt; 來建造語言模型，並預測測試資料的正負。rnnlm 是一個可以用來建立 Recurrent Neural Network Language Models 的方便工具。&lt;/p&gt;
&lt;p&gt;首先分別挑出 200 則訓練資料當作幫助調整參數的 validation set，分別訓練出正向與負向語言模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;rnnlm

&lt;span class="c"&gt;# construct positive language model&lt;/span&gt;
head -n &lt;span class="m"&gt;200&lt;/span&gt; ../data/train_pos.txt &amp;gt; val.txt
cat ../data/train_pos.txt &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;1,200d&amp;#39;&lt;/span&gt; &amp;gt; train.txt
./rnnlm -rnnlm pos.model -train train.txt -valid val.txt -hidden &lt;span class="m"&gt;50&lt;/span&gt; -direct-order &lt;span class="m"&gt;3&lt;/span&gt; -direct &lt;span class="m"&gt;200&lt;/span&gt; -class &lt;span class="m"&gt;100&lt;/span&gt; -debug &lt;span class="m"&gt;2&lt;/span&gt; -bptt &lt;span class="m"&gt;4&lt;/span&gt; -bptt-block &lt;span class="m"&gt;10&lt;/span&gt; -binary

&lt;span class="c"&gt;# construct negative language model&lt;/span&gt;
head -n &lt;span class="m"&gt;200&lt;/span&gt; ../data/train_neg.txt &amp;gt; val.txt
cat ../data/train_neg.txt &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;1,200d&amp;#39;&lt;/span&gt; &amp;gt; train.txt
./rnnlm -rnnlm neg.model -train train.txt -valid val.txt -hidden &lt;span class="m"&gt;50&lt;/span&gt; -direct-order &lt;span class="m"&gt;3&lt;/span&gt; -direct &lt;span class="m"&gt;200&lt;/span&gt; -class &lt;span class="m"&gt;100&lt;/span&gt; -debug &lt;span class="m"&gt;2&lt;/span&gt; -bptt &lt;span class="m"&gt;4&lt;/span&gt; -bptt-block &lt;span class="m"&gt;10&lt;/span&gt; -binary
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著，把測試資料串在一起，並標記 ID 以符合 rnnlm 的輸入格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cat ../data/test_pos.txt ../data/test_neg.txt &lt;span class="p"&gt;|&lt;/span&gt; nl -v0 -s&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; -w1 &amp;gt; test.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後再用正向與負向模型預測每個句子個可能性，並將其比值輸出到檔案中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./rnnlm -rnnlm pos.model -test test.txt -debug &lt;span class="m"&gt;0&lt;/span&gt; -nbest &amp;gt; model_pos_score.txt
./rnnlm -rnnlm neg.model -test test.txt -debug &lt;span class="m"&gt;0&lt;/span&gt; -nbest &amp;gt; model_neg_score.txt
mkdir ../scores
paste model_pos_score.txt model_neg_score.txt &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1/$2;}&amp;#39;&lt;/span&gt; &amp;gt; ../scores/RNNLM
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再稍微用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/normalize.py"&gt;normalize.py&lt;/a&gt; 調整數據的範圍，就可以用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/evaluate.py"&gt;evaluate.py&lt;/a&gt; 來檢查最後的正確率了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
python3 normalize.py --input scores/RNNLM --output scores/RNNLM --type rnnlm
thon3 evaluate.py --test_pos data/test_pos.txt --scores scores/RNNLM
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# RNNLM accuracy: 87.9828%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Word2Vec: Paragraph Vectors + Logistic Regression&lt;/h1&gt;
&lt;p&gt;接下來我們要用具有將整個句子轉成 vector 能力的修改版 word2vec 來處理句子。值得注意的是，&lt;a href="https://github.com/mesnilgr/iclr15"&gt;iclr15&lt;/a&gt; 中的 word2vec 版本，在句子數目太多時，會因為 vocabulary 數量太大，而造成許多句子被丟棄而無法正確轉成 embedding。&lt;/p&gt;
&lt;p&gt;為了解決這個問題，我修改了程式碼 &lt;a href="https://github.com/shaform/word2vec/tree/doc2vec"&gt;word2vec@shaform&lt;/a&gt;，讓我們可以用 &lt;code&gt;@@SE&lt;/code&gt; 為開頭標示用來訓練 word embeddings 而不需要產生 paragraph vectors 的句子；以 &lt;code&gt;@@SS&lt;/code&gt; 為開頭來標示需要產生 paragraph vectors 的句子。這樣一來就可以同時擁有大量的訓練資料，又可以完整產生所有指定的 paragraph vectors。不過在這個實驗中，為了方便，我們就不額外引進大量訓練資料，所以所有句子都會以 &lt;code&gt;@@SS&lt;/code&gt; 開頭。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;word2vec
cat ../data/train_pos.txt ../data/train_neg.txt ../data/test_pos.txt ../data/test_neg.txt &lt;span class="p"&gt;|&lt;/span&gt; nl -v0 -s&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; -w1 &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/^/@@SS-/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; shuf &amp;gt; all.txt
&lt;span class="nb"&gt;time&lt;/span&gt; ./word2vec -train all.txt -output vectors.txt -cbow &lt;span class="m"&gt;0&lt;/span&gt; -size &lt;span class="m"&gt;400&lt;/span&gt; -window &lt;span class="m"&gt;10&lt;/span&gt; -negative &lt;span class="m"&gt;5&lt;/span&gt; -hs &lt;span class="m"&gt;1&lt;/span&gt; -sample 1e-3 -threads &lt;span class="m"&gt;24&lt;/span&gt; -binary &lt;span class="m"&gt;0&lt;/span&gt; -iter &lt;span class="m"&gt;20&lt;/span&gt; -min-count &lt;span class="m"&gt;1&lt;/span&gt; -sentence-vectors 1
grep &lt;span class="s1"&gt;&amp;#39;@@SS-&amp;#39;&lt;/span&gt; vectors.txt &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/^@@SS-//&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -n &amp;gt; sentence_vectors.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/transform.py"&gt;transform.py&lt;/a&gt; 和 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/train.py"&gt;train.py&lt;/a&gt; 來產生訓練資料，並用 &lt;a href="https://github.com/cjlin1/liblinear"&gt;liblinear&lt;/a&gt; 的 logistic regression 來訓練：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 ../transform.py --input sentence_vectors.txt --output sentence_features.txt
python3 ../train.py --features sentence_features.txt --train_pos ../data/train_pos.txt --train_neg ../data/train_neg.txt --test_pos ../data/test_pos.txt --output_train train.txt --output_test test.txt
../liblinear/train -s &lt;span class="m"&gt;0&lt;/span&gt; train.txt model.logreg
../liblinear/predict -b &lt;span class="m"&gt;1&lt;/span&gt; test.txt model.logreg out.logreg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再稍微用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/normalize.py"&gt;normalize.py&lt;/a&gt; 調整數據的範圍，就可以用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/evaluate.py"&gt;evaluate.py&lt;/a&gt; 來檢查最後的正確率了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed &lt;span class="s1"&gt;&amp;#39;1d&amp;#39;&lt;/span&gt; out.logreg &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f3 &amp;gt; ../scores/DOC2VEC
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
python3 normalize.py --input scores/DOC2VEC --output scores/DOC2VEC --type logreg
python3 evaluate.py --test_pos data/test_pos.txt --scores scores/DOC2VEC
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# DOC2VEC accuracy: 84.5494%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;TF-IDF&lt;/h1&gt;
&lt;p&gt;最後則是簡單的 TF-IDF，我使用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/tfidf.py"&gt;tfidf.py&lt;/a&gt; 來產生 unigrams 和 bigrams，並用之前的 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/train.py"&gt;train.py&lt;/a&gt; 來產生訓練資料。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;tfidf
cat ../data/train_pos.txt ../data/train_neg.txt ../data/test_pos.txt ../data/test_neg.txt &amp;gt; all.txt
python3 ../tfidf.py --input all.txt --output features.txt
python3 ../train.py --features features.txt --train_pos ../data/train_pos.txt --train_neg ../data/train_neg.txt --test_pos ../data/test_pos.txt --output_train train.txt --output_test test.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著用 &lt;a href="https://github.com/cjlin1/liblinear"&gt;liblinear&lt;/a&gt; 的 logistic regression 來訓練：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;../liblinear/train -s &lt;span class="m"&gt;0&lt;/span&gt; train.txt model.logreg
../liblinear/predict -b &lt;span class="m"&gt;1&lt;/span&gt; test.txt model.logreg out.logreg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再稍微用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/normalize.py"&gt;normalize.py&lt;/a&gt; 調整數據的範圍，就可以用 &lt;a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/evaluate.py"&gt;evaluate.py&lt;/a&gt; 來檢查最後的正確率了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sed &lt;span class="s1"&gt;&amp;#39;1d&amp;#39;&lt;/span&gt; out.logreg &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f3 &amp;gt; ../scores/TFIDF
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
python3 normalize.py --input scores/TFIDF --output scores/TFIDF --type logreg

python3 evaluate.py --test_pos data/test_pos.txt --scores scores/TFIDF
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# TFIDF accuracy: 90.9817%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;整合&lt;/h1&gt;
&lt;p&gt;最後用簡單的算術平均整合 3 個模型，效能倒是沒有顯著上升：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;paste scores/RNNLM scores/DOC2VEC scores/TFIDF &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print ($1+$2+$3)/3;}&amp;#39;&lt;/span&gt; &amp;gt; scores/TOTAL
python3 evaluate.py --test_pos data/test_pos.txt --scores scores/TOTAL

&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# RNNLM accuracy: 87.9828%&lt;/span&gt;
&lt;span class="c"&gt;# DOC2VEC accuracy: 84.5494%&lt;/span&gt;
&lt;span class="c"&gt;# TFIDF accuracy: 90.9817%&lt;/span&gt;
&lt;span class="c"&gt;# TOTAL accuracy: 90.1288%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;程式碼&lt;/h2&gt;
&lt;p&gt;我把相關的程式碼放在 GitHub 上面供參考：&lt;a href="https://github.com/shaform/experiments/tree/master/sentiment_analysis"&gt;shaform/sentiment_analysis&lt;/a&gt;。&lt;/p&gt;</summary><category term="word2vec"></category><category term="Chinese"></category><category term="python"></category><category term="liblinear"></category><category term="rnnlm"></category><category term="tf-idf"></category><category term="sentiment analysis"></category></entry><entry><title>建立 LDAP 鏡像、及日常管理指令集</title><link href="http://city.shaform.com/blog/2014/12/14/mirror-and-mgmt-on-ldap.html" rel="alternate"></link><updated>2014-12-14T17:42:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-12-14:blog/2014/12/14/mirror-and-mgmt-on-ldap.html</id><summary type="html">&lt;h2&gt;建立鏡像&lt;/h2&gt;
&lt;p&gt;假設只有一台 LDAP server，則一旦 crash 大家都無法登入了，故可以建立一個鏡像 server，不斷同步資料內容。這篇假設你已經建好前篇的 ldap.lab.csie.ntu.edu.tw，而想再建一個 ldapm.lab.csie.ntu.edu.tw。則在 clients 的設定可設為：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# /etc/ldap/ldap.conf
URI     ldaps://ldap.lab.csie.ntu.edu.tw ldaps://ldapm.lab.csie.ntu.edu.tw
TLS_CACERT      /etc/ssl/certs/ca-certificates.crt

# /etc/nslcd.conf
uri ldaps://ldap.lab.csie.ntu.edu.tw
uri ldaps://ldapm.lab.csie.ntu.edu.tw
#ssl off
tls_reqcert demand
tls_cacertfile /etc/ssl/certs/ca-certificates.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;初始安裝 Mirror Server&lt;/h2&gt;
&lt;p&gt;首先透過&lt;a href="http://city.shaform.com/blog/2014/12/13/migrate-from-nis-to-ldap.html"&gt;前一篇文章&lt;/a&gt;的作法安裝 ldapm.lab.csie.ntu.edu.tw 但跳過「轉移 NIS 資料」的部份。此外，需使用同一個 &lt;code&gt;my_root&lt;/code&gt; 但卻須產生新的 server 憑證，並對應到新的網域名稱（注意 &lt;code&gt;-set_serial&lt;/code&gt; 號碼與之前不同）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;openssl genrsa -out ldapm_key.pem 1024
openssl req -new -key ldapm_key.pem -out ldapm_csr.pem
openssl x509 -req -days 36500 -in ldapm_csr.pem -CA my_root_crt.pem -CAkey my_root_key.pem -out ldapm_crt.pem -set_serial 2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;同時設定 Master 和 Mirror Server&lt;/h2&gt;
&lt;p&gt;接下來，我們要在兩邊分別建立一個帳戶供 mirror 之用，首先建立一個密碼，比如說 &lt;code&gt;1234&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;slappasswd -h &lt;span class="o"&gt;{&lt;/span&gt;SSHA&lt;span class="o"&gt;}&lt;/span&gt;
New password: 
Re-enter new password: 
&lt;span class="o"&gt;{&lt;/span&gt;SSHA&lt;span class="o"&gt;}&lt;/span&gt;oQ1Lw12oTHhdL9NwHQe2FoypBZX90QKx

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="o"&gt;{&lt;/span&gt;SSHA&lt;span class="o"&gt;}&lt;/span&gt;oQ1Lw12oTHhdL9NwHQe2FoypBZX90QKx &lt;span class="p"&gt;|&lt;/span&gt; base64
&lt;span class="nv"&gt;e1NTSEF9b1ExTHcxMm9USGhkTDlOd0hRZTJGb3lwQlpYOTBRS3g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著，分別在兩台 server 上建立 &lt;code&gt;mirror.ldif&lt;/code&gt; 檔案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dn: cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
changetype: add 
objectClass: simpleSecurityObject
objectClass: organizationalRole
cn: mirrormode
description: Syncrepl user for mirrormode operation
userPassword:: e1NTSEF9b1ExTHcxMm9USGhkTDlOd0hRZTJGb3lwQlpYOTBRS3g=
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapmodify -D &amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; -W -f mirror.ldif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著，分別在兩台 server 上建立 &lt;code&gt;mirror_config.ldif&lt;/code&gt; 檔案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dn: cn=module{0},cn=config
changetype: modify
add: olcModuleLoad
olcModuleLoad: syncprov

dn: olcDatabase={1}hdb,cn=config
changetype: modify
delete: olcAccess
olcAccess: {0}to attrs=userPassword,shadowLastChange by self write by anonymous auth by dn=&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; write by * none
-
add: olcAccess
olcAccess: {0}to attrs=userPassword,shadowLastChange by self write by anonymous auth by dn=&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; write by dn=&amp;quot;cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; read by * none
-

dn: olcOverlay=syncprov,olcDatabase={1}hdb,cn=config
changeType: add 
objectClass: olcOverlayConfig
objectClass: olcSyncProvConfig
olcOverlay: syncprov
olcSpCheckpoint: 100 10
olcSpSessionLog: 100

dn: olcDatabase={1}hdb,cn=config
changeType: modify
delete: olcDbIndex
olcDbIndex: objectClass eq
-
add: olcDbIndex
olcDbIndex: objectClass,entryCSN,entryUUID eq
-
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapmodify -Y EXTERNAL -H ldapi:/// -f mirror_config.ldif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後在兩台機器上建立不同的兩個檔案 &lt;code&gt;ldap.ldif&lt;/code&gt;, &lt;code&gt;ldapm.ldif&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;ldap.lab.csie.ntu.edu.tw：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dn: cn=config
changeType: modify
add: olcServerID
olcServerID: 0
-

dn: olcDatabase={1}hdb,cn=config
changeType: modify
add: olcSyncrepl
olcSyncrepl: rid=001 provider=ldaps://ldapm.lab.csie.ntu.edu.tw bindmethod=simple binddn=&amp;quot;cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; credentials=1234 searchbase=&amp;quot;dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; schemachecking=on type=refreshAndPersist retry=&amp;quot;60 +&amp;quot;
-
add: olcMirrorMode
olcMirrorMode: TRUE
-
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapmodify -Y EXTERNAL -H ldapi:/// -f ldap.ldif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ldapm.lab.csie.ntu.edu.tw：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dn: cn=config
changeType: modify
add: olcServerID
olcServerID: 1
-

dn: olcDatabase={1}hdb,cn=config
changeType: modify
add: olcSyncrepl
olcSyncrepl: rid=001 provider=ldaps://ldap.lab.csie.ntu.edu.tw bindmethod=simple binddn=&amp;quot;cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; credentials=1234 searchbase=&amp;quot;dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot; schemachecking=on type=refreshAndPersist retry=&amp;quot;60 +&amp;quot;
-
add: olcMirrorMode
olcMirrorMode: TRUE
-
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapmodify -Y EXTERNAL -H ldapi:/// -f ldapm.ldif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意 &lt;code&gt;olcServerID&lt;/code&gt; 要用不同的編號，而 &lt;code&gt;provider&lt;/code&gt; 要設成對方，&lt;code&gt;credentials&lt;/code&gt; 則是剛剛選擇的密碼。&lt;/p&gt;
&lt;p&gt;最後測試看看是否已經同步：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapsearch -x -h localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;日常管理&lt;/h2&gt;
&lt;h3&gt;建立使用者&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapadd -x -W -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;dn: cn=$username,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&lt;/span&gt;
&lt;span class="s"&gt;objectClass: posixGroup&lt;/span&gt;
&lt;span class="s"&gt;objectClass: top&lt;/span&gt;
&lt;span class="s"&gt;cn: $username&lt;/span&gt;
&lt;span class="s"&gt;userPassword: {crypt}x&lt;/span&gt;
&lt;span class="s"&gt;gidNumber: $userid&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

ldapadd -x -W -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;dn: uid=$username,ou=People,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&lt;/span&gt;
&lt;span class="s"&gt;uid: $username&lt;/span&gt;
&lt;span class="s"&gt;cn: $realname&lt;/span&gt;
&lt;span class="s"&gt;objectClass: account&lt;/span&gt;
&lt;span class="s"&gt;objectClass: posixAccount&lt;/span&gt;
&lt;span class="s"&gt;objectClass: top&lt;/span&gt;
&lt;span class="s"&gt;objectClass: shadowAccount&lt;/span&gt;
&lt;span class="s"&gt;shadowMax: 99999&lt;/span&gt;
&lt;span class="s"&gt;shadowWarning: 7&lt;/span&gt;
&lt;span class="s"&gt;loginShell: /bin/bash&lt;/span&gt;
&lt;span class="s"&gt;uidNumber: $userid&lt;/span&gt;
&lt;span class="s"&gt;gidNumber: $userid&lt;/span&gt;
&lt;span class="s"&gt;homeDirectory: /home/$username&lt;/span&gt;
&lt;span class="s"&gt;gecos: ,,,&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

ldappasswd -x -W -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; -S &lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$username&lt;/span&gt;,ou&lt;span class="o"&gt;=&lt;/span&gt;People,dc&lt;span class="o"&gt;=&lt;/span&gt;lab,dc&lt;span class="o"&gt;=&lt;/span&gt;csie,dc&lt;span class="o"&gt;=&lt;/span&gt;ntu,dc&lt;span class="o"&gt;=&lt;/span&gt;edu,dc&lt;span class="o"&gt;=&lt;/span&gt;tw
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;刪除使用者&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapdelete -x -W -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cn=&lt;/span&gt;&lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="s2"&gt;,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt;
ldapdelete -x -W -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;uid=&lt;/span&gt;&lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="s2"&gt;,ou=People,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;修改使用者的群組&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# add&lt;/span&gt;
ldapmodify -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; -W &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;dn: cn=$groupname,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&lt;/span&gt;
&lt;span class="s"&gt;changetype: modify&lt;/span&gt;
&lt;span class="s"&gt;add: memberUid&lt;/span&gt;
&lt;span class="s"&gt;memberUid: $username&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="c"&gt;# remove&lt;/span&gt;
ldapmodify -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; -W &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;dn: cn=$groupname,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&lt;/span&gt;
&lt;span class="s"&gt;changetype: modify&lt;/span&gt;
&lt;span class="s"&gt;delete: memberUid&lt;/span&gt;
&lt;span class="s"&gt;memberUid: $username&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;備份與還原&lt;/h3&gt;
&lt;p&gt;如果只有一個鏡像壞掉，只要再用這篇的方法建立一個鏡像就可以備份到另一個。否則可以用以下兩個指令，注意不同的鏡像設定也會被備份，所以不同台 server 可能不能直接用同一個備份檔還原：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;slapcat &amp;gt; bak.ldif

slapadd -l bak.ldif
&lt;/pre&gt;&lt;/div&gt;</summary><category term="LDAP"></category><category term="linux"></category><category term="Debian"></category></entry><entry><title>在 Debian 7.7 系統中轉移 NIS 到 LDAP</title><link href="http://city.shaform.com/blog/2014/12/13/migrate-from-nis-to-ldap.html" rel="alternate"></link><updated>2014-12-13T17:42:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-12-13:blog/2014/12/13/migrate-from-nis-to-ldap.html</id><summary type="html">&lt;p&gt;本文件紀錄了基本的 LDAP 設置。&lt;/p&gt;
&lt;h2&gt;設定 LDAP Master&lt;/h2&gt;
&lt;h3&gt;基本設置&lt;/h3&gt;
&lt;p&gt;首先編輯 &lt;code&gt;/etc/ldap/ldap.conf&lt;/code&gt; 填上適當的網域名稱。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;BASE    dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
URI     ldap://ldap.lab.csie.ntu.edu.tw
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 URI 必須是可以連上 Master server 的 IP 或網域名稱。&lt;/p&gt;
&lt;p&gt;緊接著，安裝 OpenLDAP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install slapd ldap-utils
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此時它只會要你設定一個 admin 密碼，如果希望看到完整設定，可以事先執行以下指令，並設定 Dialog 為不高於 Medium 的層級。不過我偏好不改動這個設定，而是事後再重新執行設定程式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo dpkg-reconfigure debconf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;事後重新設定的指令則是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo dpkg-reconfigure slapd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可按照喜好自行設定，但 domain name 要跟 &lt;code&gt;/etc/lapd/lapd.conf&lt;/code&gt; 一致：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Omit OpenLDAP server configuration? No
DNS domain name: lab.csie.ntu.edu.tw
Organization name: lab.csie.ntu.edu.tw
Administrator password: &amp;lt;PASSWORD&amp;gt;
Confirm password: &amp;lt;PASSWORD&amp;gt;
Database backend to use: HDB
Do you want the database to be removed when slapd is purged? No
Move old database? Yes
Allow LDAPv2 protocol? No
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以後如果想重設 LDAP 也可重新執行上述指令。他會將 old database 移動到 &lt;code&gt;/var/backups&lt;/code&gt; 資料夾，不過如果已經移動過一次則指令會失敗，此時可先手動砍除舊的 &lt;code&gt;/var/backups/&amp;lt;ldap directory&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以執行以下兩個指令來確認設置成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapsearch -x
slapcat
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;轉移 NIS 資料&lt;/h3&gt;
&lt;p&gt;首先安裝轉移工具組：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install migrationtools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著編輯設定檔 &lt;code&gt;/usr/share/migrationtools/migrate_common.ph&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Default DNS domain&lt;/span&gt;
&lt;span class="nv"&gt;$DEFAULT_MAIL_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lab.csie.ntu.edu.tw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;# Default base&lt;/span&gt;
&lt;span class="nv"&gt;$DEFAULT_BASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
...
&lt;span class="c"&gt;# Uncomment these to exclude Debian-managed system users and groups&lt;/span&gt;
&lt;span class="nv"&gt;$IGNORE_UID_BELOW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1000&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c"&gt;# Don&amp;#39;t uncomment this if you want to be able to add users to system groups&lt;/span&gt;
&lt;span class="c"&gt;# $IGNORE_GID_BELOW = 1000;&lt;/span&gt;
&lt;span class="c"&gt;# And here&amp;#39;s the opposite for completeness&lt;/span&gt;
&lt;span class="nv"&gt;$IGNORE_UID_ABOVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 29999&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$IGNORE_GID_ABOVE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 29999&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由於 Debian 的 LDAP 預設並沒有載入 misc.schema，所以如果要讀入 alias 資料就會出錯。因此我們只手動載入需要的部份，而不使用自動載入全部資料的方法。進入 &lt;code&gt;/usr/share/migrationtools/&lt;/code&gt; 資料夾後執行以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# create basic data&lt;/span&gt;
./migrate_base.pl &lt;span class="p"&gt;|&lt;/span&gt; ldapadd -x -W -h localhost -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; -c

&lt;span class="c"&gt;# migrate passwd&lt;/span&gt;
./migrate_passwd.pl /etc/passwd &lt;span class="p"&gt;|&lt;/span&gt; ldapadd -x -W -h localhost -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; -c

&lt;span class="c"&gt;# migrate group&lt;/span&gt;
./migrate_group.pl /etc/group &lt;span class="p"&gt;|&lt;/span&gt; ldapadd -x -W -h localhost -D &lt;span class="s2"&gt;&amp;quot;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&amp;quot;&lt;/span&gt; -c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行 &lt;code&gt;migrate_base.pl&lt;/code&gt; 會有部份內容無法處理是正常的。&lt;/p&gt;
&lt;h2&gt;設定 LDAP Client&lt;/h2&gt;
&lt;p&gt;在要透過 LDAP 登入的主機上進行以下步驟，若 LDAP Master server 本身也想透過 LDAP 登入的話，也是採用相同辦法。首先安裝相關程式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install libpam-ldapd libnss-ldapd nslcd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;並回答相關問題：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;LDAP server URI: &amp;lt;this answer is the same as what you put in &amp;#39;/etc/ldap/ldap.conf&amp;#39;&amp;gt;
ldap://ldap.lab.csie.ntu.edu.tw/

LDAP server search base:
dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw

Name services to configure:
group, password, shadow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著如果要讓 root 可以在不輸入 LDAP 密碼的情況下修改別人密碼，則可修改 &lt;code&gt;/etc/nslcd.conf&lt;/code&gt;，其中 &lt;code&gt;rootpwmodpw&lt;/code&gt; 設為之前選擇的 LDAP 密碼：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldap_version 3
rootpwmoddn cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
rootpwmodpw &amp;lt;PASSWORD&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要讓 client 也能執行 &lt;code&gt;ldapsearch&lt;/code&gt; 等指令，也可依 master 的方法修改 &lt;code&gt;/etc/lapd/lapd.conf&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可重新開機測試是否成功。&lt;/p&gt;
&lt;h2&gt;TLS 加密連線&lt;/h2&gt;
&lt;p&gt;以上的作法，在連線時不夠安全，因此我們可以啟用 TLS 加密連線。&lt;/p&gt;
&lt;h3&gt;建立憑證&lt;/h3&gt;
&lt;p&gt;假設你有可供使用的憑證當然很好，但是一般人除了等待 &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; 以外，可能也只能自己的憑證自己建了。&lt;/p&gt;
&lt;p&gt;在某個資料夾內建立相關憑證：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;openssl genrsa -out my_root_key.pem 1024
openssl req -new -key my_root_key.pem -out my_root_csr.pem
openssl x509 -req -days &lt;span class="m"&gt;36500&lt;/span&gt; -in my_root_csr.pem -signkey my_root_key.pem -out my_root_crt.pem

openssl genrsa -out ldap_key.pem 1024
openssl req -new -key ldap_key.pem -out ldap_csr.pem

openssl x509 -req -days &lt;span class="m"&gt;36500&lt;/span&gt; -in ldap_csr.pem -CA my_root_crt.pem -CAkey my_root_key.pem -out ldap_crt.pem -set_serial 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中的資訊可以隨意填，但在建立 &lt;code&gt;ldap_csr.pem&lt;/code&gt; 時，Common Name 一定要填 client 可以連到的，LDAP master server 的 domain name：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Country Name (2 letter code) [AU]:TW
State or Province Name (full name) [Some-State]:Taiwan
Locality Name (eg, city) []:Taipei
Organization Name (eg, company) [Internet Widgits Pty Ltd]:NTU Lab
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:ldap.lab.csie.ntu.edu.tw
Email Address []:

Please enter the following &amp;#39;extra&amp;#39; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後在 master 上建立一個資料夾，並將相關檔案複製，設定適當的權限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir /etc/ldap/ssl
sudo cp ldap_key.pem ldap_crt.pem /etc/ldap/ssl
sudo mkdir /usr/share/ca-certificates/my/
sudo cp my_root_crt.pem /usr/share/ca-certificates/my/my_root.crt
sudo chmod &lt;span class="m"&gt;644&lt;/span&gt; /usr/share/ca-certificates/my/my_root.crt
sudo dpkg-reconfigure ca-certificates &lt;span class="c"&gt;# choose to add my/my_root.crt&lt;/span&gt;
sudo update-ca-certificates

sudo chown -R root:openldap /etc/ldap/ssl
sudo chmod -R o-rwx /etc/ldap/ssl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後在所有 client 上也可以複製 &lt;code&gt;my_root_crt.pem&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo cp my_root_crt.pem /usr/share/ca-certificates/my/my_root.crt
sudo chmod &lt;span class="m"&gt;644&lt;/span&gt; /usr/share/ca-certificates/my/my_root.crt
sudo dpkg-reconfigure ca-certificates &lt;span class="c"&gt;# choose to add my/my_root.crt&lt;/span&gt;
sudo update-ca-certificates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;小心收藏剩餘的 key.pem，不要讓別人看到囉。&lt;/p&gt;
&lt;h3&gt;設定 LDAP Master Server&lt;/h3&gt;
&lt;p&gt;注意，這裡的設定若一不小心可能導致 LDAP server 無法運作，故設定時最好先備份所有檔案。&lt;/p&gt;
&lt;p&gt;首先在 master 上更改 &lt;code&gt;/etc/default/slapd&lt;/code&gt;，將 &lt;code&gt;LAPD_SERVICES&lt;/code&gt; 改成以下內容，也就是只允許本機不透過 TLS 連線：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SLAPD_SERVICES=&amp;quot;ldap://127.0.0.1:389/ ldaps:/// ldapi:///&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著建立一個 &lt;code&gt;tls.ldif&lt;/code&gt; 檔案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dn: cn=config
add: olcTLSCACertificateFile
olcTLSCACertificateFile: /etc/ssl/certs/ca-certificates.crt
-
add: olcTLSCertificateFile
olcTLSCertificateFile: /etc/ldap/ssl/ldap_crt.pem
-
add: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/ldap/ssl/ldap_key.pem
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;並套用設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldapmodify -Y EXTERNAL -H ldapi:/// -f tls.ldif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同時更改 &lt;code&gt;/etc/ldap/ldap.conf&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;URI     ldaps://ldap.lab.csie.ntu.edu.tw
TLS_CACERT      /etc/ssl/certs/ca-certificates.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後重新啟動 ldap：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service slapd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;設定 LDAP Client&lt;/h3&gt;
&lt;p&gt;修改 &lt;code&gt;/etc/nslcd.conf&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;uri ldaps://ldap.lab.csie.ntu.edu.tw
#ssl off
tls_reqcert demand
tls_cacertfile /etc/ssl/certs/ca-certificates.crt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重啟服務：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service nslcd restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可測試是否可以登入。&lt;/p&gt;</summary><category term="LDAP"></category><category term="NIS"></category><category term="linux"></category><category term="Debian"></category><category term="SSH"></category></entry><entry><title>連結兩個私有內網</title><link href="http://city.shaform.com/blog/2014/11/12/connect-subnets.html" rel="alternate"></link><updated>2014-11-12T09:20:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-11-12:blog/2014/11/12/connect-subnets.html</id><summary type="html">&lt;p&gt;實驗室的工作站先生們待在兩個不同的內網，各自透過一台工作站當 gateway 和外面的世界溝通。因此，要連結彼此時，常需要透過 gateway 的特定 port 來轉送到 sshd。這樣每台機器的其他不同 services 也都要額外開個 port，感覺非常不方便。&lt;/p&gt;
&lt;p&gt;記得學長大大離開實驗室前，總是不能忘懷他們無法在一起的困難。於是晚輩們就決定試圖解決這個問題了！&lt;/p&gt;
&lt;h2&gt;機器配置&lt;/h2&gt;
&lt;p&gt;假設現在有兩群工作站：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;bob&lt;/span&gt;     &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;  &lt;span class="n"&gt;eth1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;140.112.13.5&lt;/span&gt;
&lt;span class="n"&gt;jack&lt;/span&gt;    &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;

&lt;span class="n"&gt;ted&lt;/span&gt;     &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;192.168.14.1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;  &lt;span class="n"&gt;eth1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;140.112.14.20&lt;/span&gt;
&lt;span class="n"&gt;nick&lt;/span&gt;    &lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;192.168.14.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中，bob 和 ted 有接上 Internet，而 jack 接到 bob，nick 接到 ted，並透過他們連結外網。我們希望讓 jack 和 nick 可以直接連結。&lt;/p&gt;
&lt;h2&gt;作法&lt;/h2&gt;
&lt;h3&gt;Bob 的設定&lt;/h3&gt;
&lt;p&gt;我們將會在 bob 和 ted 之間建立一個 tunnel，然後修改 routing table 將送往另一個內網的流量導進 tunnel 之中。&lt;/p&gt;
&lt;p&gt;首先，在 bob 的 &lt;code&gt;/etc/network/interface&lt;/code&gt; 中，修改 eth0 的設置（或者修改 eth1 也可以，不過考慮到如果 eth1 改錯可能就無法用 ssh 連進來，所以先改 eth0）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;
&lt;span class="n"&gt;iface&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt; &lt;span class="n"&gt;inet&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;
        &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.1&lt;/span&gt;
        &lt;span class="n"&gt;netmask&lt;/span&gt; &lt;span class="mf"&gt;255.255.255.0&lt;/span&gt;
        &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.0&lt;/span&gt;
        &lt;span class="n"&gt;broadcast&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.255&lt;/span&gt;
        &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;tunnel&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;ipip&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="mf"&gt;140.112.14.20&lt;/span&gt;
        &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mf"&gt;192.168.15.5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt;
        &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
        &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mf"&gt;192.168.14.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;192.168.15.20&lt;/span&gt;
        &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="mf"&gt;192.168.14.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;192.168.15.20&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;tunnel&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;主要是要讓 bob 連結內網時，自動建立起 tunnel，而切斷連線時自動取消，在實際修改檔案前，也可以先用指令列測試其中的指令：&lt;/p&gt;
&lt;p&gt;首先是建立一個虛擬的 tunnel 界面，並連結到 ted 的外部 IP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ip tunnel add mytunnel mode ipip remote 140.112.14.20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著，隨意為 bob 在此界面指定一個 IP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo up ip addr add 192.168.15.5/24 dev mytunnel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來，把界面啟動連結：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo up ip link &lt;span class="nb"&gt;set &lt;/span&gt;dev mytunnel up
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後再設定把連到另一個內網的流量都導到 ted 在此 tunnel 的 IP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo up ip route add 192.168.14.0/24 via 192.168.15.20
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Ted 的設定&lt;/h3&gt;
&lt;p&gt;同樣的道理，在 ted 的 &lt;code&gt;/etc/network/interface&lt;/code&gt; 中，修改 eth0 的設置，加入以下項目：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;tunnel&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;ipip&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="mf"&gt;140.112.13.5&lt;/span&gt;
&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mf"&gt;192.168.15.20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt;
&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;192.168.15.5&lt;/span&gt;
&lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;192.168.15.5&lt;/span&gt;
&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;tunnel&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;mytunnel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;啟用 IP Forwarding&lt;/h3&gt;
&lt;p&gt;理論上原本工作站的內網設置應該就有啟用 IP forwarding 的功能，不過為求完整，在這裡記載啟用的方法。可以在 bob 和 ted 上執行以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo sysctl -w net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此外，若要讓此設定開機後仍然維持，則需修改 &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;，並取消註解以下的項目：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#net.ipv4.ip_forward=1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;啟用新網路設定&lt;/h3&gt;
&lt;p&gt;接下來就可以在 bob 和 ted 上執行以下指令使新設定生效了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo ifdown eth0 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ifup eth0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意由於一開始 down 和 post-down 的指令可能會失敗，所以如果直接執行以上指令有可能會有問題，這時也可以重新開機。或者稍微修改一下指令執行及檔案修改的順序來達成想要的效果。&lt;/p&gt;
&lt;h3&gt;測試&lt;/h3&gt;
&lt;p&gt;可以在 bob 和 jack 上測試以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ping&lt;/span&gt; &lt;span class="mf"&gt;192.168.14.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 ted 和 nick 上測試以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ping&lt;/span&gt; &lt;span class="mf"&gt;192.168.13.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;參考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://unix.stackexchange.com/questions/44065/linux-networking-routing-to-virtual-ip-addresses-from-a-different-subnet"&gt;Linux Networking routing to virtual ip addresses from a different subnet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要把兩組機器都放進同個內網，也可以參考更進階的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.openvpn.net/how-to-tutorialsguides/virtual-platforms/site-to-site-layer-2-bridging-using-openvpn-access-server/"&gt;Site-to-Site Layer 2 Bridging Using OpenVPN Access Server and a Linux Gateway Client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="subnet"></category><category term="network"></category></entry><entry><title>Google Inbox-like Web Browsing</title><link href="http://city.shaform.com/blog/2014/11/07/google-inbox-like-web-browsing.html" rel="alternate"></link><updated>2014-11-07T18:52:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-11-07:blog/2014/11/07/google-inbox-like-web-browsing.html</id><summary type="html">&lt;p&gt;Last time, I explored the idea of designing a web browsing UI that reduces the possibility of distractions in &lt;a href="http://city.shaform.com/blog/2013/10/20/single-minded.html"&gt;〈Single-minded : an Internet reader, made for readers, made by readers〉&lt;/a&gt;. While that idea might sound interesting, the design itself was somewhat primitive. Recently, Google has announced &lt;a href="http://www.google.com/inbox/"&gt;Inbox&lt;/a&gt;, a new way to handle email. And I find that many ideas behind Inbox are also applicable to web browsing as well.&lt;/p&gt;
&lt;h2&gt;Tabs as Threads&lt;/h2&gt;
&lt;p&gt;For example, different tabs can be represented as different threads, and for each thread, the history can be easily represented as different 'email' in the same thread.&lt;/p&gt;
&lt;p&gt;&lt;img alt="History as emails" src="http://city.shaform.com/images/inbox-history.png" /&gt;&lt;/p&gt;
&lt;p&gt;Such layout provides better navigation for histories than the current design of 'back' and 'forward' buttons. Sophisticated text summarization techniques can also be used to enable user to get information without actually open that page.&lt;/p&gt;
&lt;h2&gt;Search as Threads&lt;/h2&gt;
&lt;p&gt;Not only a tab can be represented as threads, a search attempt can also utilize the thread layout. We simply click on the empty space, and a search input field would appear. After entering the keywords, we click as many results as we like. Each click results in a different 'email' in the same threads, and we can inspect each one later at any time. We can archive unrelavent pages and decide to mark every remaining results with a label for later use.&lt;/p&gt;
&lt;h2&gt;Unification of History, Bookmarks, and Tabs&lt;/h2&gt;
&lt;p&gt;Indeed, every page marked as done (archived) is just like the old history. Every page on the inbox is just like the tabs. And every page with a label is a bookmark. In this way, we unify everything with a consistent and simple UI. We also drastically increase the possibility for the user to utilize bookmark functions.&lt;/p&gt;
&lt;h2&gt;We Learn Everything, so We Search for You&lt;/h2&gt;
&lt;p&gt;Since we can safely assume that any pages left in the inbox is something that the user is interested in currently. (Otherwise she should have archived it.) We can actively recommend related pages for different threads. Moreover, for those 'search threads', we also have the keywords used, and since the user might try to delete unwanted results from the inbox, we have relevance feedback as well. And latency is no longer an issue, as we can do the search and the show results when the user open the browser next time. So we are able to produce extremely accurate result compared to conventional search engines. And we also have the opportunity to insert related advertisment as well.&lt;/p&gt;
&lt;p&gt;However, if we do use this kind of web browsing, our entire browsing history will be on the cloud. Is this acceptable?&lt;/p&gt;</summary><category term="browser"></category><category term="Internet"></category><category term="Google Inbox"></category></entry><entry><title>用中文資料測試 word2vec</title><link href="http://city.shaform.com/blog/2014/11/04/word2vec.html" rel="alternate"></link><updated>2014-11-04T17:20:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-11-04:blog/2014/11/04/word2vec.html</id><summary type="html">&lt;p&gt;最近因為一些學習上的需要接觸了 &lt;a href="https://code.google.com/p/word2vec/"&gt;word2vec&lt;/a&gt;，覺得好像是有點神秘的東西。一般初學自然語言處理的時候，處理文字最簡單的模型就是把每個詞當作一個單位，比如說用個 id 來表示他。然後再去算詞與詞之間的統計關係。或者是利用句子的文法結構來進行其他處理。如果把每個詞出現的次數當作一個維度的話，也可以把句子或文件用一個向量來表示。&lt;/p&gt;
&lt;p&gt;不過 word2vec 是把每個詞本身用一個多維向量來表示，把詞投影到一個向量空間裡。而且不知道為什麼投影出來的空間有些特殊的性質，比如說相同屬性的詞可能會靠得很近，甚至部份的向量有邏輯上的線性關係等等：&lt;/p&gt;
&lt;p&gt;vector('King') - vector('Man') + vector('Woman') ~= vector('Queen')&lt;/p&gt;
&lt;p&gt;這份筆記紀錄了使用 word2vec 處理中文資料的小小實驗。&lt;/p&gt;
&lt;h2&gt;語料&lt;/h2&gt;
&lt;p&gt;不太確定有什麼開放的中文語料可供使用，於是決定先用&lt;a href="https://github.com/audreyt/moedict-webkit"&gt;萌典&lt;/a&gt;來做實驗，可按照教學，下載萌典資料：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone --depth 1 https://github.com/g0v/moedict-data.git
git clone --depth 1 https://github.com/g0v/moedict-epub.git
cp -v moedict-data/dict-revised.json moedict-epub/
&lt;span class="nb"&gt;cd &lt;/span&gt;moedict-epub
perl json2unicode.pl &amp;gt; dict-revised.unicode.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著我自己寫了一個 &lt;a href="https://github.com/shaform/experiments/blob/master/word2vec_tw/extract_json.py"&gt;extract_json.py&lt;/a&gt; 把當中可供訓練的句子抽出來：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 extract_json.py &amp;lt; dict-revised.unicode.json &amp;gt; sentences.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;斷詞&lt;/h2&gt;
&lt;p&gt;因為 word2vec 的輸入必須是以空白隔開的詞，這樣得出來的句子還不能直接使用。於是我用了結巴斷詞，寫了一個 &lt;a href="https://github.com/shaform/experiments/blob/master/word2vec_tw/cut.py"&gt;cut.py&lt;/a&gt; 來處理這些句子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python cut.py &amp;lt; sentences.txt &amp;gt; sentences.segged.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;斷出來的結果大約像是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;紅樓夢 ． 第十七回 ： 「 一 槅 一 槅 ， 或 有 貯書處 ， 或 有 設鼎處 ， 或 安置 筆硯 處 ， 或供 設瓶花 、 或 安放 盆景 處 。 」
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;感覺雖不是很理想，但尚可接受。&lt;/p&gt;
&lt;h2&gt;使用 word2vec 訓練詞向量&lt;/h2&gt;
&lt;p&gt;接著我就用工作站把詞全部丟給 word2vec 訓練：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./word2vec -train sentences.segged.txt -output vectors.bin -cbow 0 -size 200 -window 10 -negative 5 -hs 0 -sample 1e-4 -threads 24 -binary 1 -iter 20 -min-count 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為萌典抽出來的資料不算多，所以訓練起來滿快的，只是當然效果就不太好了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="word2vec running..." src="http://city.shaform.com/images/train_word2vec.png" /&gt;&lt;/p&gt;
&lt;h2&gt;測試&lt;/h2&gt;
&lt;p&gt;首先測試距離相近的字：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./distance vectors.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;雖然效果差強人意，不過還是可以看到相同屬性的字確實有些群聚效應：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Enter word or sentence (EXIT to break): 法國

Word: 法國  Position in vocabulary: 992

                                            Word         Cosine distance
------------------------------------------------------------------------
                                            英國         0.763948
                                            德國         0.727664
                                          義大利         0.724732
                                            瑞士         0.724247
                                          西班牙         0.715528
                                          奧地利         0.696855
                                          蘇格蘭         0.689557
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著測試線性關係，A 比 B 就好像 C 比什麼？：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./word-analogy vectors.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;對於國家與都市的推理，也稍有效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Enter three words (EXIT to break): 法國 巴黎 英國

Word: 法國  Position in vocabulary: 992

Word: 巴黎  Position in vocabulary: 6379

Word: 英國  Position in vocabulary: 822

                                            Word         Distance
------------------------------------------------------------------------
                                            倫敦         0.583572
                                          七二年         0.576999
                                          莫斯科         0.566673
                                          四四年         0.566332
                                      一九四一年         0.562817
                                          芝加哥         0.559529
                                      一九六二年         0.556010
                                          羅浮宮         0.555593
                                          油畫院         0.554334
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;訓練出來的詞向量或許可以供進一步利用，只是在實際使用之前無法確定是否適用於特定的應用。&lt;/p&gt;
&lt;h2&gt;程式碼&lt;/h2&gt;
&lt;p&gt;我把相關的程式碼放在 GitHub 上面供參考：&lt;a href="https://github.com/shaform/experiments/tree/master/word2vec_tw"&gt;https://github.com/shaform/experiments/tree/master/word2vec_tw&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;參考資料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/word2vec/"&gt;word2vec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/hebin/p/3507609.html"&gt;利用中文数据跑Google开源项目word2vec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.fukuball.com/ru-he-shi-yong-jieba-jie-ba-zhong-wen-fen-ci-cheng-shi/"&gt;如何使用 JIEBA 結巴中文分詞程式&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="word2vec"></category><category term="Chinese"></category><category term="python"></category><category term="jieba"></category></entry><entry><title>在工作站上使用自己的 Python 並安裝自訂套件</title><link href="http://city.shaform.com/blog/2014/06/22/pyvenv-and-virtualenv.html" rel="alternate"></link><updated>2014-06-22T10:30:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-06-22:blog/2014/06/22/pyvenv-and-virtualenv.html</id><summary type="html">&lt;p&gt;使用工作站時常會遇到想要自行安裝 Python 套件，結果卻沒有管理權限的問題。雖然可以自行在 local 安裝套件，或者是乾脆自行安裝 local 版的 Python，但設置的程序稍微有點麻煩，而且遇到想要同時使用多種版本的 Python 時，設置就更複雜了。&lt;/p&gt;
&lt;p&gt;遇到這種情形的時候，建立 Python 的 virtual environment 就可以方便的使用多個不同版本與環境的 Python。&lt;/p&gt;
&lt;h2&gt;pyvenv&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.4/library/venv.html"&gt;pyvenv&lt;/a&gt; 是在 Python 3.3 後新加入官方 Python 發行版的一個 module，可以讓使用者建立自己的 virtual environment。雖然很可惜的，Debian 系的 OS 因為 &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=732703"&gt;bug 732703&lt;/a&gt; 所以暫時無法使用。不過還是介紹一下他的用法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 ENV_DIR 建立 virtual environment，&lt;code&gt;--system-site-packages&lt;/code&gt; 參數則是讓系統安裝的套件也能被這個環境使用，3.4 則可選擇不同版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pyvenv-3.4 &lt;span class="o"&gt;[&lt;/span&gt;--system-site-packages&lt;span class="o"&gt;]&lt;/span&gt; ENV_DIR
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;啟用特定的 virtual environment：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;ENV_DIR/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時你就會發現在 prompt 前多了個名字，然後直接用 pip 安裝套件就會裝到這個 local 的 environment 了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(name)$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以後要啟用某個 environment 時都要重新用 2 提到的方法啟用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;virtualenv&lt;/h2&gt;
&lt;p&gt;如果工作站上有安裝 &lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt; 的話，也可以用這個套件達到相同功能，好處是 Python 2 也可以用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 ENV_DIR 建立 virtual environment，&lt;code&gt;--system-site-packages&lt;/code&gt; 參數則是讓系統安裝的套件也能被這個環境使用，python3.4 則可選擇不同版本（包含 python2）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv &lt;span class="o"&gt;[&lt;/span&gt;--system-site-packages&lt;span class="o"&gt;]&lt;/span&gt; -p python3.4 ENV_DIR
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;啟用特定的 virtual environment：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;ENV_DIR/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時你就會發現在 prompt 前多了個名字，然後直接用 pip 安裝套件就會裝到這個 local 的 environment 了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(name)$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;which&lt;/code&gt; 可以看到 python 路徑：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;which python
ENV_DIR/bin/python

which pip
ENV_DIR/bin/pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意到如果當初指定用 python3.4 的話，這裡雖然下的是 python，其實也是 3.4 版。以後要啟用某個 environment 時都要重新用 2 提到的方法啟用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果有裝 &lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; 的話其實還有更方便的方法，可以自行參考文件。&lt;/p&gt;
&lt;h2&gt;Local Packages&lt;/h2&gt;
&lt;p&gt;如果實在是無法建立 virtual environment 的話，只能使用舊方法來安裝 local 套件了，首先在 &lt;code&gt;.bashrc&lt;/code&gt; 加入對應的參數，使得執行 Python 時會載入 local 套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PYTHONPATH=$PYTHONPATH:$HOME/.local/lib/python3.4/site-packages python3&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PYTHONPATH=$PYTHONPATH:$HOME/.local/lib/python2.7/site-packages python&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中各版本的路徑可自行調整。&lt;/p&gt;
&lt;p&gt;接下來安裝套件時都加上 --user 參數即可，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip3 install --user flask
python3.4 setup.py install --user

pip2 install --user flask
python2 setup.py install --user
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="Python"></category><category term="pyvenv"></category><category term="virtualenv"></category></entry><entry><title>解決 Ubuntu 加密 Home 目錄後無法遠端用 public key 登入的問題</title><link href="http://city.shaform.com/blog/2014/06/21/fix-public-key-login-for-encrypted-home.html" rel="alternate"></link><updated>2014-06-21T09:00:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-06-21:blog/2014/06/21/fix-public-key-login-for-encrypted-home.html</id><summary type="html">&lt;p&gt;通常啟用 SSH 登入會遇到一個大問題：經常會有奇怪的人想要暴力破解密碼，取得登入權限。最早我都是限制只能從校內 IP 來源登入來減輕這個問題，然而最近的電腦是在 NAT 背後，透過一個 port 連結 SSH，所以似乎看不到真正的來源 IP，因此無法輕易過濾。&lt;/p&gt;
&lt;p&gt;我最後決定停用密碼登入的功能，改成只能用 public key 登入，這樣子可能比較難以猜中正確的密鑰。不過實際用起來偶爾會發現登入失敗搞不清楚理由，後來才發現是因為我的 Ubuntu 啟用了家目錄加密的功能，因此尚未登入之前根本讀不到 &lt;code&gt;authorized_keys&lt;/code&gt; 設定檔。為了解決這個問題，必須移動設定檔的位置才行。&lt;/p&gt;
&lt;h2&gt;Generate SSH Keys&lt;/h2&gt;
&lt;p&gt;首先如果沒有自己的 SSH keys 的話可以參考&lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;〈Generating SSH Keys〉&lt;/a&gt;建立自己的 SSH keys。大致上是使用如下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh-keygen -t rsa -C &lt;span class="s2"&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設會把產生的 private key 存在 &lt;code&gt;/home/$USER/.ssh/id_rsa&lt;/code&gt;，public key 存在 &lt;code&gt;/home/$USER/.ssh/id_rsa.pub&lt;/code&gt;，不過也可以改位置。passphrase 則是用來加密 private key，建議要使用，這樣子每次要解開 private key 時都需要使用密碼，所以就算一不小心 private key 被別人取得，對方也要花上一段時間才能解開。&lt;/p&gt;
&lt;h2&gt;更改 sshd_config 設定&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudoedit /etc/ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先取消密碼登入，將&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#PasswordAuthentication yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PasswordAuthentication&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來更動 &lt;code&gt;authorized_keys&lt;/code&gt; 的位置，將&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#AuthorizedKeysFile     %h/.ssh/authorized_keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AuthorizedKeysFile&lt;/span&gt;     &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;/%&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;authorized_keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;建立 authorized_keys 檔案&lt;/h2&gt;
&lt;p&gt;然後根據你的 &lt;code&gt;$USER&lt;/code&gt; 名字建立資料夾，並修改權限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkdir -p /etc/ssh/keys/&lt;span class="nv"&gt;$USER&lt;/span&gt;
sudo chmod 755 /etc/ssh/keys
sudo chmod 700 /etc/ssh/&lt;span class="nv"&gt;$USER&lt;/span&gt;
sudo chown &lt;span class="nv"&gt;$USER&lt;/span&gt;:&lt;span class="nv"&gt;$USER&lt;/span&gt; /etc/ssh/&lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後再將 &lt;code&gt;id_rsa.pub&lt;/code&gt; 拷貝到 server 上，並複製到 authorized_keys：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# copy id_rsa.pub to server, then -&amp;gt;&lt;/span&gt;
cat id_rsa.pub &amp;gt;&amp;gt; /etc/ssh/keys/&lt;span class="nv"&gt;$USER&lt;/span&gt;/authorized_keys
chmod 400 /etc/ssh/ssh/keys/&lt;span class="nv"&gt;$USER&lt;/span&gt;/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;重新讀取設定&lt;/h2&gt;
&lt;p&gt;重新讀取設定檔並測試一下登入就大功告成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo service ssh reload
&lt;/pre&gt;&lt;/div&gt;</summary><category term="public key"></category><category term="linux"></category><category term="Ubuntu"></category><category term="SSH"></category></entry><entry><title>在 UEFI 模式下同時安裝 Windows 8.1 和 Ubuntu 14.04</title><link href="http://city.shaform.com/blog/2014/06/19/install-w8-ubuntu-with-uefi.html" rel="alternate"></link><updated>2014-06-19T16:05:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-06-19:blog/2014/06/19/install-w8-ubuntu-with-uefi.html</id><summary type="html">&lt;p&gt;總是喜歡在自己的電腦上裝 Linux。小時候安裝還很麻煩，要燒光碟。後來研究了從硬碟安裝的方法，可又需要額外的磁區。一直到 USB 隨身碟普及了以後，重灌才成為一件比較方便的事。尤其 &lt;a href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt; 的安裝界面做的還不錯，後來就一直用到今天。&lt;/p&gt;
&lt;p&gt;雖然習慣使用 Linux，可是有時候還是會遇到要在 Windows 上才能寫的作業，所以每次都把電腦灌成雙系統，也慢慢熟悉了這個過程，一直以來不太有改變。不過最近拿到一台有 &lt;a href="http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"&gt;UEFI&lt;/a&gt; 開機的 Lenovo ThinkPad X1 Carbon 筆電，又想在啟用 Secure Boot 的情況下同時裝雙系統，設置上就比較麻煩了。本文就是記載這個過程。&lt;/p&gt;
&lt;h2&gt;安裝 Windows 8&lt;/h2&gt;
&lt;p&gt;原本如果是在正常的電腦上安裝 Windows 8，可以透過 &lt;a href="http://www.microsoftstore.com/store/msusa/html/pbPage.Help_Win7_usbdvd_dwnTool"&gt;Windows USB/DVD download tool&lt;/a&gt; 來製作安裝用隨身碟，但在 UEFI 啟用的情況下就不行了。這時參考&lt;a href="http://social.msdn.microsoft.com/Forums/en-US/e7ed293e-b565-44ee-a536-166dddf32205/how-to-create-windows-8-installation-bootable-usb-for-uefi-samsung-slate"&gt;〈How to create Windows 8 installation bootable USB for UEFI〉&lt;/a&gt;，首先在 Windows 環境下使用管理員權限執行 cmd.exe，用 diskpart.exe 找出隨身碟的代號：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diskpart.exe
list disk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再把隨身碟格式化成 FAT32，並設成可開機。注意，&lt;code&gt;disk 1&lt;/code&gt; 的這個 &lt;code&gt;1&lt;/code&gt; 要選擇隨身碟代號，否則可能會把其他硬碟的內容給刪除。&lt;code&gt;partition 1&lt;/code&gt; 則指的是隨身碟上的第一個 partition：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;select disk &lt;span class="m"&gt;1&lt;/span&gt;
clean
create partition primary
select partition &lt;span class="m"&gt;1&lt;/span&gt;
active
format quick fs&lt;span class="o"&gt;=&lt;/span&gt;fat&lt;span class="m"&gt;32&lt;/span&gt;
assign
exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;理論上用其他工具格式化隨身碟可能也可以，不過沒有嘗試過。&lt;/p&gt;
&lt;p&gt;接下來，先 mount Windows 8 的安裝光碟，然後把內容全部拷貝到隨身碟上，比如說如果安裝光碟 mount 在 &lt;code&gt;H:&lt;/code&gt;，而隨身碟在 &lt;code&gt;F:&lt;/code&gt; 的話：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;xcopy H:\* F:\ &lt;span class="n"&gt;/s&lt;/span&gt; &lt;span class="n"&gt;/e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後先用 BIOS 停用 UEFI Secure Boot，才能用隨身碟開機。首先開始安裝 Windows 8。參考 &lt;a href="http://www.techrepublic.com/blog/windows-and-office/the-complete-guide-to-a-windows-8-clean-installation/"&gt;〈The complete guide to a Windows 8 clean installation〉&lt;/a&gt; 進行安裝，但自行設定硬碟磁區大小，空出給 Ubuntu 的空間。此時安裝程式也會自動幫你建立 Recovery, System (Reserved), MSR (EFI 磁區) 等三個磁區，看起來很醜，不過可能有用，就保留吧。&lt;/p&gt;
&lt;p&gt;裝完後不知為什麼時間設定有錯，而且也無法更新，於是參考&lt;a href="http://www.trishtech.com/2013/03/change-time-servers-in-windows-8/"&gt;〈Change Time Servers in Windows 8〉&lt;/a&gt;，將 time server 改成台大的 &lt;code&gt;ntp2.ntu.edu.tw&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最後重開機，在 BIOS 中啟用 UEFI Secure Boot 就大功告成了。&lt;/p&gt;
&lt;h2&gt;安裝 Windows 8.1&lt;/h2&gt;
&lt;p&gt;假設直接用 Windows 8.1 安裝光碟，到這裡就結束了。可是因為學校只有升級版的 Windows 8.1，所以緊接著馬上從 Windows 8 升級到 Windows 8.1。&lt;/p&gt;
&lt;p&gt;首先用 Windows Update 更新系統，然後 mount Windows 8.1 光碟，並執行他。開始一步步安裝，安裝的選項跟 Windows 8 差不多，我選擇不要保留任何設定，把 Windows 8 的紀錄都洗掉。安裝完硬碟又會多一個 Recovery 磁區，雖然很醜，可是可能有用所以保留他。&lt;/p&gt;
&lt;p&gt;安裝完後再重新設定一次 time server 就大功告成了！&lt;/p&gt;
&lt;h2&gt;安裝 Ubuntu 14.04 64-bit&lt;/h2&gt;
&lt;p&gt;只有 64-bit 版本對 UEFI 有較好的支援，所以首先參考&lt;a href="http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-ubuntu"&gt;〈How to create a bootable USB stick on Ubuntu〉&lt;/a&gt;製作一個 Ubuntu 14.04 安裝隨身碟，然後參考&lt;a href="https://help.ubuntu.com/community/UEFI"&gt;〈Ubuntu Community Wiki: UEFI〉&lt;/a&gt;來安裝，基本上安裝過程跟一般情形一樣，只是我選擇自訂磁碟分割，所以要自己找出 EFI 磁區，然後指定 mount 到 &lt;code&gt;/boot/efi&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最後裝完會遇到一個 bug：&lt;a href="https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/1091464"&gt;〈Unable to chainload Windows 8 with Secure Boot enabled
〉&lt;/a&gt;，使得無法直接用 grub2 來啟動 Windows 8.1，不過 ThinkPad X1 Carbon 可以透過 BIOS 來多重開機，因此還是可以使用，對於很少使用 Windows 8.1 的我來說並不造成困擾。&lt;/p&gt;</summary><category term="UEFI"></category><category term="Windows 8"></category><category term="Windows 8.1"></category><category term="Ubuntu 14.04"></category></entry><entry><title>簡單的 BBS 掛站設定</title><link href="http://city.shaform.com/blog/2014/05/27/stay-on-bbs.html" rel="alternate"></link><updated>2014-05-27T13:21:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-05-27:blog/2014/05/27/stay-on-bbs.html</id><summary type="html">&lt;p&gt;很久以前看到了 othree 的&lt;a href="https://blog.othree.net/log/2005/12/16/stay-on-bbs-setting/"&gt;〈掛站系統設定篇〉&lt;/a&gt;，學會了如何在工作站上掛著 BBS。在那以後就很少使用桌面軟體來連 BBS。使用工作站掛站的優點主要是不用一直重新登入很方便，另外在一些公共區域上網時，避免直接使用明文帳密連結 telnet 而透過 ssh 感覺比較安心一點。（不過其實我建議 BBS 還是使用不同的密碼比較好呀。）&lt;/p&gt;
&lt;p&gt;後來我發現其實掛一些我平常在逛的站如 PTT or BS2 其實很少會遇到逾時被登出的狀況，所以就省去了使用 expect 來不斷送出空白訊號的麻煩。就用這篇文章來紀錄這個簡化的掛站方法。&lt;/p&gt;
&lt;p&gt;首先在 &lt;code&gt;$HOME&lt;/code&gt; 目錄建一個叫做 &lt;code&gt;screenrc-bbs&lt;/code&gt; 的資料夾，接下來在資料夾裡根據想逛的 bbs 建立 screenrc 檔案。&lt;/p&gt;
&lt;p&gt;比如說 screenrc-bbs/ptt：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vbell off 
screen -t &lt;span class="s1"&gt;&amp;#39;ptt&amp;#39;&lt;/span&gt; ssh bbsu@ptt.cc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;screenrc-bbs/ptt2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vbell off 
screen -t &lt;span class="s1"&gt;&amp;#39;ptt2&amp;#39;&lt;/span&gt; ssh bbsu@ptt2.cc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;screenrc-bbs/ptt3：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vbell off
defencoding big5
screen -t &lt;span class="s1"&gt;&amp;#39;ptt3&amp;#39;&lt;/span&gt; telnet ptt3.cc
defencoding big5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;screenrc-bbs/bs2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vbell off 
defencoding big5 
screen -t &lt;span class="s1"&gt;&amp;#39;bs2&amp;#39;&lt;/span&gt; telnet -8 bs2.to 
defencoding big5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後在 &lt;code&gt;.bashrc&lt;/code&gt; 加入 alias 就大功完成啦：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;bs2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;if ! screen -rD BS2 &amp;gt;&amp;amp; /dev/null ; then LANG=&amp;#39;zh_TW.UTF-8&amp;#39; screen -S BS2 -c $HOME/screenrc-bbs/bs2 ; fi&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ptt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;if ! screen -rD PTT1 &amp;gt;&amp;amp; /dev/null ; then LANG=&amp;#39;zh_TW.UTF-8&amp;#39; screen -S PTT1 -c $HOME/screenrc-bbs/ptt ; fi&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ptt2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;if ! screen -rD PTT2 &amp;gt;&amp;amp; /dev/null ; then LANG=&amp;#39;zh_TW.UTF-8&amp;#39; screen -S PTT2 -c $HOME/screenrc-bbs/ptt2 ; fi&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ptt3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;if ! screen -rD PTT3 &amp;gt;&amp;amp; /dev/null ; then LANG=&amp;#39;zh_TW.UTF-8&amp;#39; screen -S PTT3 -c $HOME/screenrc-bbs/ptt3 ; fi&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如此一來，下次登入時只要直接打 &lt;code&gt;ptt&lt;/code&gt; 就可以開始逛版了，要離開則按 &lt;code&gt;Ctrl-A Ctrl-D&lt;/code&gt;，只要沒有被斷線的話隨時登入工作站都可以下 &lt;code&gt;ptt&lt;/code&gt; 指令重回之前的進度。&lt;/p&gt;</summary><category term="PTT"></category><category term="BBS"></category><category term="linux"></category></entry><entry><title>從 Pixnet 轉移到 Pelican</title><link href="http://city.shaform.com/blog/2014/05/17/migrate-from-pixnet-to-pelican.html" rel="alternate"></link><updated>2014-05-17T07:25:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-05-17:blog/2014/05/17/migrate-from-pixnet-to-pelican.html</id><summary type="html">&lt;p&gt;「翼之都」這個技術部落格其實早在 2006 年就成立了，一直放在 Blogger 上，但很少新增文章。最近好不容易開始打算多寫一些技術文，卻突然發現在 Blogger 上實在是有點麻煩：它對於一些程式碼的的支援有點不直覺，而文章的寫作方式也有許多不符我的需求。最後索性就把這個網誌改用 Pelican 建立了。而因為文章只有一點點，所以是用手動搬的。&lt;/p&gt;
&lt;p&gt;搬完以後覺得這種靜態網頁在管理和備份文章上實在是很方便。想到「浮光」這個文章集散處，其實完全是由很少 HTML 的靜態文章所組成，實在是很適合放到 Pelican 上，再者 Pixnet 的後台界面自己一直不是很喜歡，所以就乾脆一起搬了。&lt;/p&gt;
&lt;p&gt;以下記載完成這件事的流程，使用的環境是 Ubuntu 14.04 64-bit。&lt;/p&gt;
&lt;h2&gt;安裝 Pelican&lt;/h2&gt;
&lt;p&gt;詳細安裝方法可見 &lt;a href="http://docs.getpelican.com/en/3.3.0/getting_started.html"&gt;Getting started&lt;/a&gt; 文件，我自己選的方法是用 &lt;a href="http://virtualenvwrapper.readthedocs.org"&gt;virtualenvwrapper&lt;/a&gt;，並從 source code 直接安裝最新版的 Pelican（其實這是因為我想要讓文章的發布時間可以支援用不同時區的表示格式，舊版的 Pelican 似乎尚未支援）。&lt;/p&gt;
&lt;h3&gt;1. 安裝 virtualenvwrapper&lt;/h3&gt;
&lt;p&gt;首先輸入以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-pip virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後新增 pelican 環境&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkvirtualenv pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣以後如果要進入 pelican 環境的話只要下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;workon pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;而安裝的套件也不會跟系統混在一起。&lt;/p&gt;
&lt;h3&gt;2. 安裝 pelican&lt;/h3&gt;
&lt;p&gt;在 pelican 環境下隨意找個位置，下載 pelican 原始碼，並安裝相關套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/getpelican/pelican.git
&lt;span class="nb"&gt;cd &lt;/span&gt;pelican
python setup.py install
pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後選個資料夾放置網誌檔案，並下以下指令，就可以建立簡單的設定擋了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;匯出&lt;/h2&gt;
&lt;p&gt;Pixnet 的匯出格式是 Movable Type，恰巧 pelican-import 尚未支援。同時，浮光上的文章常有大量空行，我希望對轉換的格式有更多控制，所以乾脆自己寫了一個 Python script 來進行轉換：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c"&gt;# python convert.py &amp;lt; blog-export.txt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fileinput&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pelican.utils&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;p_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;new_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;new_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="n"&gt;new_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;amp;nbsp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="n"&gt;new_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;rData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;(\d{2})/(\d{2})/(\d{4}) (\d{2}):(\d{2}):(\d{2}) (PM|AM)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;TITLE: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;DATE: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;wrong with {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;gs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;PM&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
                &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;{}-{}-{} {}:{}:{}+0800&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;PRIMARY CATEGORY: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;STATUS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;雪山&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;海岸&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;城市&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;？？&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;天予&amp;#39;&lt;/span&gt;
                &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;天予：&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;系列&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;奇幻&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;我的世界&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;記憶&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
                &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;系列&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;BODY:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-----&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;nbsp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                        &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;lt;p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;lt;!-- more --&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;--------&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Title: {}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Date: {}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Category: {}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Tags: {}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Authors: Shaform&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這個 script 會將結果輸出到 content/{category}/{title}.md 檔案，自動轉換適當的空行、分類、日期格式等等。分類的處理是依據浮光的架構，所以只有浮光能用。&lt;/p&gt;
&lt;h2&gt;發布到 Google App Engine&lt;/h2&gt;
&lt;p&gt;在這過程中，我短暫的嘗試用 &lt;a href="https://console.developers.google.com/start/appengine"&gt;Google App Engine&lt;/a&gt; 作為發布平台，不過因為太麻煩，所以最後還是採用 GitHub Pages。&lt;/p&gt;
&lt;p&gt;實際的作法是先申請個帳號，然後安裝 SDK：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;curl sdk.cloud.google.com | bash
&lt;span class="c"&gt;# restart the Terminal, then&lt;/span&gt;
gcloud auth login
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著在網誌目錄中新增 app.yaml 檔案，設定讓伺服器顯示靜態網頁：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;application&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;APP-NAME&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;version&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;runtime&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python27&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;api_version&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;threadsafe&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;yes&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;module&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;default&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;handlers&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;static_files&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;output/index.html&lt;/span&gt;
      &lt;span class="l-Scalar-Plain"&gt;upload&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;output/index.html&lt;/span&gt;

      &lt;span class="l-Scalar-Plain"&gt;- url&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/&lt;/span&gt;
          &lt;span class="l-Scalar-Plain"&gt;static_dir&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後修改 &lt;code&gt;Makefile&lt;/code&gt; 新增如下指令，自動將檔案複製到指定位置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;gcloud&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;publish&lt;/span&gt;
    mkdir -p gcloud/output
    cp -r &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/* gcloud/output
    mv gcloud &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
    cp app.yaml &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/gcloud
    appcfg.py update &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/gcloud
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣的話只要在網誌的目錄下執行以下指令，就可以把網頁發布到 Google App Engine 上了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make gcloud
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;發布到 GitHub Pages&lt;/h2&gt;
&lt;p&gt;雖然 Pelican 原本就有支援 GitHub Pages 的發布，不過我比較希望在 local 端的 master branch 紀錄網誌的原始 Markdown 檔案，在 gh-pages branch 上紀錄產生的網頁，因此我在 &lt;code&gt;Makefile&lt;/code&gt; 做了以下修改：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;GITHUB_PAGES_BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gh-pages
github: publish
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DOMAIN-NAME&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/CNAME
        ghp-import -r gh-pages -b &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -m &lt;span class="s2"&gt;&amp;quot;$(MSG)&amp;quot;&lt;/span&gt;
        git push gh-pages &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 DOMAIN-NAME 那行是自訂 domain 用的，若沒有可以刪除。而 &lt;code&gt;-m $(MSG)&lt;/code&gt; 則是為了讓我可以用 &lt;code&gt;MSG="new update" make github&lt;/code&gt; 來自訂 commit 訊息。最後一行的 &lt;code&gt;master&lt;/code&gt;，如果是用 username.github.io 的話就保留 &lt;code&gt;master&lt;/code&gt;，如果是一般 projects 的話就改成 &lt;code&gt;gh-pages&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;緊接著安裝 &lt;code&gt;ghp-import&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後按照 &lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; 的說明，建立一個 repository，並把整個網誌的目錄當成這個 repository。（我其實是先 &lt;code&gt;git clone&lt;/code&gt; 然後把 .git 資料夾直接搬到網誌目錄中。）&lt;/p&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;最後再調整一些佈景和版面的設定，就成了最後的結果：&lt;a href="http://light.shaform.com"&gt;浮光&lt;/a&gt;。初步感覺還滿令我滿意的。以後再慢慢調整浮光以及翼之都的版面吧。&lt;/p&gt;</summary><category term="Pixnet"></category><category term="Pelican"></category><category term="Python"></category></entry><entry><title>在 Ubuntu 12.04 安裝 HDFS 及 HBase 筆記</title><link href="http://city.shaform.com/blog/2014/04/13/hbase-on-ubuntu-12.04.html" rel="alternate"></link><updated>2014-04-13T15:56:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2014-04-13:blog/2014/04/13/hbase-on-ubuntu-12.04.html</id><summary type="html">&lt;p&gt;這篇是假設 master, slave-1, slave-2 的 domain name/ip 分別為： master-dn, slave-1-dn, slave-2-dn。&lt;/p&gt;
&lt;h2&gt;一、HDFS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝 JDK 7&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get upgrade &lt;span class="c"&gt;# 更新套件庫&lt;/span&gt;
sudo apt-get install software-properties-common python-software-properties  &lt;span class="c"&gt;# 取得 add-apt-repository&lt;/span&gt;
sudo add-apt-repository ppa:webupd8team/java  &lt;span class="c"&gt;# 新增有 oracle-java7-installer 的 ppa&lt;/span&gt;
sudo apt-get update
sudo apt-get install oracle-java7-installer
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設定 SSH&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh-keygen -b &lt;span class="m"&gt;2048&lt;/span&gt; -t rsa:q  &lt;span class="c"&gt;# 產生 RSA key pair&lt;/span&gt;
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys  &lt;span class="c"&gt;# 讓自己可以不用密碼登入自己&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 NameNode 上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh-copy-id -i &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/id_rsa.pub user@slave-1-dn  &lt;span class="c"&gt;# 讓 NameNode 可不用密碼登入 DataNode&lt;/span&gt;
ssh-copy-id -i &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.ssh/id_rsa.pub user@slave-2-dn  &lt;span class="c"&gt;# 讓 NameNode 可不用密碼登入 DataNode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝 Hadoop&lt;/p&gt;
&lt;p&gt;先在 $HOME/.bashrc 加上 &lt;code&gt;export PATH=$PATH:$HOME/hadoop-1.2.1/bin&lt;/code&gt;，然後進入家目錄：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://ftp.tc.edu.tw/pub/Apache/hadoop/common/hadoop-1.2.1/hadoop-1.2.1-bin.tar.gz
tar -xvf hadoop-1.2.1-bin.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;hadoop-1.2.1/conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 hadoop-env.sh 加上 &lt;code&gt;export JAVA_HOME=/usr/lib/jvm/java-7-oracle&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;進階設定&lt;/p&gt;
&lt;p&gt;在下列檔案中的&lt;configuration&gt;內新增如下內容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;core-site.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;fs.default.name&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;hdfs://master-dn:54310&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mapred-site.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;mapred.job.tracker&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;master-dn:54311&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hdfs-site.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;dfs.replication&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然後在 NameNode 上修改將以下檔案修改成如下內容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;masters&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;master-dn
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slaves&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;master-dn
slave-1-dn
slave-2-dn
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開啟伺服器
    最後在 NameNode 上執行以下指令將 cluster 啟動（可能需要重新登入讓 PATH 設定生效）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hadoop namenode -format  &lt;span class="c"&gt;# 格式化檔案系統&lt;/span&gt;
start-all.sh  &lt;span class="c"&gt;# 啟動所有服務（包含 HDFS）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;二、HBase&lt;/h2&gt;
&lt;p&gt;首先進入每台的家目錄，下載並解壓縮 HBase：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget http://ftp.twaren.net/Unix/Web/apache/hbase/stable/hbase-0.94.14.tar.gz
tar -xvf hbase-0.94.14.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;編輯 hbase-0.94.14/conf/hbase-env.sh，新增數行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/jvm/java-7-oracle
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HADOOP_CONF_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/hadoop-1.2.1/conf
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HBASE_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/hbase-0.94.14
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HBASE_LOG_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/logs/hbase-logs
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HBASE_PID_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/logs/hbase-pids
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HBASE_CLASSPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HBASE_CLASSPATH&lt;/span&gt;:&lt;span class="nv"&gt;$HOME&lt;/span&gt;/hadoop-1.2.1/conf
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HBASE_MANAGES_ZK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;編輯 hbase-0.94.14/conf/hbase-site.xml，在&lt;configuration&gt;內新增如下內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.rootdir&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;hdfs://master-dn:54310/hbase&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.tmp.dir&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;/home/hbase-${user.name}&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.cluster.distributed&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;       
&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.zookeeper.quorum&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;master-dn,slave-1-dn,slave-2-dn&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;hbase.zookeeper.property.dataDir&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;value&amp;gt;&lt;/span&gt;/home/hbase-data&lt;span class="nt"&gt;&amp;lt;/value&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後編輯 hbase-0.94.14/conf/regionservers 將內容改為如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;master-dn
slave-1-dn
slave-2-dn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後就可以在 master 執行 HBase 了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./hbase-0.94.14/bin/start-hbase.sh
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Hadoop"></category><category term="HBase"></category><category term="HDFS"></category><category term="Ubuntu"></category></entry><entry><title>Single-minded : an Internet reader, made for readers, made by readers</title><link href="http://city.shaform.com/blog/2013/10/20/single-minded.html" rel="alternate"></link><updated>2013-10-20T20:25:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2013-10-20:blog/2013/10/20/single-minded.html</id><summary type="html">&lt;h2&gt;Realization&lt;/h2&gt;
&lt;p&gt;I've known it for a long time that it’s difficult for me to read long articles on the web. I thought it’s because of the screen. It made my eyes get tired so easily. However, when I started to read The Shallows written by Nicholas Carr, I realized that it’s not only the screen. The Internet itself is distracting.&lt;/p&gt;
&lt;p&gt;I started to remember that, I often clicked between different tabs aimlessly. I repeatedly opened and reopened the Facebook page or my email inbox, wasting my time getting nothing. Indeed, I realized that I was so impatient that whenever the browser was loading a new page, I would switch to another tab, because I did not want to wait for it.&lt;/p&gt;
&lt;p&gt;Once I noticed this, I started to think about possible solutions to overcome this problem -- a new way of browsing. If I could get rid of the waiting time, maybe tabs would no longer be needed? If I could get rid of the tabs, maybe the Internet would be less distracting.&lt;/p&gt;
&lt;h2&gt;Single-tasking&lt;/h2&gt;
&lt;p&gt;To focus on one time at a time when browsing, the first thing I would need to change is the bookmarks. Bookmarks are distracting. Whenever I open the browser, I need to choose between different websites, and this decision is difficult to make. Indeed, because those tiny icons always compete for my attention, I get distracted easily and forget my tasks. Instead of choosing between different websites, I should simply choose between Tasks:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tasks" src="https://lh5.googleusercontent.com/F7oAKl0sAyFqQPubG8gUytcYkQgLJM0LlejSH9SmTIxXB95BZ2_KvyaxXFVFdGErcv9VABjNiV8tRBo0t3vsqKiF7zA-0jxirAgBbBV5kWqmxe8-2N7kvcI0" /&gt;&lt;/p&gt;
&lt;p&gt;Each Task is composed of multiple Steps, and each Step has its own history of pages. When I click on one Task, the browser would only display one page: the last viewed page of the first Step.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Step" src="https://lh3.googleusercontent.com/lyQGxP6oxBwAYs-lTUE8ND5oXe0Uo-ryYkLkODjKC9D-HVsGGhP5lFcX_HLbVO4VpSwrwPwCCvpmb9ztOJEQUMLt3NyXrHulMi8r8vleF_0mMIRB0tTSIGJs" /&gt;&lt;/p&gt;
&lt;p&gt;It shouldn't be allowed to open two Tasks at the same time. I must complete one Task before I can go to the home page again. This makes me focus on one thing at a time.&lt;/p&gt;
&lt;h2&gt;Never Going Back&lt;/h2&gt;
&lt;p&gt;When I am in a Step, I can go back and forth through history within the Step as usual. But once I proceed to the next Step, there is no going back. This design forces me to focus on one Step at a time and encourages me to complete one Step before I go on to the next. But of course, sometimes I may want to read some other references before I can complete a Step. In this case, I can push the current Step to the end of the current Task, so I can come back to it later. By pushing everything to the end, I can actually keep every Step open, but even in this case, a linear flow is still maintained.&lt;/p&gt;
&lt;h2&gt;New Steps&lt;/h2&gt;
&lt;p&gt;Since I have no tabs, I cannot open a new page in a different tab. Instead, I open it in the current Step or in a new Step. For example, when I am reading an article, I can look up unfamiliar words in new Steps, so I can finish the current article and then look at those definitions later.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New Steps" src="https://lh4.googleusercontent.com/0oWiT3Xjw5XPluesbq_B07Mlvr2nNMy_27YxkiOIsE_gZauVwklXssKV3SE7rhWjoHd58SSae56WqiK9AeG4fHcrrWQQn-LoX-o5P8Cbnb_OFWAcbtEzeIJD" /&gt;&lt;/p&gt;
&lt;h2&gt;Manage the Tasks&lt;/h2&gt;
&lt;p&gt;Whenever I complete one Task, I go back to the home screen. At that time, I have the opportunity to merge my history into the original Task or create a new one. In addition, I should have an intuitive interface to easily manage the Tasks:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Manage the Tasks" src="https://lh5.googleusercontent.com/fZevhXmTij2mqmE_lFwg-qkLMlRfqoHsolYj2ngSaanJFsj1KBzGnLgnargdKH-krqe_b5w5PzxfACJL3ePK3uPzR4CqF7mzXwWgOZ_qBbfKSRgxy2wvQRM7" /&gt;&lt;/p&gt;
&lt;h2&gt;A New Way to Utilize History&lt;/h2&gt;
&lt;p&gt;History is a seldom used feature. Actually, sorting web pages by visited time simply does not make sense. Sometimes I want to find some pages that I visited before, but it’s often extremely difficult to locate the exact position in history. However, with Single-minded, the history is naturally grouped for each task. It’s easy to guess where the page might be. Also, because I can preserve all history into Tasks if I want, history becomes an useful feature that I can utilize to better manage my Tasks.&lt;/p&gt;
&lt;h2&gt;Never Waiting for Loading&lt;/h2&gt;
&lt;p&gt;The linear browsing makes it easy for the browser to guess which page I will read next. So it should be easy for the browser to preload the pages and completely eliminate the waiting time for me.&lt;/p&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;
&lt;p&gt;I choose to publish this article because I realize that I may not have too much time to polish this idea and implement it. As you can see, this article is still very primitive. But I hope someone may be able to find something valuable in this idea, and help us escape from the distracting dilemma.&lt;/p&gt;</summary><category term="browser"></category><category term="Internet"></category></entry><entry><title>qwerty 轉換到 dvorak 筆記</title><link href="http://city.shaform.com/blog/2013/07/12/qwerty-to-dvorak.html" rel="alternate"></link><updated>2013-07-12T18:53:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2013-07-12:blog/2013/07/12/qwerty-to-dvorak.html</id><summary type="html">&lt;h2&gt;Windows&lt;/h2&gt;
&lt;p&gt;Windows 是透過新增輸入法的方式增加 dvoark 鍵盤，如果是新的版本，登入畫面也可以選擇不同的鍵盤使用，如果一開始安裝就選擇 dvorak 的話，就會成為預設值。如果是 XP 或者想要把像是注音輸入法的符號對應也改成 dvorak 的話，可以參考我以前寫的文章：&lt;a href="http://shaform.wordpress.com/2007/07/14/dvorak/"&gt;〈Dvorak: 另一種鍵盤排列〉&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;Linux&lt;/h2&gt;
&lt;p&gt;最近的 Linux distributions 只要在安裝時就選擇 dvorak 鍵盤的話，大致上就會設定完成，通常 GUI 頁面也會有鍵盤設定。Linux 上輸入法和鍵盤設定通常是分開的兩個東西。如果你使用像是&lt;a href="https://code.google.com/p/freearray"&gt;自由行列輸入法&lt;/a&gt;等等原本就有支援 dvorak 的輸入法，則符號對應只要設定一下就可以了。&lt;/p&gt;
&lt;p&gt;如果因為某些原因無法更動設定檔，使用以下指令可以在鍵盤間切換：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setxkbmap dvorak &lt;span class="c"&gt;# 更動成 dvorak&lt;/span&gt;
setxkbmap us &lt;span class="c"&gt;# 還原成 us 標準鍵盤&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Xrdp&lt;/h2&gt;
&lt;p&gt;如果使用 rdp 的方式遠端連上 linux 的話，他的鍵盤對應是由自己的設定檔所控制，檔案位置在 /etc/xrdp/km-****.ini，其中 **** 為不同語言設定的檔案，其編號可參考 &lt;a href="http://xrdp.sourceforge.net/documents/keymap/rfc1766.html"&gt;rfc1766&lt;/a&gt;。通常我們需要修改的是 km-0409.ini (en-US) 這個檔案。&lt;/p&gt;
&lt;p&gt;在正常登入的情況下，使用以下指令可以在當前目錄產生目前鍵盤對應的 xrdp 設定檔：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;xrdp-genkeymap km-now.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著我們把它搬移取代 xrdp 參照的檔案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mv km-now.ini /etc/xrdp/km-0409.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或許我們會想在覆蓋之前先備份原本的設定檔：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mv /etc/xrdp/km-0409.ini /etc/xrdp/km-0409.ini.old
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後重新啟動 xrdp 伺服器就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo /etc/init.d/xrdp restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但如果因為某些原因只能用 rdp 連上主機，而無法接觸正常的桌面的話，則根本無法得到 dvorak 的鍵盤對應，因此也無法產生設定檔，在這種情況下，只好直接修改原本的 km-0409.ini。而也有人說用 xrdp-genkeymap 產生的檔案有時會有問題，這時也只能直接修改了。我寫了一個程式用來做這個轉換：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# xrdpkeymap_qwerty_to_dvorak.py&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Usage: python xrdpkeymap_qwerty_to_dvorak.py km-input.ini &amp;gt; km-output.ini&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fileinput&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="c"&gt;# keycodes&lt;/span&gt;
&lt;span class="c"&gt;# $ xmodmap -pk for current mapping&lt;/span&gt;
&lt;span class="c"&gt;# ref: http://forums.fedoraforum.org/showthread.php?t=265100&lt;/span&gt;
&lt;span class="n"&gt;QWERTY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;DVORAK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;TRANS_DICT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWERTY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DVORAK&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;re_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\[.*\]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;re_keydef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Key(\d+)=(.*)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;buf_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output_keydefs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_dict&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;TRANS_DICT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Key&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TRANS_DICT&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Key&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;buf_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileinput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re_title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output_keydefs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;re_keydef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re_keydef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="n"&gt;buf_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="c"&gt;# output remaining keys&lt;/span&gt;
&lt;span class="n"&gt;output_keydefs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Vim&lt;/h2&gt;
&lt;p&gt;有的時候我們甚至無法重新啟動 xrdp server，或者根本沒有管理員權限，這時只好有限度的在 Vim 裡頭使用 dvoark。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;keymap&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;dvorak
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;langmap&lt;/span&gt;&lt;span class="p"&gt;=-=&lt;/span&gt;qwertyuiop[]sdfghjkl\\;&lt;span class="s1"&gt;&amp;#39;zxcvbn\\,./_+QWERTYUIOP{}SDFGHJKL:\&amp;quot;ZXCVBN&amp;lt;&amp;gt;?;[]&amp;#39;&lt;/span&gt;\\&lt;span class="p"&gt;,&lt;/span&gt;.pyfgcrl/&lt;span class="p"&gt;=&lt;/span&gt;oeuidhtns&lt;span class="p"&gt;-&lt;/span&gt;\\;qjkxbwvz{}\&amp;quot;&lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;PYFGCRL?&lt;span class="p"&gt;+&lt;/span&gt;OEUIDHTNS_:QJKXBWVZ
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;參考：&lt;a href="http://city.shaform.com/blog/2013/07/09/vim-qwerty-to-dvorak.html"&gt;〈設定 Vim 將 qwerty 鍵盤轉為 dvorak 鍵盤〉&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;GCIN&lt;/h2&gt;
&lt;p&gt;有的輸入法沒有直接支援 dvoark，不只是符號對應沒有支援，連正常輸入都整個亂掉了。這時可能要搜尋一下看有沒有現成的修改版檔案，例如我曾經修改過 &lt;a href="http://hyperrate.com/thread.php?tid=19541#19541"&gt;GCIN 的行列輸入法表格&lt;/a&gt;。如果沒有的話，可能就得自行轉換了。&lt;/p&gt;
&lt;p&gt;我寫了一個轉換 GCIN .cin 檔的程式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# gcin_qwerty_to_dvorak.py&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;Usage: python gcin_qwerty_to_dvorak.py input.cin &amp;gt; output.cin&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fileinput&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;maketrans&lt;/span&gt;

&lt;span class="n"&gt;QWERTY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;-=qwertyuiop[]sdfghjkl;&amp;#39;zxcvbn,./_+QWERTYUIOP{}SDFGHJKL:&amp;quot;ZXCVBN&amp;lt;&amp;gt;?&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DVORAK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;[]&amp;#39;,.pyfgcrl/=oeuidhtns-;qjkxbwvz{}&amp;quot;&amp;lt;&amp;gt;PYFGCRL?+OEUIDHTNS_:QJKXBWVZ&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TRANS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maketrans&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QWERTY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DVORAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;re_option&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;%(selkey|endkey)\s+(\S+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;re_begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;%\S+\s+begin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;re_keydef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^([^#]\S*)(\s+\S+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;re_end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;%\S+\s+end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileinput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# process key definitions&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re_end&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_def&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re_keydef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRANS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# print transformed line&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;new_def&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;new_def&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="c"&gt;# print comment/end lines&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re_option&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%%%s&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRANS&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;re_begin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;轉換完後再用 gcin2tab 產生 GCIN 能用的 .gtab 檔。&lt;/p&gt;
&lt;p&gt;使用此程式轉換檔案的話，可能還是會需要手動調整，因為有些像是「,」 -&amp;gt;「，」的符號對應應該還是保留會比較好。&lt;/p&gt;</summary><category term="dvorak"></category><category term="linux"></category><category term="qwerty"></category><category term="windows"></category><category term="自由行列"></category><category term="行列"></category><category term="輸入法"></category></entry><entry><title>設定 Vim 將 qwerty 鍵盤轉為 dvorak 鍵盤</title><link href="http://city.shaform.com/blog/2013/07/09/vim-qwerty-to-dvorak.html" rel="alternate"></link><updated>2013-07-09T21:28:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2013-07-09:blog/2013/07/09/vim-qwerty-to-dvorak.html</id><summary type="html">&lt;p&gt;還記得從前在交大參加校內程式競賽時，Fedora?/FreeBSD? 環境裡頭不知為何無法透過圖形界面執行鍵盤設定，也找不到 setxkbmap，以至於無法使用 &lt;a href="http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard"&gt;dvorak&lt;/a&gt; 的窘境。每每被迫使用 qwerty 來競賽，總是覺得慢人一截。一直在研究有什麼方法可以用 command line 或設定檔強制轉換鍵盤，不過始終無果。最近用到 Red Hat Enterprise Linux 又遇到很類似的問題，同時也發現透過 rdp 連進機器時，設定的方法似乎會跟平常不太一樣。&lt;/p&gt;
&lt;p&gt;雖然 Google 良久還是沒有太多進展，但最近研究 vim 設定時突然發現可以直接修改 vim 的鍵盤對應，如此一來至少在用 vim 寫程式時能夠使用自己習慣的鍵盤排列。&lt;/p&gt;
&lt;p&gt;只要在 .vimrc 中加入如下設定，就可以在 vim 大部分的模式中直接轉換成 dvorak 鍵盤：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;keymap&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;dvorak
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;langmap&lt;/span&gt;&lt;span class="p"&gt;=-=&lt;/span&gt;qwertyuiop[]sdfghjkl\\;&lt;span class="s1"&gt;&amp;#39;zxcvbn\\,./_+QWERTYUIOP{}SDFGHJKL:\&amp;quot;ZXCVBN&amp;lt;&amp;gt;?;[]&amp;#39;&lt;/span&gt;\\&lt;span class="p"&gt;,&lt;/span&gt;.pyfgcrl/&lt;span class="p"&gt;=&lt;/span&gt;oeuidhtns&lt;span class="p"&gt;-&lt;/span&gt;\\;qjkxbwvz{}\&amp;quot;&lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;PYFGCRL?&lt;span class="p"&gt;+&lt;/span&gt;OEUIDHTNS_:QJKXBWVZ
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;keymap 可以修改輸入模式的對應，langmap 則是一般及 visual 模式等指令的按鍵，後面那串其格式可參考 :help 'langmap'，基本上是先打 qwerty 的按鍵，加個分號，再打上轉換成的 dvorak 按鍵，不過 , 和 ; 需要在前面補上 \，" 則是要補上 \。這設定唯一無法轉換的部份是 ":" 開頭的指令模式。此外，如果 set keymap 沒有作用的話，或許是系統缺少 dvorak 的 keymap，此時建立 ~/.vim/keymap/dvorak.vim 檔案，插入 &lt;a href="http://ftp.id.vim.org/runtime/keymap/dvorak.vim"&gt;dvorak.vim&lt;/a&gt; 的內容即可。&lt;/p&gt;
&lt;p&gt;這方法雖然有些不完美與費工，但是在比賽開始前的準備時間應該是可以完成的。至於有沒有什麼更好的解決方法呢？只能看看未來有沒有機會發現了。&lt;/p&gt;
&lt;p&gt;雖然或許也能透過類似 &lt;a href="http://www.keyghost.com/qido/"&gt;QIDO&lt;/a&gt; 等硬體方式解決，不過這個偶爾才會用到的零件實在是貴到無法下手的地步啊。&lt;/p&gt;</summary><category term="dvorak"></category><category term="qwerty"></category><category term="vim"></category><category term="vimrc"></category></entry><entry><title>最低成本的程式協作: CoProgramming</title><link href="http://city.shaform.com/blog/2013/03/05/coprogramming.html" rel="alternate"></link><updated>2013-03-05T08:03:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2013-03-05:blog/2013/03/05/coprogramming.html</id><summary type="html">&lt;h2&gt;緣起&lt;/h2&gt;
&lt;p&gt;在程式課堂，團隊合作常常是件頭痛的事，若是每個人各自工作，常會產生許多難以整合的版本。即使是一起到電腦教室討論，也常是一個人寫程式，其他人在旁邊看。雖然有版本控制系統等等合作工具，然而我從來沒有成功在一堂課中讓隊友學會其運作(應該說是幾乎，僅有在雙方都早已會使用，或者是由我做所有merge時才曾使用)，事實上，像 git, hg 等等複雜的系統，是否真的適合這種小型專案也尚有可懷疑的地方，尤其，有些作業所有的程式碼都在同一個檔案中，使得版本控制系統用起來十分不順手。&lt;/p&gt;
&lt;p&gt;我突然想起在&lt;a href="http://en.wikipedia.org/wiki/Here_Comes_Everybody"&gt;《Here Comes Everybody》&lt;/a&gt;書裡看過的說法：Wikipedia 的貢獻者中，絕大多數可能只有編輯過一兩行的文章。一家公司如果大部分的員工都只做一點工作，則這家公司多半無法生存。可是在 Wikipedia 的例子裡，合作的成本被降的很低，所以原來不可能利用的小量付出，也能被整合成一個共同成果。&lt;/p&gt;
&lt;p&gt;這確實就是我們遇到的情況，有時在課堂中的程式作業規模是如此的小，任何的合作成本都太過高昂。而且，這種只存在一學期的臨時團隊，根本難以形成向心力。而要求任何人為了一學期的作業學會複雜的版本控制系統更是完全不實際的想法。&lt;/p&gt;
&lt;p&gt;如果要成功整合大家一起完成這種小型的合作、如果要在每個人只寫幾行程式的情況下依然可以合作，唯一的可能性就是要將合作成本壓到極端的低。可是，要怎麼做呢？我的腦中浮現起從前透過 &lt;a href="http://etherpad.org/"&gt;EtherPad&lt;/a&gt; 或者是 &lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt; 教人寫程式時的場景，這就是了。像這樣即時同步的作法在專業的程式開發中或許會因為無法預期其他人的修改而造成不少問題，但對於小型合作而言，這就是最簡單的協作形式。&lt;/p&gt;
&lt;p&gt;沒有錯，只要在 Google Docs 上協作程式，然後再加上即時編譯執行的功能，免去不斷在 IDE 與 Docs 間不斷複製貼上的成本，就足夠了。這個非常簡單的專案將目標鎖定在程式新手的小型合作，最好的使用情境其實就是兩人互相坐在電腦教室裡，同時使用兩台電腦，邊討論邊寫程式。再也不會有一個人寫程式，其他人在旁邊看的情形了！腦中有了想法後，我就開始試著把他實做出來。&lt;/p&gt;
&lt;p&gt;&lt;div style="width:427px; height:356px; margin: 0 auto;"&gt;&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/16971654" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;經過&lt;/h2&gt;
&lt;p&gt;理論上這應該是個非常簡單的專案，而我其實也只是抱著展示想法的心情，所以是以快速開發作為原則，然而最後卻花了不少時間。問題出在 &lt;a href="https://developers.google.com/drive"&gt;Google Drive SDK&lt;/a&gt; 並沒有支援 C/C++，所以一開始選擇語言時我走了些歧路，原本想採用 Python，可是開發到一半才覺得我不太熟悉用 &lt;a href="http://en.wikipedia.org/wiki/Tkinter"&gt;Tkinter&lt;/a&gt; 製作圖形界面，且效果也不是很好，再考慮到一般 Windows 使用者並沒有安裝 Python 函式庫，&lt;a href="http://www.py2exe.org"&gt;py2exe&lt;/a&gt; 好像也有些 .dll 的問題，所以就放棄了。&lt;/p&gt;
&lt;p&gt;雖然知道 Java 是個不錯的選擇，可是印象中 Java 簡單的程式總要寫一大堆程式碼，實在提不起勁來。這時，我發現 &lt;a href="http://golang.org"&gt;Go&lt;/a&gt; 是個很有趣的語言，雖然他主要是用在系統開發，可是也有人開發&lt;a href="https://github.com/AllenDang/gform"&gt;圖形界面的函式庫&lt;/a&gt;，加上是個編譯語言，很符合我希望使用者能簡單使用這個軟體的需求，於是就決定來學一下 Go 了！這確實是個很簡單易學的語言，我花了一天的時間就讀完基本的教學，準備開始開發。只是突然發現那個圖形函式庫其實根本編譯不起來，而且功能也有限，所以最後我還是決定改用 Java 了。為了使用者的方便，我也打算採用 &lt;a href="http://launch4j.sourceforge.net"&gt;launch4j&lt;/a&gt; 來製作可執行檔，並包入 &lt;a href="http://tdm-gcc.tdragon.net"&gt;TDM-GCC&lt;/a&gt; 以及 Code::Blocks 的 &lt;a href="http://linux.die.net/man/1/cb_console_runner"&gt;cb_console_runner&lt;/a&gt;，讓使用者測試程式結束時視窗不會立即結束。&lt;/p&gt;
&lt;p&gt;目前程式碼可在 &lt;a href="https://github.com/shaform/coprogramming"&gt;coprogramming@github&lt;/a&gt; 觀看。&lt;/p&gt;
&lt;p&gt;本來想製作包裝好的執行檔，但因為不知為何有時編譯出來的程式會被測出木馬&lt;a href="http://comments.gmane.org/gmane.comp.gnu.mingw.user/38529"&gt;（雖然可能是誤判）&lt;/a&gt;，為了避免真的把木馬包進去，所以我決定只放上主程式，想參考研究的朋友可自行下載 TDM-GCC 安裝到 MinGW 子資料夾即可使用，另外如果把 JRE 安裝到 jre7 子資料夾，則可在未安裝 JRE 的電腦上直接執行主程式。&lt;/p&gt;
&lt;p&gt;包好的壓縮檔目前可在 &lt;a href="https://code.google.com/p/coprogramming/downloads/list"&gt;download page&lt;/a&gt; 下載。&lt;/p&gt;
&lt;h2&gt;已知問題&lt;/h2&gt;
&lt;p&gt;由於專案本身只是想要展示想法，所以目前有不少問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;由於直接下載編譯執行程式，所以可能有安全性問題。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;目前需要要求存取 Drive 所有檔案的權限，否則無法列出別人分享的程式碼。&lt;/li&gt;
&lt;li&gt;程式碼的標題在 Drive 中有特殊限制，會自動以 coprg 做為結尾，雖然在程式中看不出來。&lt;/li&gt;
&lt;li&gt;需要自行在 Drive 中選取 Tools -&amp;gt; Preferences... 取消 smart quotes 的設定，以免分號被轉換，造成程式無法編譯。&lt;/li&gt;
&lt;li&gt;只支援單檔案編譯。&lt;/li&gt;
&lt;li&gt;只支援 C++。&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;結語&lt;/h2&gt;
&lt;p&gt;其實早就有線上編譯的服務，理論上要做到線上協作、編譯、測試程式應該也可以，且對於使用者而言或許會更加方便。或者可以做一個本機端的伺服器程式，專門接收程式碼與編譯，而將界面寫成 Google Chrome 的擴充套件，這樣就可以使用該套件開啟特定文件，解決目前必須要求存取所有檔案的問題了！（因為本機程式沒有辦法讓使用者針對特定檔案給予權限，我猜測寫成擴充套件應該就可以實做在 Drive 界面裡，在檔案上按右鍵以該套件開啟的功能了吧。）&lt;/p&gt;
&lt;p&gt;這個想法是因為他專門針對新手的小型專案而特別，可是這種合作方式真的只適合新手嗎？即使在專業的環境中，若是在任何檔案上按下右鍵，就能即時同步分享於 Drive 之上，然後在請教同事時，他也能即時在檔案中編輯，而在他編輯的同時，本地端程式碼即時同步，隨時可用原本的方法編譯，這或許也有方便之處？&lt;/p&gt;</summary><category term="軟體開發"></category><category term="CoProgramming"></category><category term="Google Drive"></category></entry><entry><title>稍微整理了一下自由行列的原始碼</title><link href="http://city.shaform.com/blog/2013/02/26/freearray-bugfixes.html" rel="alternate"></link><updated>2013-02-26T14:17:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2013-02-26:blog/2013/02/26/freearray-bugfixes.html</id><summary type="html">&lt;h2&gt;停擺多年&lt;/h2&gt;
&lt;p&gt;還記得數年前完成了&lt;a href="http://city.shaform.com/blog/2010/02/15/intro-to-freearray.html"&gt;「自由行列輸入法」&lt;/a&gt;的測試版本，雖然一開始還有斷斷續續修正一些 bugs，但到後來這個專案就完全停擺了。當然其中一個重要理由是突然發現 &lt;a href="http://hyperrate.com/thread.php?tid=18200"&gt;gcin 原本就有支援智慧選詞的行列輸入法&lt;/a&gt;，覺得花那麼多力氣重造輪子有點不值得。但其實也是沒有特別的新功能可以開發，而且程式本身寫的太亂不太好維護，加上課業繁忙，所以就沒有投注太多關心。&lt;/p&gt;
&lt;p&gt;gcin 的版本雖然很好，但對 Dvorak 和「行列定符」的支援總是差了那麼一點，而且不知為何總是無法習慣使用 gcin，所以後來就沒有繼續使用。而隨著作業系統的更新，之前的自由行列輸入法也不知為何無法編譯了，於是我就重回注音輸入法的懷抱，和行列輸入法疏離了許久。&lt;/p&gt;
&lt;p&gt;後來剛好又看到行列以及 dvorak 的討論串，加上最近剛好比較有空，就想把之前的程式碼翻修一下，看看能不能動，也順便把原始碼轉到現在比較習慣的 &lt;a href="https://github.com/shaform/ibus-freearray"&gt;GitHub&lt;/a&gt;。雖然只花了幾天時間，不過其實遇到的問題也不少，甚至有些問題的根源還很難弄明白。&lt;/p&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;首先遇到的問題是不知為何編譯時所連結的外部函式庫，包含 sqlite3, ibus, freearray 等等，都無法順利連結，使用到的函式都變成了 undefined reference。花了一段時間才發現似乎是一定要透過 libtool 才能順利連結，在 configure.ac 裡加上 AM_PROG_LIBTOOL 以後情況才有所改善。&lt;/p&gt;
&lt;p&gt;但是很奇怪的是，原本我的編譯程序是先將一部分的 object 檔製成暫時的函式庫 libfaft.a，最後再連結在一起，但這個函式庫指向的外部連結也都變成是 undefined reference。除此之外，也遇到 libtool 在連結 c++, c 檔案時無法順利找到 libstdc++ 的問題。最後只有取消中繼函式庫，直接將所有 object 檔連在一起才能解決。&lt;/p&gt;
&lt;p&gt;除此之外，automake 和 autoconf 等等的行為似乎跟以前比起來也有微妙的改變，因此我參考其他專案修改了 autogen.sh，新增 libtoolize 和 autoheader 等指令，讓編譯流程順利進行，雖然其實我也不太清楚這些微妙的改變實際上有什麼作用就是。&lt;/p&gt;
&lt;p&gt;接下來則是 ibus 新版的 ibus_config_set_value, ibus_config_get_value, ibus_config_new 等等的行為已經有所不同，還有許多函式不知為何開始要求傳進去的參數要先經過 g_object_ref_sink 的處理。這些也透過觀察類似專案得到了解法，雖然還沒有時間深入研究。&lt;/p&gt;
&lt;p&gt;最後則是 64bit 環境下 libchewing 的 TreeType 大小會有問題，暫時用強制的型別解決了。&lt;/p&gt;
&lt;h2&gt;結語&lt;/h2&gt;
&lt;p&gt;幾番修正後終於成功啟動了 ibus-freearray，說起來行列輸入法真是不錯，雖然那麼久沒用可是我卻還記得怎麼打字。抱著學習的心態，這次也順便嘗試製作了 .deb 檔案，雖然一開始遇到一些問題，不過也順利解決了。&lt;/p&gt;
&lt;p&gt;雖說如此，這樣匆促的修復應該會隱藏著不少 bugs，而且目前實在也是沒有投入太多心力持續開發這個專案的打算，所以它還是會繼續以測試版的姿態存在下去吧。&lt;/p&gt;
&lt;p&gt;有興趣測試的朋友，所有的檔案都可在 &lt;a href="http://code.google.com/p/freearray/downloads/list"&gt;freearray download page&lt;/a&gt; 下載，若你是使用 64bit Ubuntu，可直接安裝 libfreearray0 和 ibus-freearray 等 .deb 檔。否則的話就參考從前的文件下載 .tar 檔編譯安裝。&lt;/p&gt;
&lt;p&gt;原始碼已經搬移到 Github：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shaform/libfreearray"&gt;libfreearray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shaform/ibus-freearray"&gt;ibus-freearray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="自由行列"></category><category term="軟體開發"></category><category term="輸入法"></category></entry><entry><title>ibus-faft 開發日誌</title><link href="http://city.shaform.com/blog/2010/02/20/ibus-faft-develop-notes.html" rel="alternate"></link><updated>2010-02-20T19:46:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2010-02-20:blog/2010/02/20/ibus-faft-develop-notes.html</id><summary type="html">&lt;p&gt;FreeArray for Test for the Input Bus 是基於 ibus 輸入法架構所製作之行列輸入法引擎，其結合來自 libchewing 的斷詞模組實作智慧選字功能，並利用「行列定符」改進原行列的符號輸入。此外，對 dvorak 鍵盤具有完整支援。&lt;/p&gt;
&lt;p&gt;在開發過程中，除了引用大量 libchewing 的程式碼外，也參考了 &lt;a href="http://code.google.com/p/ibus-array/"&gt;ibus-array&lt;/a&gt;, &lt;a href="https://github.com/definite/ibus-chewing"&gt;ibus-chewing&lt;/a&gt; 的程式碼才得以完成。&lt;/p&gt;
&lt;p&gt;時間大約是在 2010 年 2 月初直到 2 月中，連續而密集的開發。&lt;/p&gt;
&lt;h2&gt;libchewing&lt;/h2&gt;
&lt;p&gt;研究 libchewing 其實已經頗久了，直到現在對它的了解也才只是剛好得以把斷詞模組和一部分的輸入處理拿來用而已。為了配合 faft，而對 libchewing 做了些改動，主要是把 Phone 換成 ArrayCode，但也對一部分行為做了小修改，程式碼的改動應該都有用 &lt;code&gt;#ifndef FAFT_CHEWING / #ifdef FAFT_CHEWING&lt;/code&gt; 包了起來，所以應該頗好追蹤的。&lt;/p&gt;
&lt;p&gt;詞樹資料的創建是用了一系列工具轉換出來的，不過因為寫的時候是基於 C++ 版的 libfreearray，而且很亂沒整理，所以並沒有放在 ibus-faft 之中。檔案很大的一部分原因是同一個字有很多行列碼的表示方法，並且文字編碼長度比原新酷音長，另外，不小心把特別碼也轉進去了，不過一直提不起勁來重新轉換 XD。&lt;/p&gt;
&lt;h2&gt;資料處理&lt;/h2&gt;
&lt;p&gt;行列碼和中文字以及鍵盤排列轉換的處理，是從 libfreearray 中 C++ 的版本改過來的，處理中文字、行列定符、詞彙輸入的詞庫、特別碼及簡碼，都是由這部分負責，透過 SQLite 來存取資料。而斷詞用的詞庫，以及簡易符號輸入，則是用 libchewing 的檔案格式，詞彙輸入的詞庫和斷詞的詞庫我並沒有統一資料。另外，我把 libchewing 中使用者詞庫的功能移除以降低開發的複雜度。&lt;/p&gt;
&lt;p&gt;對於 SQLite 其實還不是很熟悉，設了一些 index 也不知是否有必要。主要的參考書藉是&lt;a href="http://apress.com/book/view/9781590596739"&gt;《The Definitive Guide to SQLite》&lt;/a&gt;，以及官方文件&lt;a href="http://www.sqlite.org/docs.html"&gt;《SQLite Documents》&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;核心輸入模組&lt;/h2&gt;
&lt;p&gt;其實原本我想把輸入處理全寫到 ibus-faft-engine 中的 process_key_event()，然後呼叫一些 libchewing 的，或自己寫的函式。想不到後來慢慢把很多東西都移進 faft 中，再由 ibus-faft-engine 來呼叫 faft 裡的函式，所以 ibus-faft 就不用呼叫 libchewing 的函式了。事實上是，現在要把 faft 拿出來，放進 scim 或其它輸入法架構，都變成一件有可能的事。我也因此得以寫了一支 faft-test 程式，配合 gdb 偵錯，對 ibus-faft 的開發有很大幫助。&lt;/p&gt;
&lt;p&gt;對於輸入法資料 FAFTContext 其實改動很多次，本來還另外寫了 FAFTData, FAFTOutput，再試圖引進 libchewing 之中，但最後變得非常複雜，所以還是直接改動 ChewingData, ChewingOutput，再把它們引進 faft 之中。faft 的介面曾改動過非常多次才變成現在的樣子，所以其實在某些地方可能會有一些功能重複或沒有用到的遺跡。另外就是一些狀態變數設了很多，最後好像也不見得有用。&lt;/p&gt;
&lt;p&gt;與 ibus 的介面程式，絕大多數都是參考 ibus-chewing 所做，一部分則是從 ibus-array 而來。&lt;/p&gt;
&lt;h2&gt;關於 Settings&lt;/h2&gt;
&lt;p&gt;在製作 Settings 介面時，我選擇和 ibus-array 一樣，透過 Python 來做，一方面是因為覺得可能比較簡單，二方面是正想學 Python，不能放過每一個機會。過程中比較有趣的是，正值沒有網路的寒假，我又沒有用過 GTK+，在電腦裡只找到一份以前想學 GTK+ 時下載的文件，只是那份寫的是 C，所以跟 Python 又有點不一樣，所以其實很多地方都得「猜猜看」，還得常常用 dir() 之類的。原本製作時是想拿 ibus-array 的來改一下即可，不過最後似乎重寫了絕大部分，順便也是在練習 Python，並一邊閱讀著&lt;a href="http://www.python.org/doc/"&gt;《Python documentation》&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;Autotools&lt;/h2&gt;
&lt;p&gt;在初期，是自己寫 Makefile 來編譯 ibus-faft 的，直到末期才把 Autotools 的部分補了上去。主要是參考 ibus-tmpl 的檔案，以及&lt;a href="http://www.freesoftwaremagazine.com/books/autotools_a_guide_to_autoconf_automake_libtool"&gt;《Autotools: a practitioner's guide to Autoconf, Automake and Libtool》&lt;/a&gt;，才得以完成。&lt;/p&gt;</summary><category term="自由行列"></category><category term="軟體開發"></category><category term="輸入法"></category><category term="ibus"></category></entry><entry><title>簡介自由行列專案</title><link href="http://city.shaform.com/blog/2010/02/15/intro-to-freearray.html" rel="alternate"></link><updated>2010-02-15T15:46:00+08:00</updated><author><name>Shaform</name></author><id>tag:city.shaform.com,2010-02-15:blog/2010/02/15/intro-to-freearray.html</id><summary type="html">&lt;p&gt;本持自由軟體，Release Early, Release Often 之精神，我實在應該趕快把自由行列的程式碼公開出來。不過覺得程式碼實在太醜，而且其實根本也還沒寫出什麼，再者我現在其實是一邊寫一邊學 OOP，因此程式碼常有大幅改動，再者又覺 SVN 操作好麻煩，所以遲遲未發。&lt;/p&gt;
&lt;p&gt;不過為了避免自由行列的想法消失在歷史之中。於是決定，先把自由行列專案的簡介發出。&lt;/p&gt;
&lt;h2&gt;簡易使用&lt;/h2&gt;
&lt;p&gt;行列輸入法雖然是用字根組字的輸入法，然而由於其字根的特性，需要花的記憶心力其實是比較小的，只是為了求快或者避免選字，時常必須記憶特別碼或簡碼。並且因為有些組字必須選字，而有些則不用，使得要時常注意螢幕或者把它的行為強記下來。&lt;/p&gt;
&lt;p&gt;引入智慧選字的功能之後，自由行列的新特性將是簡易。也許不再追求最快的輸入法，但是卻有機會成為組字輸入法中最易上手，選字機會最低的輸入法。每次出字時，不會再有依是否要選字而有的不一致行為，同時我也想將加上特定字尾才能輸出難字的功能去掉，而藏在「w」中的符號表，也被拿到「`」之下。如此一來，輸入的一致性將大為提高。&lt;/p&gt;
&lt;h2&gt;符號輸入&lt;/h2&gt;
&lt;p&gt;符號輸入是自由行列要改進的核心事項之一。除了符號表之外，還有從透過從行列字根發展出的「符根」輸出符號的「行列定符」，以及透過英文鍵盤，輸出全形中文符號的簡易符號輸入。&lt;/p&gt;
&lt;p&gt;使用過行列輸入法的人，即使不用特別說明，只要看到以下符號表，就會明白行列定符的意義。由於和字根非常相似，幾乎不用什麼記憶。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按鍵&lt;/th&gt;
&lt;th&gt;符號&lt;/th&gt;
&lt;th&gt;按鍵&lt;/th&gt;
&lt;th&gt;符號&lt;/th&gt;
&lt;th&gt;按鍵&lt;/th&gt;
&lt;th&gt;符號&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1^&lt;/td&gt;
&lt;td&gt;＝&lt;/td&gt;
&lt;td&gt;5^&lt;/td&gt;
&lt;td&gt;」&lt;/td&gt;
&lt;td&gt;8-&lt;/td&gt;
&lt;td&gt;＼&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1-&lt;/td&gt;
&lt;td&gt;─&lt;/td&gt;
&lt;td&gt;5^5^&lt;/td&gt;
&lt;td&gt;』&lt;/td&gt;
&lt;td&gt;8v&lt;/td&gt;
&lt;td&gt;‘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2^&lt;/td&gt;
&lt;td&gt;「&lt;/td&gt;
&lt;td&gt;5-&lt;/td&gt;
&lt;td&gt;〉&lt;/td&gt;
&lt;td&gt;8v8v&lt;/td&gt;
&lt;td&gt;“&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2^2^&lt;/td&gt;
&lt;td&gt;『&lt;/td&gt;
&lt;td&gt;5-5-&lt;/td&gt;
&lt;td&gt;》&lt;/td&gt;
&lt;td&gt;9^&lt;/td&gt;
&lt;td&gt;※&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2-&lt;/td&gt;
&lt;td&gt;〈&lt;/td&gt;
&lt;td&gt;5v&lt;/td&gt;
&lt;td&gt;）&lt;/td&gt;
&lt;td&gt;9-&lt;/td&gt;
&lt;td&gt;／&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2-2-&lt;/td&gt;
&lt;td&gt;《&lt;/td&gt;
&lt;td&gt;5v&lt;/td&gt;
&lt;td&gt;）&lt;/td&gt;
&lt;td&gt;9v&lt;/td&gt;
&lt;td&gt;’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2v&lt;/td&gt;
&lt;td&gt;（&lt;/td&gt;
&lt;td&gt;5v5v&lt;/td&gt;
&lt;td&gt;〕&lt;/td&gt;
&lt;td&gt;9v9v&lt;/td&gt;
&lt;td&gt;”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2v2v&lt;/td&gt;
&lt;td&gt;〔&lt;/td&gt;
&lt;td&gt;5v5v5v&lt;/td&gt;
&lt;td&gt;】&lt;/td&gt;
&lt;td&gt;0^&lt;/td&gt;
&lt;td&gt;：&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2v2v2v&lt;/td&gt;
&lt;td&gt;【&lt;/td&gt;
&lt;td&gt;6-&lt;/td&gt;
&lt;td&gt;、&lt;/td&gt;
&lt;td&gt;0-&lt;/td&gt;
&lt;td&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3-&lt;/td&gt;
&lt;td&gt;！&lt;/td&gt;
&lt;td&gt;7^&lt;/td&gt;
&lt;td&gt;？&lt;/td&gt;
&lt;td&gt;0-0-&lt;/td&gt;
&lt;td&gt;·&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4-&lt;/td&gt;
&lt;td&gt;＋&lt;/td&gt;
&lt;td&gt;7-&lt;/td&gt;
&lt;td&gt;，&lt;/td&gt;
&lt;td&gt;0-0-0-&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4-4-&lt;/td&gt;
&lt;td&gt;＃&lt;/td&gt;
&lt;td&gt;0v&lt;/td&gt;
&lt;td&gt;；&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在輸入完符碼後，按下 Shift+「詞彙鍵」即可輸出符號。&lt;/p&gt;
&lt;p&gt;簡易符號輸入則是像新注音或新酷音那樣，在全型模式下，可輸入英文符號而輸出中文符號。此外，各種符號都可在緩衝區中再按下選字鍵選擇類似的符號。關於簡易符號輸入其實還是有很多改進的方法，有待開發。&lt;/p&gt;
&lt;p&gt;事實上，對於符號輸入的改進，一部分的原因是要完全解決 Jedi 在他文章中所提出的跨 qwerty/dvorak 鍵盤時會遇到的問題。透過行列定符，使用者可以在完全不知道英文鍵盤的符號在哪的情況下輸出符號，讓行列自成一體系。而特意加強的簡易符號輸入，則是可依不同鍵盤輸出對應的中/英文符號。&lt;/p&gt;
&lt;h2&gt;繁簡分離&lt;/h2&gt;
&lt;p&gt;行列輸入法的字根除了可以用來拆繁體字外，其實也可以輸人簡體字。原本的設計是在輸入特定字尾時輸出簡體，但我想將簡體輸入獨立出來做為簡體模式。也就是說，我想嘗試讓自由行列具有做為一個簡體中文輸入法的可能性。&lt;/p&gt;
&lt;h2&gt;不只是輸入法&lt;/h2&gt;
&lt;p&gt;在製作 libfreearray 時，我所考慮的其實不只是輸入法而已，而是要將其發展成自由行列的通用函式庫。例如 typing tutor 或查碼程式，或其他更多的應用，都可基於其上發展。特別是一個可以在 Linux 平台上執行的 typing tutor，更是我將來有機會想實行的方向。覺得行列輸入法實在是一個很好的輸入法，現在似乎不太多人學，實為可惜。&lt;/p&gt;
&lt;h2&gt;手機輸入法&lt;/h2&gt;
&lt;p&gt;行列輸入法做為一個用數字排列字根的輸入法，自然具有成為手機輸入法的潛力，甚至要做到只有十鍵輸入，且不看螢幕都有可能。libfreearray 既然想成為行列的通用函式庫，最後很可能會希望建立起一個具有原始拆字字根，而非減縮後的 30 字根，的文字資料庫。屆時，當可研究如何製作手機輸入法。想來，要把行列字根轉到手機上其實有很多種做法，優缺點也不一，有心人可細細研究。&lt;/p&gt;
&lt;p&gt;也許後來手機的鍵盤將不再有十鍵的限制，但行列做作手機輸入法的可能性還是令人憧憬。&lt;/p&gt;</summary><category term="自由行列"></category><category term="軟體開發"></category><category term="輸入法"></category></entry></feed>