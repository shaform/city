<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>翼之都</title>
    <link>https://city.shaform.com/zh/</link>
    <description>Recent content on 翼之都</description><webfeeds:icon>https://city.shaform.com/favicon.ico</webfeeds:icon>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 30 Aug 2020 10:40:00 -0400</lastBuildDate>
    
    <atom:link href="https://city.shaform.com/zh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>利用 GnuCash Python Bindings 將記帳資料寫入GnuCash 檔案</title>
      <link>https://city.shaform.com/zh/2020/08/30/gnucash-importer/</link>
      <pubDate>Sun, 30 Aug 2020 10:40:00 -0400</pubDate>
      
      <guid>https://city.shaform.com/zh/2020/08/30/gnucash-importer/</guid>
      <description>問題 一直以來都是使用 GnuCash 作為記帳工具，雖然有自動補完的功能，但各種紀錄還是得手動的輸入。消費的部份因為簡單所以每週偶爾記記還算可行，但券商、銀</description>
      <content:encoded><![CDATA[<h2 id="問題">問題</h2>
<p>一直以來都是使用 <a href="https://www.gnucash.org/">GnuCash</a> 作為記帳工具，雖然有自動補完的功能，但各種紀錄還是得手動的輸入。消費的部份因為簡單所以每週偶爾記記還算可行，但券商、銀行裡的各種複雜交易如果都手動輸入感覺就相當花時間了。（其實一方面也是因為不會每週都記錄券商交易，而是累積起來一次輸入，所以心理上感覺比較繁雜。）所以最近研究了一下 <a href="https://www.gnucash.org/">GnuCash</a> 的<a href="https://www.gnucash.org/docs/v3/C/gnucash-help/trans-import.html">自動匯入功能</a>，發現當中有許多不太彈性的地方，除此之外，匯入速度不知為何十分緩慢，讓人不禁覺得自己手動輸入搞不好還比較快。</p>
<p>為了解決這個問題，就來研究了一下 GnuCash 的 <a href="https://wiki.gnucash.org/wiki/Python_Bindings">Python bindings</a> 尋找能夠自動輸入大量交易的方法。最後在一番研究之後，參考了 GnuCash 裡頭的 <a href="https://github.com/Gnucash/gnucash/tree/e0e77ca39dd15e8bf7df69b924ffcb4de2fea47d/bindings/python/example_scripts">example scripts</a>，寫了一個簡單的 <a href="https://github.com/shaform/gnucash-importer">gnucash-importer</a>。</p>
<h2 id="gnucash-importer">GnuCash Importer</h2>
<p><a href="https://github.com/shaform/gnucash-importer">gnucash-importer</a> 的功能是可以讀取 CSV 格式的記帳檔案，然後把裡頭的資料寫進 GnuCash 的檔案之中。使用這個工具作為輸入的手段的話，就能先將想插入的資料轉換成 CSV 格式，然後再透過 <a href="https://github.com/shaform/gnucash-importer">gnucash-importer</a> 寫入 GnuCash 之中。</p>
<p>比如說如果先將股票帳戶的資料透過某種方法轉換成如下的格式：</p>
<pre tabindex="0"><code>date,description,commodity,memo,account,amount,value
09/24/2020,Purchase VTI,CURRENCY::USD,,Assets:Current Assets:Cash Account:TD Ameritrade,,-2500.00
,,,,Assets:Investments:Stock:VTI,10,2500.00
09/07/2020,BND Dividend,CURRENCY::USD,,Assets:Current Assets:Cash Account:TD Ameritrade,,70.00
,,,,Income:Dividend Income:Dividend Income USD:BND Dividend,,-100.00
,,,,Assets:Investments:Bond:BND,,
,,,W-8 Tax Withholding - BND,Expenses:Taxes:Federal:Taxes Withholding:Taxes Withholding USD:2020 Taxes Withholding USD,,30.00
</code></pre><p>然後再利用 <a href="https://github.com/shaform/gnucash-importer">gnucash-importer</a> 來插入資料：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python -m gnucash_importer target.gnucash source.csv
</span></span></code></pre></div><p>就可以自動插入一筆購買 10 shares of VTI 的紀錄，和一筆得到 BND 的利息的紀錄。</p>
<p>所以說只要另外寫一些程式，把平常的帳戶資料先轉成這個格式的 CSV，就能簡單的匯入 GnuCash 之中了。</p>
<p>說穿了其實核心部份只是利用了簡單的 API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gnucash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DAY</span> <span class="o">=</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl"><span class="n">MONTH</span> <span class="o">=</span> <span class="mi">9</span>
</span></span><span class="line"><span class="cl"><span class="n">YEAR</span> <span class="o">=</span> <span class="mi">2020</span>
</span></span><span class="line"><span class="cl"><span class="n">DESCRIPTION</span> <span class="o">=</span> <span class="s1">&#39;Purchase VTI&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">ACCOUNT</span> <span class="o">=</span> <span class="s1">&#39;Assets:Current Assets:Cash Account:TD Ameritrade&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">VTI_ACCOUNT</span> <span class="o">=</span> <span class="s1">&#39;Assets:Investments:Stock:VTI&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">lookup_account</span><span class="p">(</span><span class="n">root_account</span><span class="p">,</span> <span class="n">account_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">names</span> <span class="o">=</span> <span class="n">account_path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">account</span> <span class="o">=</span> <span class="n">root_account</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">account</span> <span class="o">=</span> <span class="n">account</span><span class="o">.</span><span class="n">lookup_by_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">account</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">gnucash</span><span class="o">.</span><span class="n">Session</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">gnucash_path</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">gnucash</span><span class="o">.</span><span class="n">SessionOpenMode</span><span class="o">.</span><span class="n">SESSION_NORMAL_OPEN</span><span class="p">)</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">book</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">book</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">comm_table</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">get_table</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">commodity</span> <span class="o">=</span> <span class="n">comm_table</span><span class="o">.</span><span class="n">lookup</span><span class="p">(</span><span class="s1">&#39;CURRENCY&#39;</span><span class="p">,</span> <span class="s1">&#39;USD&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 指定幣種和基本敘述</span>
</span></span><span class="line"><span class="cl">    <span class="n">trans</span> <span class="o">=</span> <span class="n">gnucash</span><span class="o">.</span><span class="n">Transaction</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">trans</span><span class="o">.</span><span class="n">BeginEdit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">trans</span><span class="o">.</span><span class="n">SetDate</span><span class="p">(</span><span class="n">DAY</span><span class="p">,</span> <span class="n">MONTH</span><span class="p">,</span> <span class="n">YEAR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">trans</span><span class="o">.</span><span class="n">SetCurrency</span><span class="p">(</span><span class="n">commodity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">trans</span><span class="o">.</span><span class="n">SetDescription</span><span class="p">(</span><span class="n">DESCRIPTION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 紀錄從現金帳戶花去 -2500</span>
</span></span><span class="line"><span class="cl">    <span class="n">split</span> <span class="o">=</span> <span class="n">gnucash</span><span class="o">.</span><span class="n">Split</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">split</span><span class="o">.</span><span class="n">SetValue</span><span class="p">(</span><span class="n">gnucash</span><span class="o">.</span><span class="n">GncNumeric</span><span class="p">(</span><span class="o">-</span><span class="mi">2500</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">root_acct</span> <span class="o">=</span> <span class="n">book</span><span class="o">.</span><span class="n">get_root_account</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">acct</span> <span class="o">=</span> <span class="n">lookup_account</span><span class="p">(</span><span class="n">root_acct</span><span class="p">,</span> <span class="n">ACCOUNT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">split</span><span class="o">.</span><span class="n">SetAccount</span><span class="p">(</span><span class="n">acct</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">split</span><span class="o">.</span><span class="n">SetParent</span><span class="p">(</span><span class="n">trans</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 紀錄 VTI 持有增加 $2500 = 10 shares</span>
</span></span><span class="line"><span class="cl">    <span class="n">vti_split</span> <span class="o">=</span> <span class="n">gnucash</span><span class="o">.</span><span class="n">Split</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">vti_split</span><span class="o">.</span><span class="n">SetValue</span><span class="p">(</span><span class="n">gnucash</span><span class="o">.</span><span class="n">GncNumeric</span><span class="p">(</span><span class="mi">2500</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">vti_split</span><span class="o">.</span><span class="n">SetAmount</span><span class="p">(</span><span class="n">gnucash</span><span class="o">.</span><span class="n">GncNumeric</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">vti_acct</span> <span class="o">=</span> <span class="n">lookup_account</span><span class="p">(</span><span class="n">root_acct</span><span class="p">,</span> <span class="n">VTI_ACCOUNT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">vti_split</span><span class="o">.</span><span class="n">SetAccount</span><span class="p">(</span><span class="n">vti_acct</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">vti_split</span><span class="o">.</span><span class="n">SetParent</span><span class="p">(</span><span class="n">trans</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">trans</span><span class="o">.</span><span class="n">CommitEdit</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="其他可能性">其他可能性</h2>
<p>其實之所以突然想來寫個 importer ，還有一個原因是先前看過別人用 <a href="https://byvoid.com/zht/blog/beancount-bookkeeping-1/">beancount 記帳的心得</a>，對於像那樣直接用純文字記帳的方法感到有點興趣。由於是純文字，很有彈性，要寫各種 importer 當然也不成問題。實際上官方好像就有提供各種 importers 來使用的樣子。</p>
<p>但因為太習慣 GnuCash 有各種自動完成，以及各種方便顯示的圖表了，所以目前還在觀望之中。乍看之下如果使用 <a href="https://beancount.github.io/fava/">fava</a> 的話，雖然可以顯示一些基本的圖表，但跟 GnuCash 比起來還是有點距離。雖然因為很有彈性，所以理論上可以寫各種擴充套件，甚至搞不好早就有人寫好了強大的圖表套件。但一直還沒時間研究，所以只好暫時繼續使用 GnuCash 了。未來再看情形重新評估看看。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2020/euro-870757_640.jpg" alt="Cash" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>修復在加密硬碟裡安裝 Ubuntu 20.04 後無法開機的問題</title>
      <link>https://city.shaform.com/zh/2020/07/16/fix-unbootable-ubuntu/</link>
      <pubDate>Thu, 16 Jul 2020 20:40:00 -0400</pubDate>
      
      <guid>https://city.shaform.com/zh/2020/07/16/fix-unbootable-ubuntu/</guid>
      <description>問題 最近嘗試在不同的筆電上安裝 Ubuntu 20.04，發現如果選擇使用 LUKS 加密整個硬碟然後再把 Ubuntu 裝在裡頭的話，似乎有的時候會導致安裝好的 Ubuntu 無法開機。雖然</description>
      <content:encoded><![CDATA[<h2 id="問題">問題</h2>
<p>最近嘗試在不同的筆電上安裝 <a href="https://ubuntu.com/blog/ubuntu-20-04-lts-arrives">Ubuntu 20.04</a>，發現如果選擇使用 <a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">LUKS</a> 加密整個硬碟然後再把 Ubuntu 裝在裡頭的話，似乎有的時候會導致安裝好的 Ubuntu 無法開機。雖然不是很確定觸發的理由為何以及解法的原理為何，但也遇到了兩次了，於是便決定順手把解法紀錄下來以免之後又再遇到。</p>
<p>問題大概如下：在開機的時候，無法成功進入 Ubuntu，而會進入 <a href="https://en.wikipedia.org/wiki/BusyBox">BusyBox</a>，並顯示類似下面的畫面：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">BusyBox v1.18.5 <span class="o">(</span>Ubuntu 1:1.18.5-1ubuntu4<span class="o">)</span> built-in shell <span class="o">(</span>ash<span class="o">)</span>
</span></span><span class="line"><span class="cl">Enter <span class="s1">&#39;help&#39;</span> <span class="k">for</span> a list of built-in commands.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>initramfs<span class="o">)</span>
</span></span></code></pre></div><p>此時輸入 <code>exit</code> 之後就會顯示錯誤的理由，而理由是無法找到某個 <code>/dev/mapper/MAPPED_NAME</code> 檔案，或者是無法找到某個 <code>UUID=LUKS_UUID</code> 的磁區。具體的訊息忘了記錄下來。</p>
<h2 id="解法">解法</h2>
<p>首先利用 Ubuntu 安裝 usb disk 或光碟開機。然後記得要連上網路才有辦法完成修復。</p>
<p>接著利用磁碟工具 <code>gnome-disks</code> 將加密磁區裡頭的 root filesystem 掛載起來，比如說如果掛載在 <code>/media/ubuntu/disk</code> 的話，那檢查這個加密檔案系統裡頭的 <code>/media/ubuntu/disk/etc/fstab</code> 和 <code>/media/ubuntu/disk/etc/crypttab</code> 兩個檔案 。理論上 <code>/media/ubuntu/disk/etc/fstab</code> 裡頭應該要有以下一行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/dev/mapper/MAPPED_NAME /               ext4    <span class="nv">errors</span><span class="o">=</span>remount-ro <span class="m">0</span>       <span class="m">1</span>
</span></span></code></pre></div><p>而 <code>/media/ubuntu/disk/etc/crypttab</code> 裡頭應該要有下面這行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">MAPPED_NAME <span class="nv">UUID</span><span class="o">=</span>LUKS_UUID none luks,discard
</span></span></code></pre></div><p>其中，兩者的 <code>MAPPED_NAME</code> 應該要一樣，而 <code>LUKS_UUID</code> 應該要等於用來安裝 Ubuntu 的那個 LUKS 磁區的 UUID，也就是如果執行 <code>sudo blkid</code> 的話，應該會看到一行是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/dev/LUKS_DEV: <span class="nv">UUID</span><span class="o">=</span><span class="s2">&#34;LUKS_UUID&#34;</span> <span class="nv">TYPE</span><span class="o">=</span><span class="s2">&#34;crypto_LUKS&#34;</span> <span class="nv">PARTUUID</span><span class="o">=</span><span class="s2">&#34;...&#34;</span>
</span></span></code></pre></div><p>而在這個 <code>/dev/LUKS_DEV</code> 的 LUKS 磁區底下有個用來安裝 Ubuntu 的 file system。</p>
<p>比如說有可能 <code>/dev/LUKS_DEV</code> 是 <code>/dev/sda2</code> 而 <code>MAPPED_NAME</code> 是 <code>sda2_crypt</code>。</p>
<p>筆者遇到的情況是， <code>/media/ubuntu/disk/etc/crypttab</code> 這個檔案不知為何並不存在，因此必須手動根據 <code>sudo blkid</code> 的輸出，或者直接用硬碟工具 <code>gnome-disks</code> 查出 <code>LUKS_DEV</code> 和 <code>LUKS_UUID</code> 自行製造出 <code>/media/ubuntu/disk/etc/crypttab</code>。</p>
<p>這麼做了以後，因為我們要參照 <code>/media/ubuntu/disk/etc/crypttab,fsttab</code> 裡的內容來重新掛載加密硬碟，所以先用磁碟工具把加密磁區卸除掛載。然後開始執行以下一連串指令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 手動掛載 LUKS 磁區，這裡的 `LUKS_DEV` 和 `MAPPED_NAME` 須跟 `.../etc/crypttab` 裡頭的一致。</span>
</span></span><span class="line"><span class="cl">sudo cryptsetup luksOpen /dev/LUKS_DEV MAPPED_NAME
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo vgchange -ay
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 將安裝後系統的根目錄掛在 `/mnt` 底下，這裡的 `MAPPED_NAME` 要跟 `.../etc/fstab,crypttab` 裡頭的一致。</span>
</span></span><span class="line"><span class="cl">sudo mount /dev/mapper/MAPPED_NAME /mnt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 這裡的 `BOOT_DEV` 要選安裝後的系統裡用來掛載 `/boot` 的磁區。</span>
</span></span><span class="line"><span class="cl">sudo mount /dev/BOOT_DEV /mnt/boot
</span></span><span class="line"><span class="cl">sudo mount -t proc proc /mnt/proc
</span></span><span class="line"><span class="cl">sudo mount -o <span class="nb">bind</span> /dev /mnt/dev
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 把這個複製進去，等等我們才能用網路</span>
</span></span><span class="line"><span class="cl">sudo cp /etc/resolv.conf /mnt/etc/resolv.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 假裝我們的根目錄其實是 `/mnt`</span>
</span></span><span class="line"><span class="cl">sudo chroot /mnt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt install lvm2 cryptsetup-initramfs cryptsetup-run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo mount -t sysfs sys /sys
</span></span><span class="line"><span class="cl">sudo update-initramfs -c -k all
</span></span></code></pre></div><p>假設上面的指令沒錯誤訊息的話，那重新開機應該就能成功進入系統裡了，但若有錯誤訊息，就得處理一下想辦法排除。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

<h2 id="參考資料">參考資料</h2>
<ul>
<li><a href="https://feeding.cloud.geek.nz/posts/recovering-from-unbootable-ubuntu-encrypted-lvm-root-partition/">Recovering from an unbootable Ubuntu encrypted LVM root partition</a></li>
<li><a href="https://gist.github.com/dragon788/e777ba64d373210e4f6306ad40ee0e80">Repair &ldquo;ubuntu&ndash;vg-root&rdquo; not found with LUKS and LVM encryption</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>在 PyTorch 中重新排序資料來使用 PackedSequence</title>
      <link>https://city.shaform.com/zh/2019/01/15/sort-sequences-in-pytorch/</link>
      <pubDate>Tue, 15 Jan 2019 18:10:00 -0500</pubDate>
      
      <guid>https://city.shaform.com/zh/2019/01/15/sort-sequences-in-pytorch/</guid>
      <description>前言 使用 PyTorch 的 PackedSequence 雖然可以較快速的處理長短不一的序列資料，但是用起來有個不方便的地方。就是同一個 batch 裡的資料，長度必須由長到短排列。但是如果是在做</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>使用 <a href="https://pytorch.org/">PyTorch</a> 的 <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.utils.rnn.PackedSequence">PackedSequence</a> 雖然可以較快速的處理長短不一的序列資料，但是用起來有個不方便的地方。就是同一個 batch 裡的資料，長度必須由長到短排列。但是如果是在做機器翻譯之類的 <a href="https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html">Seq2Seq</a> 應用，同時有輸入字串和輸出字串，兩者的長度排序不見得會完全一樣。此時簡單的作法是照輸入排序，然後在 encoder 使用 PackedSequence，但是 decoder 就不要使用。但是其實也可以在 decoder 輸入時，先把資料排序，然後等 decoder 輸出後，再重新把資料轉換為原本的順序。本文就紀錄這種作法。</p>
<p>註：新版的 PyTorch 將會<a href="https://github.com/pytorch/pytorch/pull/15225">內建這種功能</a>，就不用再使用本文的做法了。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2019/geese.jpg" alt="Order" />
    </div>
    
  </figure>
</div>

<h2 id="排序資料">排序資料</h2>
<p>首先定義一個 <code>sort_sequences</code> 函式，將輸入的 <code>inputs</code> 照長度排序，並且回傳排好的 <code>inputs</code>, 排好的長度 <code>lengths_sorted</code>, 以及可以用來把序列轉回原始排序的 <code>unsorted_idx</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sort_sequences</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">lengths</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;sort_sequences
</span></span></span><span class="line"><span class="cl"><span class="s2">    Sort sequences according to lengths descendingly.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param inputs (Tensor): input sequences, size [B, T, D]
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param lengths (Tensor): length of each sequence, size [B]
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lengths_sorted</span><span class="p">,</span> <span class="n">sorted_idx</span> <span class="o">=</span> <span class="n">lengths</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">descending</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">_</span><span class="p">,</span> <span class="n">unsorted_idx</span> <span class="o">=</span> <span class="n">sorted_idx</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">inputs</span><span class="p">[</span><span class="n">sorted_idx</span><span class="p">],</span> <span class="n">lengths_sorted</span><span class="p">,</span> <span class="n">unsorted_idx</span>
</span></span></code></pre></div><h2 id="在-rnn-中的實際用法">在 RNN 中的實際用法</h2>
<p>在輸入 RNN 之前，先用 <code>sort_sequences</code> 把序列排好，然後再使用 <code>pack_padded_sequence</code> 將資料轉成 <code>PackedSequence</code>。</p>
<p>輸出之後，利用 <code>unsorted_idx</code> 把資料再轉回原本的排序即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">RNN</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">lengths</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">hidden</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">lengths</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">inputs</span><span class="p">,</span> <span class="n">sorted_lengths</span><span class="p">,</span> <span class="n">unsorted_idx</span> <span class="o">=</span> <span class="n">sort_sequences</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="n">inputs</span><span class="p">,</span> <span class="n">lengths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">inputs</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">nn</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">rnn</span><span class="o">.</span><span class="n">pack_padded_sequence</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="n">inputs</span><span class="p">,</span> <span class="n">sorted_lengths</span><span class="p">,</span> <span class="n">batch_first</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">outputs</span><span class="p">,</span> <span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">ct</span><span class="p">)</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">lstm</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">hidden</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">lengths</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="n">outputs</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">nn</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">rnn</span><span class="o">.</span><span class="n">pad_packed_sequence</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">              <span class="n">outputs</span><span class="p">,</span> <span class="n">batch_first</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">outputs</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">index_select</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">unsorted_idx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">ht</span> <span class="o">=</span> <span class="n">ht</span><span class="o">.</span><span class="n">index_select</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">unsorted_idx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">ct</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">index_select</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">unsorted_idx</span><span class="p">)</span>
</span></span></code></pre></div><p>這種寫法依然還是可以正常的進行 backpropagation，所以轉回原本序列的 tensors 可以直接傳出去，外頭也不會發現在這裡我們曾經重新排序了兩次。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用 Go 撰寫 Plurk 噗浪偷偷說網路爬蟲</title>
      <link>https://city.shaform.com/zh/2019/01/11/plurk-crawler/</link>
      <pubDate>Fri, 11 Jan 2019 20:40:00 -0500</pubDate>
      
      <guid>https://city.shaform.com/zh/2019/01/11/plurk-crawler/</guid>
      <description>前言 記得剛開始學習 Go 好像是在 2013 年的時候，不過後來就一直沒太多機會使用。最近剛好想寫個爬蟲，於是就決定用 Go 來練習看看。 這次的目標是 Plurk 噗浪上的「</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>記得剛開始學習 Go 好像是在 2013 年的時候，不過後來就一直沒太多機會使用。最近剛好想寫個爬蟲，於是就決定用 Go 來練習看看。</p>
<p>這次的目標是 Plurk 噗浪上的<a href="https://www.plurk.com/anonymous">「偷偷說河道」</a>。</p>
<p>本次的程式放在 <a href="https://github.com/shaform/experiments/tree/master/plurk_crawler">shaform/experiments/plurk_crawler</a>。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2019/cobweb.jpg" alt="Coweb" />
    </div>
    
  </figure>
</div>

<h2 id="環境設定">環境設定</h2>
<p>這次只有用到 <a href="https://github.com/schollz/progressbar">schollz/progressbar</a> 來顯示進度，其他都是使用 Go 內建的函式庫，故只要安裝一個套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">go get -u github.com/schollz/progressbar</span></span></code></pre></div></div>

<h2 id="撰寫爬蟲">撰寫爬蟲</h2>
<h3 id="分析網頁">分析網頁</h3>
<p>首先透過觀察網路流量的方式分析噗浪的偷偷說到底是讀取什麼資料來顯示的，最後就會發現，主要透過兩組 endpoints。</p>
<p>第一個可以得到偷偷說河道的所有噗：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">GET /Stats/getAnonymousPlurks?lang=&lt;language&gt;
</span></span></code></pre></div><p>第二個則可以用來讀取一個噗的回應：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">POST /Responses/get2?plurk_id=&lt;plurk_id&gt;&amp;from_response=&lt;start_num&gt;
</span></span></code></pre></div><p>得知兩組 endpoints 之後就能開始撰寫了。</p>
<h3 id="主程式">主程式</h3>
<p>主程式架構如下所示，首先利用 <code>flag</code> 來宣告參數，主要可以控制語言、存檔資料夾，以及要間隔多久送一次請求，防止被伺服器封鎖。</p>
<p>再來，則是實際呼叫第一個 endpoint 取得偷偷說河道。</p>
<p>最後則是解析河道取得所有的噗，再根據每個噗擷取回應並存檔。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">const</span> <span class="nx">startUrl</span> <span class="p">=</span> <span class="s">&#34;https://www.plurk.com/Stats/getAnonymousPlurks?lang=%s&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// parse args
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">lang</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;lang&#34;</span><span class="p">,</span> <span class="s">&#34;zh&#34;</span><span class="p">,</span> <span class="s">&#34;language of Plurks&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">outputDir</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;output-dir&#34;</span><span class="p">,</span> <span class="s">&#34;output&#34;</span><span class="p">,</span> <span class="s">&#34;directory for output&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">file</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;file&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;read file instead of query URL&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">delay</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">Int</span><span class="p">(</span><span class="s">&#34;delay&#34;</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="s">&#34;delay between each request in milliseconds&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// get plurks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">result</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">*</span><span class="nx">file</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span> <span class="p">=</span> <span class="nf">GetPlurksFromFile</span><span class="p">(</span><span class="o">*</span><span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">uri</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">startUrl</span><span class="p">,</span> <span class="o">*</span><span class="nx">lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span> <span class="p">=</span> <span class="nf">GetPlurks</span><span class="p">(</span><span class="nx">uri</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">plurks</span> <span class="o">:=</span> <span class="nf">ProcessPlurks</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// start storing content...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">os</span><span class="p">.</span><span class="nf">MkdirAll</span><span class="p">(</span><span class="o">*</span><span class="nx">outputDir</span><span class="p">,</span> <span class="mo">0700</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">FetchAndSavePlurks</span><span class="p">(</span><span class="o">*</span><span class="nx">outputDir</span><span class="p">,</span> <span class="nx">plurks</span><span class="p">,</span> <span class="o">*</span><span class="nx">delay</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="讀取噗浪河道">讀取噗浪河道</h3>
<p>使用 HTTP GET 發送請求後，河道的 endpoint 會回傳一組 json 資料，所以我們用 <code>json.Unmarshal</code> 將其解譯成物件。因為 Go 是 static typing，所以不像 Python 那麼方便會根據 json 自動變成各種正確的物件。所以是用 <code>interface{}</code> 來暫時代表任意 <code>type</code> 的物件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ParseJson</span><span class="p">(</span><span class="nx">inputs</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">result</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">inputs</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// GetPlurksFromFile queris uri
</span></span></span><span class="line"><span class="cl"><span class="c1">// to obtain plurk timeline.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">GetPlurks</span><span class="p">(</span><span class="nx">uri</span> <span class="kt">string</span><span class="p">)</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span><span class="nx">Timeout</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">15</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">uri</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">content</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">ParseJson</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="解析河道內容">解析河道內容</h3>
<p>這裡我們只拿出幾個我們關心的欄位，包含 <code>id</code>、內容、張貼時間、以及有幾個回應等等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Plurk</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PlurkId</span>       <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Content</span>       <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Posted</span>        <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ResponseCount</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Responses</span>     <span class="p">[]</span><span class="nx">PlurkResponse</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PlurkResponse</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Id</span>      <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Handle</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Content</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Posted</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ProcessPlurks parses the timeline,
</span></span></span><span class="line"><span class="cl"><span class="c1">// and produces a list of plurks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ProcessPlurks</span><span class="p">(</span><span class="nx">result</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">[]</span><span class="nx">Plurk</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">plurks</span> <span class="p">[]</span><span class="nx">Plurk</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Each value is an interface{} type, that is type asserted as a string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">switch</span> <span class="nx">obj</span> <span class="o">:=</span> <span class="nx">value</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">plurk</span> <span class="o">:=</span> <span class="nx">Plurk</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">PlurkId</span><span class="p">:</span>       <span class="nb">int</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="s">&#34;plurk_id&#34;</span><span class="p">].(</span><span class="kt">float64</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Content</span><span class="p">:</span>       <span class="nx">obj</span><span class="p">[</span><span class="s">&#34;content&#34;</span><span class="p">].(</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Posted</span><span class="p">:</span>        <span class="nx">obj</span><span class="p">[</span><span class="s">&#34;posted&#34;</span><span class="p">].(</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">ResponseCount</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="s">&#34;response_count&#34;</span><span class="p">].(</span><span class="kt">float64</span><span class="p">))}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">plurks</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">plurks</span><span class="p">,</span> <span class="nx">plurk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">plurks</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="抓取回應">抓取回應</h3>
<p>由於之前已經知道每則噗浪有幾則回應，這裡只要針對有回應的噗浪抓取就行。如果遇到錯誤，可能是該噗浪已經被刪除，所以就把該噗一併捨去。最後再存檔。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// FetchAndSavePlurks queries plurk.com to
</span></span></span><span class="line"><span class="cl"><span class="c1">// obtain responsese from each plurk and
</span></span></span><span class="line"><span class="cl"><span class="c1">// save them to disk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">FetchAndSavePlurks</span><span class="p">(</span><span class="nx">outputDir</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">plurks</span> <span class="p">[]</span><span class="nx">Plurk</span><span class="p">,</span> <span class="nx">delay</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span><span class="nx">Timeout</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">15</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bar</span> <span class="o">:=</span> <span class="nx">progressbar</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">plurks</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">plurk</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">plurks</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">responses</span> <span class="p">[]</span><span class="nx">PlurkResponse</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">plurk</span><span class="p">.</span><span class="nx">ResponseCount</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responses</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">FetchResponses</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">client</span><span class="p">,</span> <span class="nx">plurk</span><span class="p">.</span><span class="nx">PlurkId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;[WARN] Responses from %d cannot be fetched\n&#34;</span><span class="p">,</span> <span class="nx">plurk</span><span class="p">.</span><span class="nx">PlurkId</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">plurk</span><span class="p">.</span><span class="nx">Responses</span> <span class="p">=</span> <span class="nx">responses</span>
</span></span><span class="line"><span class="cl">			<span class="nx">plurkJson</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">plurk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ioutil</span><span class="p">.</span><span class="nf">WriteFile</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/%d.json&#34;</span><span class="p">,</span> <span class="nx">outputDir</span><span class="p">,</span> <span class="nx">plurk</span><span class="p">.</span><span class="nx">PlurkId</span><span class="p">),</span> <span class="nx">plurkJson</span><span class="p">,</span> <span class="mo">0644</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bar</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">delay</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">delay</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>至於實際的抓取程式則設計成如下。感覺用 Go 寫起來比 Python 嚴謹不少，在用 Python 時，反正錯誤就習慣讓他丟 Exception 壞掉就算了。可是寫 Go 就強迫要想想錯誤時到底要幹麻。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// FetchResponses fetches responses of a given plurk
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">FetchResponses</span><span class="p">(</span><span class="nx">client</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span> <span class="nx">plurkId</span> <span class="kt">int</span><span class="p">)</span> <span class="p">([]</span><span class="nx">PlurkResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">const</span> <span class="nx">fetchUrl</span> <span class="p">=</span> <span class="s">&#34;https://www.plurk.com/Responses/get2&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">data</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">Values</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;plurk_id&#34;</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">plurkId</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;from_response&#34;</span><span class="p">,</span> <span class="s">&#34;0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">req</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewRequest</span><span class="p">(</span><span class="s">&#34;POST&#34;</span><span class="p">,</span> <span class="nx">fetchUrl</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nf">Encode</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;X-Requested-With&#34;</span><span class="p">,</span> <span class="s">&#34;XMLHttpRequest&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;application/x-www-form-urlencoded; charset=UTF-8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// fetch responses
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">StatusCode</span> <span class="o">!=</span> <span class="mi">200</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="p">[]</span><span class="nx">PlurkResponse</span><span class="p">{},</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;connot load&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">content</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="p">[]</span><span class="nx">PlurkResponse</span><span class="p">{},</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;connot load&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="o">:=</span> <span class="nf">ParseJson</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">responses</span> <span class="p">[]</span><span class="nx">PlurkResponse</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span><span class="p">[</span><span class="s">&#34;responses&#34;</span><span class="p">].([]</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">obj</span> <span class="o">:=</span> <span class="nx">value</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">response</span> <span class="o">:=</span> <span class="nx">PlurkResponse</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Id</span><span class="p">:</span>      <span class="nb">int</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="s">&#34;id&#34;</span><span class="p">].(</span><span class="kt">float64</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Handle</span><span class="p">:</span>  <span class="nx">obj</span><span class="p">[</span><span class="s">&#34;handle&#34;</span><span class="p">].(</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Content</span><span class="p">:</span> <span class="nx">obj</span><span class="p">[</span><span class="s">&#34;content&#34;</span><span class="p">].(</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Posted</span><span class="p">:</span>  <span class="nx">obj</span><span class="p">[</span><span class="s">&#34;posted&#34;</span><span class="p">].(</span><span class="kt">string</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responses</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">responses</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">responses</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如此一來就完成了。</p>
<h2 id="實際抓取">實際抓取</h2>
<p>實際抓的時候感覺像這樣：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">go run crawl.go
</span></span><span class="line"><span class="cl">15% <span class="p">|</span>██████                                  <span class="p">|</span>  <span class="o">[</span>13s:1m11s<span class="o">]</span></span></span></code></pre></div></div>

<p>抓完則會像這樣：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">.                      
</span></span><span class="line"><span class="cl">├── crawl.go           
</span></span><span class="line"><span class="cl">└── output             
</span></span><span class="line"><span class="cl">    ├── 1398664726.json
</span></span><span class="line"><span class="cl">    ├── ...
</span></span></code></pre></div><p>接著或許就能進行噗浪輿情分析之類等等的運用。</p>
<h2 id="結語">結語</h2>
<p>感覺如果要快速的寫一些 scripts 還是 Python 比較好用，但 Go 寫起來已經算是很快了。本次的程式放在 <a href="https://github.com/shaform/experiments/tree/master/plurk_crawler">shaform/experiments/plurk_crawler</a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用 gocryptfs 加密 Dropbox 等雲端硬碟的檔案</title>
      <link>https://city.shaform.com/zh/2018/12/08/gocryptfs/</link>
      <pubDate>Sat, 08 Dec 2018 20:20:00 -0500</pubDate>
      
      <guid>https://city.shaform.com/zh/2018/12/08/gocryptfs/</guid>
      <description>前言 當使用 Dropbox 等雲端硬碟儲存檔案的時候，有時難免會擔心資料的安全性問題而不敢上傳太過私人的資料。雖然也可以利用一些像是 VeraCrypt 之類的加密硬碟技術在 Dropbox</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>當使用 <a href="https://dropbox.com">Dropbox</a> 等雲端硬碟儲存檔案的時候，有時難免會擔心資料的安全性問題而不敢上傳太過私人的資料。雖然也可以利用一些像是 <a href="https://www.veracrypt.fr/en/Home.html">VeraCrypt</a> 之類的加密硬碟技術在 Dropbox 裡存放一個加密檔案空間，但由於整個加密空間視為一個檔案，如檔案太大則同步時可能會花上不少時間。</p>
<p>研究了一下後發現，其實也是有把加密空間表示成許多檔案的加密工具，例如像是 <a href="https://github.com/rfjakob/gocryptfs">gocryptfs</a> 就是一例。</p>
<p>本文便簡單紀錄 gocryptfs 的用法。</p>
<h2 id="安裝">安裝</h2>
<p>要在 Ubuntu 底下安裝 gocryptfs 相當容易，可以使用以下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install gocryptfs</span></span></code></pre></div></div>

<h2 id="建立加密資料夾">建立加密資料夾</h2>
<p>建立加密資料夾相當容易，首先進到和雲端同步的檔案夾，例如像是 <code>$HOME/Dropbox</code>，然後直接建立一個新資料夾，並用 <code>gocryptfs -init</code> 指令初始化:</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">mkdir ENCRYPTED_DIR
</span></span><span class="line hl"><span class="cl">gocryptfs -init ENCRYPTED_DIR
</span></span><span class="line"><span class="cl">Choose a password <span class="k">for</span> protecting your files.
</span></span><span class="line"><span class="cl">Password: 
</span></span><span class="line"><span class="cl">Repeat: 
</span></span><span class="line"><span class="cl">The gocryptfs filesystem has been created successfully.
</span></span><span class="line"><span class="cl">You can now mount it using: gocryptfs ENCRYPTED_DIR MOUNTPOINT</span></span></code></pre></div></div>

<p>裡頭大概會長這樣：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ENCRYPTED_DIR/
</span></span><span class="line"><span class="cl">├── gocryptfs.conf
</span></span><span class="line"><span class="cl">└── gocryptfs.diriv
</span></span></code></pre></div><h2 id="掛載加密資料夾">掛載加密資料夾</h2>
<p>緊接著，在其他非雲端同步的地方建立掛載點，並掛載加密資料夾：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">mkdir MOUNT_DIR
</span></span><span class="line hl"><span class="cl">gocryptfs <span class="nv">$DROPBOX_DIR</span>/ENCRYPTED_DIR MOUNT_DIR
</span></span><span class="line"><span class="cl">Password:
</span></span><span class="line"><span class="cl">Decrypting master key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your master key is:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ********-********-********-********-
</span></span><span class="line"><span class="cl">    ********-********-********-********
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">If the gocryptfs.conf file becomes corrupted or you ever forget your password,
</span></span><span class="line"><span class="cl">there is only one hope <span class="k">for</span> recovery: The master key. Print it to a piece of
</span></span><span class="line"><span class="cl">paper and store it in a drawer. Use <span class="s2">&#34;-q&#34;</span> to suppress this message.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filesystem mounted and ready.</span></span></code></pre></div></div>

<p>這樣就能在 <code>MOUNT_DIR</code> 資料夾裡頭存取檔案了。比如說我們可以隨便新增一個檔案：
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">echo</span> <span class="nb">test</span> &gt; MOUNT_DIR/test.txt</span></span></code></pre></div></div>
</p>
<p>則就可以看到加密資料夾裡頭的加密檔也同步更新，並同步到雲端硬碟上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ENCRYPTED_DIR/
</span></span><span class="line"><span class="cl">├── 76h5Zq2yx76i5OP3HrrS3A
</span></span><span class="line"><span class="cl">├── gocryptfs.conf
</span></span><span class="line"><span class="cl">└── gocryptfs.diriv
</span></span></code></pre></div><h2 id="卸載加密資料夾">卸載加密資料夾</h2>
<p>最後要把資料夾關閉則可使用以下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">fusermount -u MOUNT_DIR</span></span></code></pre></div></div>

<p>下次要打開加密資料夾存取，則再次使用 <code>gocryptfs ENCRYPTED_DIR MOUNT_DIR</code> 指令即可。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2017/padlocks.jpg" alt="Locks" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>使用 Zarr 儲存資料集並用 PyTorch Dataset 讀取</title>
      <link>https://city.shaform.com/zh/2018/11/11/zarr/</link>
      <pubDate>Sun, 11 Nov 2018 11:40:00 -0500</pubDate>
      
      <guid>https://city.shaform.com/zh/2018/11/11/zarr/</guid>
      <description>前言 當使用大量的資料進行機器學習系統的訓練時，總是得花一些心力處理資料集的讀取。尤其如果有大量的圖片，則直接用檔案系統存放很多圖片不僅有些傳</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>當使用大量的資料進行機器學習系統的訓練時，總是得花一些心力處理資料集的讀取。尤其如果有大量的圖片，則直接用檔案系統存放很多圖片不僅有些傳送和儲存的麻煩，也會讓讀檔變得沒有效率。</p>
<p>雖然也曾接觸過 <a href="https://github.com/h5py/h5py">HDF5</a> 等資料格式，但不知為何存取起來相當緩慢。所以後來就都直接用 binary 檔案，<a href="https://github.com/appier/compatibility-family-learning/blob/master/cfl/input_data.py">自己寫資料格式的存取</a>。然而，這樣每次不同的資料無法直接通用，且自己寫檔案格式也很難保證速度上達到最好的效果。</p>
<p>直到最近發現有個叫做 <a href="https://zarr.readthedocs.io/en/stable/">Zarr</a> 的檔案存取格式，使用起來似乎相當快速。是以撰寫此文紀錄使用的方式。</p>
<p>本次的實驗程式放在 <a href="https://github.com/shaform/experiments/tree/master/zarr-dataset">shaform/experiments/zarr-dataset</a>。</p>
<h2 id="環境設定">環境設定</h2>
<p>由於這次要使用 <a href="https://pytorch.org/">PyTorch</a>，所以我將使用 <a href="https://conda.io/docs/">Conda</a> 來進行環境配置。首先安裝必要套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">conda create -n zarr <span class="nv">python</span><span class="o">=</span>3.6
</span></span><span class="line hl"><span class="cl">conda activate zarr <span class="c1"># or source activate zarr or older version of conda</span>
</span></span><span class="line hl"><span class="cl">conda install zarr tqdm python-lmdb -c conda-forge</span></span></code></pre></div></div>

<p>緊接著，我們下載 <a href="https://github.com/jayleicn/animeGAN">AnimeGAN</a> 的<a href="https://drive.google.com/file/d/0B4wZXrs0DHMHMEl1ODVpMjRTWEk/view?usp=sharing">動漫人臉資料集</a>，將其解壓到目錄之下，所以目前的目錄看起來如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── anime-faces
</span></span><span class="line"><span class="cl">│   ├── 1boy
</span></span><span class="line"><span class="cl">│   │   ├── danbooru_2637825_e3d8c4f9d55f25217cf5600874e664be.png
</span></span><span class="line"><span class="cl">│   │   ├── danbooru_2637834_dceb8d822bd1326cb0865440d23d39b8.png
</span></span><span class="line"><span class="cl">│   │   ├── ....
</span></span><span class="line"><span class="cl">│   ├── 1girl
</span></span><span class="line"><span class="cl">│   │   ├── danbooru_2635679_21741d5772cb3275165be0b68a286155.jpg
</span></span><span class="line"><span class="cl">│   │   ├── ....
</span></span></code></pre></div><p>緊接著刪除一些奇怪的檔案：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">rm -f anime-faces/aqua_eyes/._danbooru_2559693_dc628b766d7142f2d2d9c75559e36eb5.jpg
</span></span><span class="line hl"><span class="cl">rm -f anime-faces/aqua_eyes/._danbooru_2560862_796530ab01cc7bfd8a03c8d05cc6953b.png</span></span></code></pre></div></div>

<p>如此一來就準備好了。</p>
<h2 id="資料處理">資料處理</h2>
<p>在動漫人臉資料集裡，每個資料夾代表一個分類，共有 126 個分類。而每個資料夾裡，有許多 96x96x3 的人臉。</p>
<p>現在我們要將檔案轉成 training set 和 validation set。首先利用 PyTorch 的 <code>ImageFolder</code> 將資料讀進來，他會自動依照資料夾給標籤。所以每個圖片會變成一對 <code>(image, label)</code>，其中 <code>image</code> 是一個 <code>PIL.Image</code> 而 <code>label</code> 則是一個數字。</p>
<p>我們利用 <code>as_array</code> 把 <code>PIL.Image</code> 轉成 <code>unit8</code> 的 numpy array，然後把 channels 改成第一個維度，好符合 PyTorch 的慣用格式。</p>
<p>接著就用 <code>torch.utils.data.random_split</code> 幫我們分開資料。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># convert_anime_faces.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torchvision.datasets</span> <span class="kn">import</span> <span class="n">ImageFolder</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">random_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">as_array</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">image</span><span class="p">)</span><span class="o">.</span><span class="n">swapaxes</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_set</span> <span class="o">=</span> <span class="n">ImageFolder</span><span class="p">(</span><span class="n">root</span><span class="o">=</span><span class="s1">&#39;anime-faces&#39;</span><span class="p">,</span> <span class="n">transform</span><span class="o">=</span><span class="n">as_array</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">val_ratio</span> <span class="o">=</span> <span class="mf">0.1</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_set</span><span class="p">)</span> <span class="o">*</span> <span class="n">val_ratio</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_set</span><span class="p">)</span> <span class="o">-</span> <span class="n">val_size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">train_set</span><span class="p">,</span> <span class="n">val_set</span> <span class="o">=</span> <span class="n">random_split</span><span class="p">(</span><span class="n">data_set</span><span class="p">,</span> <span class="p">[</span><span class="n">train_size</span><span class="p">,</span> <span class="n">val_size</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">confs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s1">&#39;data/anime_faces/train.lmdb&#39;</span><span class="p">,</span> <span class="n">train_set</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s1">&#39;data/anime_faces/val.lmdb&#39;</span><span class="p">,</span> <span class="n">val_set</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">path</span><span class="p">,</span> <span class="n">data_set</span> <span class="ow">in</span> <span class="n">confs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">convert_data_set</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">data_set</span><span class="p">)</span>
</span></span></code></pre></div><p>然後就可以開始把他轉成 <code>zarr</code> 資料集了。</p>
<p>Zarr 有支援各種不同的檔案儲存格式，這裡我們用 <a href="https://lmdb.readthedocs.io/en/release/">lmdb</a>。注意到由於 lmdb 預設使用 <a href="https://en.wikipedia.org/wiki/Sparse_file">sparse file</a>，在 Linux 下你可能會看到 <code>*.lmdb</code> 資料夾足足佔了 1 TB 那麼大，但實際上使用 <code>du -hs</code> 檢查卻會發現其實沒有佔那麼大。這是正常的現象。</p>
<p>這邊主要注意的是因為 PyTorch 會任意存取不同 indices，所以 <code>chunk</code> 的第一個維度必須設為 <code>1</code>，這樣才能達到最高的速度。其他維度因為每次都是一次讀出來，所以就設成 <code>None</code>。<code>chunk</code> 的功用是，如果維度的數值是 <code>n</code> 的話，壓縮時就會把該維度的 <code>n</code> 個元素壓縮在一起，所以如果你常常一次讀 <code>n</code> 個元素的話，使用 <code>chunk</code> 就會比較快。設成 <code>None</code> 就表示把該維度所有資料都放在一起。</p>
<p>至於 <code>u1</code> 指的則是 1 byte 的 uint，也就是 <code>uint8</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># convert_anime_faces.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">convert_data_set</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">data_set</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">data_set</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">num_examples</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_set</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">zarr</span><span class="o">.</span><span class="n">LMDBStore</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">store</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">root</span> <span class="o">=</span> <span class="n">zarr</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="n">store</span><span class="o">=</span><span class="n">store</span><span class="p">,</span> <span class="n">overwrite</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">images_set</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;images&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="n">num_examples</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">96</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">chunks</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;u1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels_set</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;labels&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="n">num_examples</span><span class="p">,</span> <span class="p">),</span> <span class="n">chunks</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="s1">&#39;u1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">current_iter</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">loader</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">size</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">images_set</span><span class="p">[</span><span class="n">current_iter</span><span class="p">:</span><span class="n">current_iter</span> <span class="o">+</span> <span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">images</span>
</span></span><span class="line"><span class="cl">            <span class="n">labels_set</span><span class="p">[</span><span class="n">current_iter</span><span class="p">:</span><span class="n">current_iter</span> <span class="o">+</span> <span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">labels</span>
</span></span><span class="line"><span class="cl">            <span class="n">current_iter</span> <span class="o">+=</span> <span class="n">size</span>
</span></span></code></pre></div><h2 id="資料讀取">資料讀取</h2>
<p>那麼就可以讀取資料來進行訓練了。這裡我們讀出來的同時，也把檔案格式轉成範圍是 <code>[0, 1]</code> 的圖片，以及資料型態是 <code>torch.long</code> 的標籤。</p>
<p>注意到，如果要使用 <code>num_works &gt; 1</code> 的話，必須要在 <code>__getitem__</code> 裡頭再開啟資料集，否則會有問題。而因為 zarr 支援多個程式同時讀寫檔案，所以同時讀取是沒問題的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test_anime_faces.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">zarr</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">FaceDataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">transforms</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">keys</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;images&#39;</span><span class="p">,</span> <span class="s1">&#39;labels&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">),</span> <span class="s1">&#39;file `</span><span class="si">{}</span><span class="s1">` not exists!&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="n">zarr</span><span class="o">.</span><span class="n">LMDBStore</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">store</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">zarr_db</span> <span class="o">=</span> <span class="n">zarr</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="n">store</span><span class="o">=</span><span class="n">store</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">num_examples</span> <span class="o">=</span> <span class="n">zarr_db</span><span class="p">[</span><span class="s1">&#39;labels&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">datasets</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">transforms</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">transforms</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;labels&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">v</span><span class="p">:</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">long</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;images&#39;</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">v</span><span class="p">:</span> <span class="n">torch</span><span class="o">.</span><span class="n">tensor</span><span class="p">((</span><span class="n">v</span> <span class="o">-</span> <span class="mf">127.5</span><span class="p">)</span><span class="o">/</span><span class="mf">127.5</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">transforms</span> <span class="o">=</span> <span class="n">transforms</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">num_examples</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">datasets</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">store</span> <span class="o">=</span> <span class="n">zarr</span><span class="o">.</span><span class="n">LMDBStore</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">zarr_db</span> <span class="o">=</span> <span class="n">zarr</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="n">store</span><span class="o">=</span><span class="n">store</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">datasets</span> <span class="o">=</span> <span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="n">zarr_db</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">keys</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">keys</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">datasets</span><span class="p">[</span><span class="n">key</span><span class="p">][</span><span class="n">idx</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">transforms</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">item</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">transforms</span><span class="p">[</span><span class="n">key</span><span class="p">](</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">items</span>
</span></span></code></pre></div><p>最後我們寫一個簡單的 CNN 來進行測試：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="nn">nn</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="k">as</span> <span class="nn">F</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span><span class="p">,</span> <span class="n">trange</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Model</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_size</span><span class="o">=</span><span class="mi">96</span> <span class="o">*</span> <span class="mi">96</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span> <span class="n">output_size</span><span class="o">=</span><span class="mi">126</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">hidden_size</span><span class="o">=</span><span class="mi">25</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layer1</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">kernel_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">layer2</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">BatchNorm2d</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span> <span class="n">nn</span><span class="o">.</span><span class="n">ReLU</span><span class="p">(),</span> <span class="n">nn</span><span class="o">.</span><span class="n">MaxPool2d</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">kernel_size</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">stride</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fc</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">6</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">*</span> <span class="mi">32</span><span class="p">,</span> <span class="n">output_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">criteria</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">CrossEntropyLoss</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">layer1</span><span class="p">(</span><span class="n">inputs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">layer2</span><span class="p">(</span><span class="n">outputs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="n">outputs</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">outputs</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fc</span><span class="p">(</span><span class="n">outputs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">outputs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">batch_size</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">50</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_train</span> <span class="o">=</span> <span class="n">FaceDataset</span><span class="p">(</span><span class="s1">&#39;data/anime_faces/train.lmdb&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">device</span><span class="p">(</span><span class="s1">&#39;cuda&#39;</span> <span class="k">if</span> <span class="n">torch</span><span class="o">.</span><span class="n">cuda</span><span class="o">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="s1">&#39;cpu&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">data_train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">Model</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">train</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">optim</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">optim</span><span class="o">.</span><span class="n">Adam</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="n">trange</span><span class="p">(</span><span class="n">epochs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">t</span> <span class="o">=</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">loader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">images</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">optim</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">logits</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">criteria</span><span class="p">(</span><span class="n">logits</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">optim</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">predicts</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">softmax</span><span class="p">(</span><span class="n">logits</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">accuracy</span> <span class="o">=</span> <span class="p">(</span><span class="n">predicts</span> <span class="o">==</span> <span class="n">labels</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span><span class="o">.</span><span class="n">set_postfix</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">epoch</span><span class="o">=</span><span class="n">epoch</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="n">loss</span><span class="o">.</span><span class="n">item</span><span class="p">(),</span> <span class="n">accuracy</span><span class="o">=</span><span class="n">accuracy</span><span class="o">.</span><span class="n">item</span><span class="p">())</span>
</span></span></code></pre></div><p>最後就可以測試訓練完的模型：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="n">data_val</span> <span class="o">=</span> <span class="n">FaceDataset</span><span class="p">(</span><span class="s1">&#39;data/anime_faces/val.lmdb&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">val_loader</span> <span class="o">=</span> <span class="n">DataLoader</span><span class="p">(</span><span class="n">data_val</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">total</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">total_correct</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">eval</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">labels</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">images</span> <span class="o">=</span> <span class="n">images</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">logits</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">predicts</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">softmax</span><span class="p">(</span><span class="n">logits</span><span class="p">,</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">dim</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">correct</span> <span class="o">=</span> <span class="p">(</span><span class="n">predicts</span> <span class="o">==</span> <span class="n">labels</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_correct</span> <span class="o">+=</span> <span class="n">correct</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Val accuracy = </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">total_correct</span> <span class="o">/</span> <span class="n">total</span><span class="p">))</span>
</span></span></code></pre></div><p>假設你真的照上述的程式跑的話，雖然訓練集的準確率可以達到 72% ，但測試集的結果準確率才 9.2 %，看來必須要做更好的處理來避免 over-fitting 才行。</p>
<h2 id="結語">結語</h2>
<p>本次的實驗程式放在 <a href="https://github.com/shaform/experiments/tree/master/zarr-dataset">shaform/experiments/zarr-dataset</a>。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2018/storage.jpg" alt="Storage" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>從 Pelican 及 WordPress 轉移到 Hugo</title>
      <link>https://city.shaform.com/zh/2018/07/22/migrate-from-pelican-and-wordpress-to-hugo/</link>
      <pubDate>Sun, 22 Jul 2018 14:30:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2018/07/22/migrate-from-pelican-and-wordpress-to-hugo/</guid>
      <description>記得在 2014 年的時候把網誌搬到了 Pelican 上。當初會在各種靜態網頁生成器中選擇 Pelican，一方面是看到學姐的示範，另方面也是因為自己有在用 Pytho</description>
      <content:encoded><![CDATA[<p>記得在 <a href="/zh/2014/05/17/migrate-from-pixnet-to-pelican/">2014 年的時候</a>把網誌搬到了 <a href="https://github.com/getpelican/pelican">Pelican</a> 上。當初會在各種<a href="https://www.staticgen.com/">靜態網頁生成器</a>中選擇 Pelican，一方面是看到<a href="https://github.com/jsliang/pelican-fresh/">學姐的示範</a>，另方面也是因為自己有在用 Python，所以用起以 Python 開發的 Pelican 感覺比較熟悉。</p>
<p>時過境遷，學姐當初採用 Pelican 網誌似乎也關閉了，而 Pelican 的開發活躍度也下降許多。加上隨著文章增加，Pelican 的速度也越來越慢，我也動了更換架構的念頭。</p>
<p>於是就看上了 <a href="https://gohugo.io">Hugo</a>，除了速度飛快以外，開發活躍度也非常值得期待。另外就是，他是用 <a href="https://golang.org">Go</a> 寫的，勉強也算的上是我有使用的語言之一。</p>
<p>從 Pelican 的轉移，因為想先保持佈景，所以主要的時間花在把佈景 <a href="https://github.com/molivier/nest">Nest</a> 改造成 Hugo 可用的 <a href="https://github.com/shaform/hugo-theme-den">Den</a> 上。Markdown 本身倒是不須太多的修改，主要是更動 Pelican 裡的 <code>{filename}</code> 路徑寫法，以及更動 code block 的表示方法。因為寫程式去解析 Markdown 有點麻煩，所以我主要是<a href="http://vim.wikia.com/wiki/Recording_keys_for_repeated_jobs">紀錄 Vim 指令</a>來更動每個檔案。</p>
<p>從 WordPress 轉移過來的一座島就麻煩不少，雖然我直接採用了現成的佈景，還是寫了 <a href="https://github.com/shaform/wp2hugo">wp2hugo</a> 去下載我網誌用到的所有圖片，並且解析匯出的 XML 檔案轉成 Markdown 格式。並且還是花了一些手動的功夫去處理 <a href="https://en.support.wordpress.com/shortcodes/">WordPress Shortcodes</a> 才完整轉移。</p>
<p>這次轉移時，順便更動了一些翼之都當初從 Blogger 搬移過來的 URL 架構。為了讓原本的網址仍然可以連上，我也用了 Hugo 的 <a href="https://gohugo.io/content-management/urls/#aliases">Aliases</a> 功能替每個文章轉址。另外也讓一座島和翼之都都變成雙語網誌了。</p>
<p>最後的結果如下：</p>
<ul>
<li><a href="https://city.shaform.com/">翼之都</a></li>
<li><a href="https://island.shaform.com/">一座島</a></li>
</ul>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>使用 SSH ProxyCommand/ProxyJump 來連上內網主機</title>
      <link>https://city.shaform.com/zh/2017/10/28/ssh-proxycommand/</link>
      <pubDate>Sat, 28 Oct 2017 21:45:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2017/10/28/ssh-proxycommand/</guid>
      <description>以前使用 NLG 實驗室工作站時常會需要記下每台機器的 port 要如何連，感覺很不方便，於是就向學長學習，寫了類似像下面的 nlg 程式： #!/bin/bash NLG_WKS_3F={NLG_WKS_3F_HOST} NLG_WKS_2F={NLG_WKS_2F_HOST} case $1 in [3-9]) ssh $USER@$NLG_WKS_3F -p 2200$MACHINE ;; &amp;#34;a&amp;#34;)</description>
      <content:encoded><![CDATA[<p>以前使用 NLG 實驗室工作站時常會需要記下每台機器的 port 要如何連，感覺很不方便，於是就向學長學習，寫了類似像下面的 <code>nlg</code> 程式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">NLG_WKS_3F</span><span class="o">={</span>NLG_WKS_3F_HOST<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">NLG_WKS_2F</span><span class="o">={</span>NLG_WKS_2F_HOST<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nv">$1</span> in
</span></span><span class="line"><span class="cl">    <span class="o">[</span>3-9<span class="o">])</span>
</span></span><span class="line"><span class="cl">        ssh <span class="nv">$USER</span>@<span class="nv">$NLG_WKS_3F</span> -p 2200<span class="nv">$MACHINE</span>
</span></span><span class="line"><span class="cl">        <span class="p">;;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;a&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        ssh <span class="nv">$USER</span>@<span class="nv">$NLG_WKS_2F</span>
</span></span><span class="line"><span class="cl">        <span class="p">;;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;b&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        ssh <span class="nv">$USER</span>@<span class="nv">$NLG_WKS_2F</span> -p <span class="m">22002</span>
</span></span><span class="line"><span class="cl">        <span class="p">;;</span>
</span></span><span class="line"><span class="cl">    *<span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">;;</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span>
</span></span></code></pre></div><p>如此一來，要連線時，只要打以下指令就行了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">nlg b</span></span></code></pre></div></div>

<p>後來才知道，其實可以使用 <code>.ssh/config</code> 來設定連線的 Hosts。於是修改 <code>.ssh/config</code> 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host nlg-wks-2
</span></span><span class="line"><span class="cl">User <span class="o">{</span>USER<span class="o">}</span>
</span></span><span class="line"><span class="cl">HostName <span class="o">{</span>NLG_WKS_3F_HOST<span class="o">}</span>
</span></span><span class="line"><span class="cl">Port <span class="m">22002</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Host nlg-wks-b
</span></span><span class="line"><span class="cl">User <span class="o">{</span>USER<span class="o">}</span>
</span></span><span class="line"><span class="cl">HostName <span class="o">{</span>NLG_WKS_2F_HOST<span class="o">}</span>
</span></span><span class="line"><span class="cl">Port <span class="m">22002</span>
</span></span></code></pre></div><p>如此一來，要連線時，只要打以下指令就行了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ssh nlg-wks-b</span></span></code></pre></div></div>

<p>然而，由於奇怪的 port 對應，使得這麼做必須在 <code>.ssh/config</code> 裡增加許多行數。後來才發現，其實可以用 <code>ProxyCommand</code> 來做到先自動連上其中一台機器，再自動從那台機器連到內網的其他機器。</p>
<p>在連外網連不到的機器時，用 <code>ProxyCommand</code> 而非自己連兩次 ssh 還有一個好處，就是可以把用來認證的 ssh private key 存在本機，而不存在 NLG-WKS 伺服器裡，避免被同學偷看 private key，但卻可以用這個 private key 在跳板過程裡，用來認證最後想連上的主機。</p>
<p>實際作法如下，首先在 <code>.ssh/config</code> 新增用來跳板的主機：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host nlgs
</span></span><span class="line"><span class="cl">Hostname <span class="o">{</span>NLG_WKS_3F_HOST<span class="o">}</span>
</span></span><span class="line"><span class="cl">User <span class="o">{</span>USER<span class="o">}</span>
</span></span></code></pre></div><p>緊接著新增跳板項目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host nlg-wks-*
</span></span><span class="line"><span class="cl">User <span class="o">{</span>USER<span class="o">}</span>
</span></span><span class="line"><span class="cl">ProxyCommand ssh -q -W %h:%p nlgs
</span></span></code></pre></div><p>具體的意思是，在連 <code>nlg-wks-*</code> 機器時，會先連上 <code>nlgs</code> 機器，然後再從 <code>nlgs</code> 連 <code>nlg-wks-*</code> (因此 <code>nlgs</code> 機器本身，要看得懂 <code>nlg-wks-*</code> 才行，幸好之前在處理 <a href="/zh/2014/12/13/migrate-from-nis-to-ldap/">LDAP</a> 時已經順便把 DNS 紀錄都設了)。</p>
<p>如此一來，就能用以下指令，先跳到一個主機，再跳到其他主機了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ssh nlg-wks-b</span></span></code></pre></div></div>

<p>如果是使用較新的 ssh client，也能改用 <code>ProxyJump</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host nlg-wks-*
</span></span><span class="line"><span class="cl">User <span class="o">{</span>USER<span class="o">}</span>
</span></span><span class="line"><span class="cl">ProxyJump nlgs
</span></span></code></pre></div><p>如此一來，就能更方便的做實驗了。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>用程式自動產生 Google Forms 調查問卷</title>
      <link>https://city.shaform.com/zh/2017/09/16/auto-create-google-forms/</link>
      <pubDate>Sat, 16 Sep 2017 16:42:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2017/09/16/auto-create-google-forms/</guid>
      <description>前言 最近因為一些研究上的需要，需要進行問卷調查。雖然也可以用自己架的伺服器和網頁界面，可是難免擔心資安的疑慮。 於是就想到可以使用 Google Forms</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>最近因為一些研究上的需要，需要進行問卷調查。雖然也可以用自己架的伺服器和網頁界面，可是難免擔心資安的疑慮。
於是就想到可以使用 <a href="https://www.google.com/forms/about/">Google Forms</a>，來進行問卷調查與回收。
為了避免未來有需要時忘記作法，便記下筆記當作未來的參考。</p>
<p>這次將使用 <a href="https://www.kaggle.com/">Kaggle</a> 的 <a href="https://www.kaggle.com/c/dogs-vs-cats/data">Dogs vs. Cats 資料集</a>作為示範，每題會給兩張圖片，要求使用者選出貓貓照片。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2017/question-mark.jpg" alt="Question Mark" />
    </div>
    
  </figure>
</div>

<h2 id="資料準備">資料準備</h2>
<p>首先下載 <code>train.zip</code> 並且解壓縮，緊接著我們撰寫一個程式來產生必要的檔案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># prepare.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">input_dir</span><span class="p">,</span> <span class="n">output_dir</span><span class="p">,</span> <span class="n">web_root</span><span class="p">,</span> <span class="n">num_outputs</span><span class="p">,</span> <span class="n">names</span><span class="p">,</span> <span class="n">seed</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">image_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">output_dir</span><span class="p">,</span> <span class="s1">&#39;images&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">image_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># load choices for each question</span>
</span></span><span class="line"><span class="cl">    <span class="n">choices</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">named_images</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># write hashes of this name to a file</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># so we can analyse results later</span>
</span></span><span class="line"><span class="cl">        <span class="n">id_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">output_dir</span><span class="p">,</span> <span class="n">name</span> <span class="o">+</span> <span class="s1">&#39;.txt&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">id_path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">id_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_outputs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">fname</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">input_dir</span><span class="p">,</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">.</span><span class="si">{}</span><span class="s1">.jpg&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">h</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">fname</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">named_images</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">id_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">h</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># put images to a separate directory</span>
</span></span><span class="line"><span class="cl">                <span class="n">outpath</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">image_dir</span><span class="p">,</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">.jpg&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">h</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">shutil</span><span class="o">.</span><span class="n">copyfile</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">outpath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">choices</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">named_images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># output url for each image</span>
</span></span><span class="line"><span class="cl">    <span class="n">url_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">output_dir</span><span class="p">,</span> <span class="s1">&#39;urls.tsv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">url_path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;h</span><span class="se">\t</span><span class="s1">url</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">named_images</span> <span class="ow">in</span> <span class="n">choices</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="n">named_images</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="se">\t</span><span class="si">{}</span><span class="s1">/images/</span><span class="si">{}</span><span class="s1">.jpg</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">web_root</span><span class="p">,</span> <span class="n">h</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># output survey file</span>
</span></span><span class="line"><span class="cl">    <span class="n">survey_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">output_dir</span><span class="p">,</span> <span class="s1">&#39;survey.tsv&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">survey_path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">header</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">names</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">        <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;num</span><span class="se">\t</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">header</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_outputs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">options</span> <span class="o">=</span> <span class="p">[</span><span class="n">named_images</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="k">for</span> <span class="n">named_images</span> <span class="ow">in</span> <span class="n">choices</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="se">\t</span><span class="si">{}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\t</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">options</span><span class="p">)))</span>
</span></span></code></pre></div><p>這裡包含三個部份，第一個部份會把貓和狗指定題數 <code>num_outputs</code> 的圖片抓出，計算 <code>hash</code>，並且紀錄每一題要用哪個 <code>hash</code>。最後把 <code>hash</code> 寫進獨立的檔案，好讓未來可以知道每個 <code>hash</code> 對應到貓還是狗。</p>
<p>第二個部份則是根據指定的 <code>web_root</code> 來產生每個 <code>hash</code> 對應的網址，在產生問卷前要先將圖片上傳到這個位置，才能讓 script 抓取到對應的圖片。不過抓取完後，圖片就會存在 Google 裡，所以問卷本身不再需要原始的網址。</p>
<p>第三個部份則是產生實際的問卷檔案，別忘了隨機打亂選項的順序，好讓使用者看不出哪個選項是來自哪裡。</p>
<p>寫好後執行</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">python prepare.py train output --web-root http://WEB_ROOT</span></span></code></pre></div></div>

<p>應該會產生下述檔案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">output/
</span></span><span class="line"><span class="cl">├── cat.txt
</span></span><span class="line"><span class="cl">├── dog.txt
</span></span><span class="line"><span class="cl">├── images
</span></span><span class="line"><span class="cl">│   ├── 00f1acf458ae561796d9abf10e384f31.jpg
</span></span><span class="line"><span class="cl">│   ├── ......
</span></span><span class="line"><span class="cl">├── survey.tsv
</span></span><span class="line"><span class="cl">└── urls.tsv
</span></span></code></pre></div><p>首先先將 <code>images</code> 的所有檔案上傳到自己指定的 <code>web_root</code> 網頁空間。
然後產生一個 <a href="https://docs.google.com/spreadsheets">Google Sheets</a>，將 <code>survey.tsv</code> 和 <code>urls.tsv</code> 分別匯入成為 <code>survey</code> 和 <code>urls</code> 兩個 tabs。範例可參考：<a href="https://docs.google.com/spreadsheets/d/1B_PdPHYCEbsoMqNnym-SNxw9klT9Rzoij-vjGgDy_nk/edit?usp=sharing">〈Dogs vs. Cats Survey〉</a>。</p>
<h2 id="撰寫問卷產生的程式">撰寫問卷產生的程式</h2>
<p>接下來進入該 Google Sheets，點擊 <code>Tools -&gt; Script editor...</code>，編輯 <code>Code.gs</code>。</p>
<p>新增一個函式抓取問卷資料：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">getSurveyData</span><span class="p">(</span><span class="nx">sheetName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">arrayOfArrays</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSpreadsheet</span><span class="p">().</span><span class="nx">getSheetByName</span><span class="p">(</span><span class="nx">sheetName</span> <span class="o">||</span> <span class="s1">&#39;survey&#39;</span><span class="p">).</span><span class="nx">getDataRange</span><span class="p">().</span><span class="nx">getValues</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">headers</span> <span class="o">=</span> <span class="nx">arrayOfArrays</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">arrayOfArrays</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>再新增一個函式抓取網址資料：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">getUrlData</span><span class="p">(</span><span class="nx">sheetName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">arrayOfArrays</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSpreadsheet</span><span class="p">().</span><span class="nx">getSheetByName</span><span class="p">(</span><span class="nx">sheetName</span> <span class="o">||</span> <span class="s1">&#39;urls&#39;</span><span class="p">).</span><span class="nx">getDataRange</span><span class="p">().</span><span class="nx">getValues</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">headers</span> <span class="o">=</span> <span class="nx">arrayOfArrays</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">mapOfUrls</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">arrayOfArrays</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">arrayOfArrays</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">arrayOfArrays</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mapOfUrls</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">mapOfUrls</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>最後就是問卷產生了，為了避免產生太多 requests，造成連線逾時，也加了等待和重試的機制。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">makeOurForm</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="s1">&#39;Dogs vs. Cats Survey&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">desc</span> <span class="o">=</span> <span class="s1">&#39;Please select the picture that looks like a cat.&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">mapOfUrls</span> <span class="o">=</span> <span class="nx">getUrlData</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">surveyData</span> <span class="o">=</span> <span class="nx">getSurveyData</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">form</span> <span class="o">=</span> <span class="nx">FormApp</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">form</span><span class="p">.</span><span class="nx">setDescription</span><span class="p">(</span><span class="nx">desc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">surveyData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Utilities</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">form</span><span class="p">.</span><span class="nx">addMultipleChoiceItem</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">item</span><span class="p">.</span><span class="nx">setTitle</span><span class="p">(</span><span class="s1">&#39;Q&#39;</span> <span class="o">+</span> <span class="nx">surveyData</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;: Which one looks like a cat?&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">setChoices</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">      <span class="nx">item</span><span class="p">.</span><span class="nx">createChoice</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">      <span class="nx">item</span><span class="p">.</span><span class="nx">createChoice</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">setRequired</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">surveyData</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">surveyData</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">img</span> <span class="o">=</span> <span class="nx">UrlFetchApp</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">mapOfUrls</span><span class="p">[</span><span class="nx">h</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="nx">Utilities</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">imgItem</span> <span class="o">=</span> <span class="nx">form</span><span class="p">.</span><span class="nx">addImageItem</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">imgItem</span><span class="p">.</span><span class="nx">setTitle</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nx">setImage</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Utilities</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">imgItem</span><span class="p">.</span><span class="nx">setTitle</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nx">setImage</span><span class="p">(</span><span class="nx">img</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>點擊 <code>Run -&gt; makeOurForm</code> 熱騰騰的問卷就產生好了，可參考下圖。</p>
<p><img src="/images/survey.png" alt="Dogs vs. Cats Survey"></p>
<h2 id="程式碼">程式碼</h2>
<p>照慣例，程式碼放在下述地方供參考：</p>
<ul>
<li><a href="https://github.com/shaform/experiments/tree/master/google-forms">https://github.com/shaform/experiments/tree/master/google-forms</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>密碼管理心得筆記</title>
      <link>https://city.shaform.com/zh/2017/05/28/password-management/</link>
      <pubDate>Sun, 28 May 2017 20:11:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2017/05/28/password-management/</guid>
      <description>前言：逐步學習資訊安全 經過多年的學習，筆者的資訊安全管理方式也是有所進步。以檔案加密而言。從一開始完全不加密，到後來會把特定磁區使用 LUKS 加密，</description>
      <content:encoded><![CDATA[<h2 id="前言逐步學習資訊安全">前言：逐步學習資訊安全</h2>
<p>經過多年的學習，筆者的資訊安全管理方式也是有所進步。以檔案加密而言。從一開始完全不加密，到後來會把特定磁區使用 <a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">LUKS</a> 加密，又到後來啟用了家目錄的 <a href="http://ecryptfs.org/">eCryptfs</a>，並開始不太敢用沒加密的 Windows，只在 Ubuntu 上工作。其他還試過 <a href="https://en.wikipedia.org/wiki/TrueCrypt">TrueCrypt</a> 來加密硬碟，還曾經因為忘記密鑰，忍痛把某個硬碟裡的檔案放棄了呢。最近也受擅長資訊安全的朋友的建議，想來研究<a href="https://twopointfouristan.wordpress.com/2011/04/17/pwning-past-whole-disk-encryption/">也考慮開機磁區問題的全硬碟加密可能性</a>。</p>
<p>另一方面，對密碼管理也是多有嘗試。一開始設密碼也是使用像是生日、人名、單字之類的簡易密碼。當然很快就被破解了。後來使用了更加複雜的密碼，可是不同網站還是設成一樣，這樣要是有的網站<a href="http://plainpass.com/">密碼沒加密</a>，一被破解，全部網站的密碼也就被得知了。可是每個網站都用不同密碼實在太難記了，於是有段時期又改用某種神秘公式，配合不同網站性質，產生每個網站的獨特密碼。同樣的道理也能將每張金融卡的密碼都設成不一樣。一些不重要的網站則使用<a href="https://xkcd.com/936/">很長但好記的密碼</a>。</p>
<p>只是公式的主意看似可行，但如果被歹徒看見足夠多的密碼，或許他也有機會猜出背後的公式。同時每次想換密碼，都要想個全新的公式，並且一次換掉所有密碼，否則根本記不起哪個網站是用哪個規則，感覺也很麻煩。</p>
<p>於是後來就用亂數密碼產生器，每個網站都隨機產生自己也完全記不住的密碼，然後把他們加密存在像是 <a href="https://www.lastpass.com/">LastPass</a> 之類的雲端同步服務。可是這樣一來雖然就算歹徒得知一個密碼也猜不出其他密碼，但一旦歹徒攻進雲端儲存服務，並設法解開了加密，就一口氣得知了所有密碼了。</p>
<p>於是後來就不再使用雲端，而是用 <a href="https://www.keepassx.org/">KeepassX</a> 放在本機。這樣就減少了存放密碼的地方以及連網的時間。可是這樣一來同步就非常麻煩，常常如果在不同的機器各自新增了密碼，就得手動同步差異，相當不方便。此外，由於打密碼時會輸入密鑰，使用這個密鑰就可以一口氣解開所有密碼的加密，假設歹徒侵入了我的電腦，偷聽我打入的密鑰，則即可趁著加密被解開的當下，把所有密碼都複製出來了。</p>
<p>就在最近的時候，偷聽大大們聊天，得知了像是 <a href="https://www.passwordstore.org/">pass</a> 這樣的密碼管理程式。同時配合像是 <a href="https://en.wikipedia.org/wiki/YubiKey">YubiKey</a>、<a href="https://en.wikipedia.org/wiki/Nitrokey">Nitrokey</a> 等裝置，就能進一步提昇安全性。</p>
<p>原理大概如下：首先將密鑰放在外部的安全裝置，硬體本身設計無法將密鑰讀出，只能用來解密。如此一來，理論上即使駭客入侵電腦，或甚至闖空門偷走安全裝置也相當難以取得密鑰內容。而電腦裡的密碼則每條分開加密，在使用時透過外部裝置解開特定的密碼。如此一來，若要偷走所有密碼，則必須潛伏在電腦裡，不斷偷聽解開的密碼，直到所有密碼都被解開過一次才行，大幅拉長了被全面破解的時間。當然，若是歹徒使用某種方法控制了接上的安全裝置，強制解密所有密碼，就會被成功一次取走密碼了，不過這樣的風險可以用不要一直接上安全裝置來控制，終究已經比之前的方法小了。</p>
<h2 id="openpgp">OpenPGP</h2>
<h3 id="簡介">簡介</h3>
<p>為了達成本文的設定，首先必須借助 <a href="http://openpgp.org/">OpenPGP</a> 的力量，OpenPGP 實際上是一套加密標準，平常人其實是把他拿來做傳送加密郵件、檔案資料，或者數位簽章等等的運用。詳細介紹可參考：<a href="http://zacharyvoase.com/2009/08/20/openpgp/">〈OpenPGP for Complete Beginners〉</a>。</p>
<p>OpenPGP 是利用<a href="https://en.wikipedia.org/wiki/Public-key_cryptography">非對稱性加密</a>來達成大部分的功能，簡單來說，這種加密有兩把鑰匙，一把是公開的，另一把是私密的。使用其中一把鑰匙加密的檔案只有用另外一把鑰匙才能解開。而擁有其中一把鑰匙<a href="https://security.stackexchange.com/questions/4518/how-to-estimate-the-time-needed-to-crack-rsa-encryption">在目前的計算能力下無法在合理的時間裡導出另外一把鑰匙</a>。在這種情況下，只要用別人的公鑰加密，就只有擁有私鑰的他能夠解開，藉此達成加密傳輸的目的。另一方面，如果一個人用自己的私鑰加密某個東西，你就可以用公鑰驗證，該東西確實是擁有那把沒人知道的私鑰的人才能加密出來的東西，透過類似的原理就能達成數位簽章的目的了。</p>
<p>OpenPGP 通常是先創立一對 master key <a href="https://incenp.org/notes/2015/using-an-offline-gnupg-master-key.html">平常收著不要用</a>，但是創立一些 <a href="https://wiki.debian.org/Subkeys">subkeys</a> 來進行實際的加密簽章等等。要是遺失了 subkey 之類的，再把 master key 的密鑰拿出來簽章，宣告那些 subkeys 不能用了，然後創造新的 subkeys 等等，好讓管理上更方便。</p>
<h3 id="建立-openpgp-master-key">建立 OpenPGP Master Key</h3>
<p>這次我們會用 <a href="https://gnupg.org/">GnuPG</a> 來管理我們的 OpenPGP keys，由於我們將要開始操作私鑰，一旦洩漏整個系統就會陷於危殆之境，建議用完全乾淨的系統，甚至不要連上網路來進行操作。當然，若無連網，則安裝的套件就要用其他方式放進去而不能直接打本文的指令了。</p>
<p>首先安裝相依套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install gnupg2 gnupg-agent pinentry-curses</span></span></code></pre></div></div>

<p>緊接著參考 <a href="https://github.com/drduh/YubiKey-Guide">YubiKey-Guide</a>，更改 <code>~/.gnupg/gpg.conf</code> 的內容加入以下片段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># ~/.gnupg/gpg.conf</span>
</span></span><span class="line"><span class="cl">use-agent
</span></span><span class="line"><span class="cl">personal-cipher-preferences AES256 AES192 AES CAST5
</span></span><span class="line"><span class="cl">personal-digest-preferences SHA512 SHA384 SHA256 SHA224
</span></span><span class="line"><span class="cl">default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
</span></span><span class="line"><span class="cl">cert-digest-algo SHA512
</span></span><span class="line"><span class="cl">s2k-digest-algo SHA512
</span></span><span class="line"><span class="cl">s2k-cipher-algo AES256
</span></span><span class="line"><span class="cl">charset utf-8
</span></span><span class="line"><span class="cl">fixed-list-mode
</span></span><span class="line"><span class="cl">no-comments
</span></span><span class="line"><span class="cl">no-emit-version
</span></span><span class="line"><span class="cl">keyid-format 0xlong
</span></span><span class="line"><span class="cl">list-options show-uid-validity
</span></span><span class="line"><span class="cl">verify-options show-uid-validity
</span></span><span class="line"><span class="cl">with-fingerprint
</span></span></code></pre></div><p>然後就可以開始產生 master key：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --full-gen-key --expert</span></span></code></pre></div></div>

<p>由於我們不想直接使用 master key，所以選擇 8，好調整 master key 的功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.1.11<span class="p">;</span> Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2016</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg: keybox <span class="s1">&#39;$GNUPGHOME/pubring.kbx&#39;</span> created
</span></span><span class="line"><span class="cl">Please <span class="k">select</span> what kind of key you want:
</span></span><span class="line"><span class="cl">   <span class="o">(</span>1<span class="o">)</span> RSA and RSA <span class="o">(</span>default<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>2<span class="o">)</span> DSA and Elgamal
</span></span><span class="line"><span class="cl">   <span class="o">(</span>3<span class="o">)</span> DSA <span class="o">(</span>sign only<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>4<span class="o">)</span> RSA <span class="o">(</span>sign only<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>7<span class="o">)</span> DSA <span class="o">(</span><span class="nb">set</span> your own capabilities<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>8<span class="o">)</span> RSA <span class="o">(</span><span class="nb">set</span> your own capabilities<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>9<span class="o">)</span> ECC and ECC
</span></span><span class="line"><span class="cl">  <span class="o">(</span>10<span class="o">)</span> ECC <span class="o">(</span>sign only<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>11<span class="o">)</span> ECC <span class="o">(</span><span class="nb">set</span> your own capabilities<span class="o">)</span>
</span></span><span class="line"><span class="cl">Your selection? <span class="m">8</span>
</span></span></code></pre></div><p>調整讓 master key 剩下的 actions 只有 <code>Certify</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Possible actions <span class="k">for</span> a RSA key: Sign Certify Encrypt Authenticate
</span></span><span class="line"><span class="cl">Current allowed actions: Certify
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="o">(</span>S<span class="o">)</span> Toggle the sign capability
</span></span><span class="line"><span class="cl">   <span class="o">(</span>E<span class="o">)</span> Toggle the encrypt capability
</span></span><span class="line"><span class="cl">   <span class="o">(</span>A<span class="o">)</span> Toggle the authenticate capability
</span></span><span class="line"><span class="cl">   <span class="o">(</span>Q<span class="o">)</span> Finished
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your selection? Q
</span></span></code></pre></div><p>鑰匙的長度選擇 4096，感覺似乎比較安全。注意如果最後要把某些 key 放到 YubiKey, Nitrokey 等等的話，有些版本不支援 4096 這麼長的長度，所以要先確認一下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">RSA keys may be between <span class="m">1024</span> and <span class="m">4096</span> bits long.
</span></span><span class="line"><span class="cl">What keysize <span class="k">do</span> you want? <span class="o">(</span>2048<span class="o">)</span> <span class="m">4096</span>
</span></span><span class="line"><span class="cl">Requested keysize is <span class="m">4096</span> bits
</span></span></code></pre></div><p>至於鑰匙的時限則可自行設定，理論上因為 master key 打算放在一個很安全的地方平常不拿來用，所以就算設成永遠不過期可能也還可以。不過如果要安全一點也可以設短一點，強迫自己常換新。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Please specify how long the key should be valid.
</span></span><span class="line"><span class="cl">         <span class="nv">0</span> <span class="o">=</span> key does not expire
</span></span><span class="line"><span class="cl">      &lt;n&gt;  <span class="o">=</span> key expires in n days
</span></span><span class="line"><span class="cl">      &lt;n&gt;w <span class="o">=</span> key expires in n weeks
</span></span><span class="line"><span class="cl">      &lt;n&gt;m <span class="o">=</span> key expires in n months
</span></span><span class="line"><span class="cl">      &lt;n&gt;y <span class="o">=</span> key expires in n years
</span></span><span class="line"><span class="cl">Key is valid <span class="k">for</span>? <span class="o">(</span>0<span class="o">)</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">Key does not expire at all
</span></span><span class="line"><span class="cl">Is this correct? <span class="o">(</span>y/N<span class="o">)</span> y
</span></span></code></pre></div><p>輸入名字和電子郵件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">GnuPG needs to construct a user ID to identify your key.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Real name: &lt;NAME&gt;
</span></span><span class="line"><span class="cl">Email address: &lt;EMAIL&gt;
</span></span><span class="line"><span class="cl">Comment:
</span></span><span class="line"><span class="cl">You selected this USER-ID:
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&lt;NAME&gt; &lt;EMAIL&gt;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Change <span class="o">(</span>N<span class="o">)</span>ame, <span class="o">(</span>C<span class="o">)</span>omment, <span class="o">(</span>E<span class="o">)</span>mail or <span class="o">(</span>O<span class="o">)</span>kay/<span class="o">(</span>Q<span class="o">)</span>uit? O
</span></span></code></pre></div><p>然後他會要你設定私鑰的密碼，未來要使用私鑰時就必須輸入密碼才能用。設定好之後就會開始產生公私鑰了。最後這裡要等很久，可以不斷滑鼠亂動，亂按鍵盤，亂存取檔案來加速。不過即使這樣還是可能會<a href="https://serverfault.com/questions/471412/gpg-gen-key-hangs-at-gaining-enough-entropy-on-centos-6">卡住很久</a>就是。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">We need to generate a lot of random bytes. It is a good idea to perform
</span></span><span class="line"><span class="cl">some other action <span class="o">(</span><span class="nb">type</span> on the keyboard, move the mouse, utilize the
</span></span><span class="line"><span class="cl">disks<span class="o">)</span> during the prime generation<span class="p">;</span> this gives the random number
</span></span><span class="line"><span class="cl">generator a better chance to gain enough entropy.
</span></span></code></pre></div><p>最後終於成功產生：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg: <span class="nv">$GNUPGHOME</span>/trustdb.gpg: trustdb created
</span></span><span class="line"><span class="cl">gpg: key &lt;MASTER-KEY-ID&gt; marked as ultimately trusted
</span></span><span class="line"><span class="cl">gpg: directory <span class="s1">&#39;$GNUPGHOME/openpgp-revocs.d&#39;</span> created
</span></span><span class="line"><span class="cl">gpg: revocation certificate stored as <span class="s1">&#39;$GNUPGHOME/openpgp-revocs.d/&lt;KEY-FINGERPRINT&gt;.rev&#39;</span>
</span></span><span class="line"><span class="cl">public and secret key created and signed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg: checking the trustdb
</span></span><span class="line"><span class="cl">gpg: marginals needed: <span class="m">3</span>  completes needed: <span class="m">1</span>  trust model: PGP
</span></span><span class="line"><span class="cl">gpg: depth: <span class="m">0</span>  valid:   <span class="m">1</span>  signed:   <span class="m">0</span>  trust: 0-, 0q, 0n, 0m, 0f, 1u
</span></span><span class="line"><span class="cl">pub   rsa4096/&lt;MASTER-KEY-ID&gt; 2017-01-01 <span class="o">[]</span>
</span></span><span class="line"><span class="cl">      Key <span class="nv">fingerprint</span> <span class="o">=</span> &lt;KEY-FINGERPRINT&gt;
</span></span><span class="line"><span class="cl">uid                   <span class="o">[</span>ultimate<span class="o">]</span> &lt;NAME&gt; &lt;EMAIL&gt;
</span></span></code></pre></div><p>除了一對公鑰私鑰以外，還順便產生了 <code>revocation certificate</code>，這是一個可以用來宣告這把 master key 失效的憑證，尤其是如果當初有效日期設得很長的話，若中途被人盜走了 master key，就可以用這個告訴別人不要再相信這把 key 了。</p>
<p>不過這一切都是如果你要真的拿 OpenPGP key 做正常的用途時才有用。如果你單純只是要用來管理密碼，而且也不打算讓別人知道有這把 key 的話其實就不太有用了。</p>
<p>除了讓 GnuPG 自行產生外，也可以用以下指令產生 <code>revocation certificate</code>，<code>--armor</code> 是要讓產生的檔案變成可印的純文字（因此你可以把他印出來備份，而不留下真正的數位檔案，防止被盜取。）</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --armor --gen-revoke &lt;MASTER-KEY-ID&gt;  &gt; &lt;REVOKE-FILE&gt;</span></span></code></pre></div></div>

<h3 id="建立加密用-subkey">建立加密用 Subkey</h3>
<p>接下來就正式增加加密用的 subkey 了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --edit-key &lt;MASTER-KEY-ID&gt;</span></span></code></pre></div></div>

<p>使用 <code>addkey</code> 指令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.1.11<span class="p">;</span> Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2016</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Secret key is available.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sec  rsa4096/&lt;MASTER-KEY-ID&gt;
</span></span><span class="line"><span class="cl">     created: 2017-01-01  expires: never       usage: C
</span></span><span class="line"><span class="cl">     trust: ultimate      validity: ultimate
</span></span><span class="line"><span class="cl"><span class="o">[</span>ultimate<span class="o">]</span> <span class="o">(</span>1<span class="o">)</span>. &lt;NAME&gt; &lt;EMAIL&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg&gt; addkey
</span></span></code></pre></div><p>選擇加密：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Please <span class="k">select</span> what kind of key you want:
</span></span><span class="line"><span class="cl">   <span class="o">(</span>3<span class="o">)</span> DSA <span class="o">(</span>sign only<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>4<span class="o">)</span> RSA <span class="o">(</span>sign only<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>5<span class="o">)</span> Elgamal <span class="o">(</span>encrypt only<span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="o">(</span>6<span class="o">)</span> RSA <span class="o">(</span>encrypt only<span class="o">)</span>
</span></span><span class="line"><span class="cl">Your selection? <span class="m">6</span>
</span></span></code></pre></div><p>繼續選 4096，而時間可以設短一點，強迫自己將來換 subkeys。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">RSA keys may be between <span class="m">1024</span> and <span class="m">4096</span> bits long.
</span></span><span class="line"><span class="cl">What keysize <span class="k">do</span> you want? <span class="o">(</span>2048<span class="o">)</span> <span class="m">4096</span>
</span></span><span class="line"><span class="cl">Requested keysize is <span class="m">4096</span> bits
</span></span><span class="line"><span class="cl">Please specify how long the key should be valid.
</span></span><span class="line"><span class="cl">         <span class="nv">0</span> <span class="o">=</span> key does not expire
</span></span><span class="line"><span class="cl">      &lt;n&gt;  <span class="o">=</span> key expires in n days
</span></span><span class="line"><span class="cl">      &lt;n&gt;w <span class="o">=</span> key expires in n weeks
</span></span><span class="line"><span class="cl">      &lt;n&gt;m <span class="o">=</span> key expires in n months
</span></span><span class="line"><span class="cl">      &lt;n&gt;y <span class="o">=</span> key expires in n years
</span></span><span class="line"><span class="cl">Key is valid <span class="k">for</span>? <span class="o">(</span>0<span class="o">)</span> 10y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Key expires at Fri <span class="m">01</span> Jan <span class="m">2027</span> 10:19:01 PM CST
</span></span><span class="line"><span class="cl">Is this correct? <span class="o">(</span>y/N<span class="o">)</span> y
</span></span><span class="line"><span class="cl">Really create? <span class="o">(</span>y/N<span class="o">)</span> y
</span></span></code></pre></div><p>如果他問你要設定什麼密碼的話，要打跟之前 master key 一樣的密碼。最後等很久就成功了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">We need to generate a lot of random bytes. It is a good idea to perform
</span></span><span class="line"><span class="cl">some other action <span class="o">(</span><span class="nb">type</span> on the keyboard, move the mouse, utilize the
</span></span><span class="line"><span class="cl">disks<span class="o">)</span> during the prime generation<span class="p">;</span> this gives the random number
</span></span><span class="line"><span class="cl">generator a better chance to gain enough entropy.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sec  rsa4096/&lt;MASTER-KEY-ID&gt;
</span></span><span class="line"><span class="cl">     created: 2017-01-01  expires: never       usage: C
</span></span><span class="line"><span class="cl">     trust: ultimate      validity: ultimate
</span></span><span class="line"><span class="cl">ssb  rsa4096/&lt;ENCRYPT-KEY-ID&gt;
</span></span><span class="line"><span class="cl">     created: 2017-01-01  expires: 2027-01-01  usage: E
</span></span><span class="line"><span class="cl"><span class="o">[</span>ultimate<span class="o">]</span> <span class="o">(</span>1<span class="o">)</span>. &lt;NAME&gt; &lt;EMAIL&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg&gt; quit
</span></span><span class="line"><span class="cl">Save changes? <span class="o">(</span>y/N<span class="o">)</span> y
</span></span></code></pre></div><p>做到這裡，先把鑰匙們備份下來，這裡頭會包含 master key 和 encryption subkey 的公鑰和私鑰，可以存放到安全的地方。最後我們將會銷毀電腦裡的 master key 和 encryption subkey 的私鑰，使得只剩安全地方的備份，以及 YubiKey 上的版本。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --armor --export-secret-keys &lt;MASTER-KEY-ID&gt; &gt; &lt;MASTER-SECRECT-FILE&gt;</span></span></code></pre></div></div>

<h2 id="yubikey">YubiKey</h2>
<h3 id="簡介-1">簡介</h3>
<p><a href="https://en.wikipedia.org/wiki/YubiKey">YubiKey</a> 比較知名的功能大概像是 <a href="https://en.wikipedia.org/wiki/Universal_2nd_Factor">U2F</a> 或是 <a href="https://en.wikipedia.org/wiki/One-time_password">OTP</a> 等等的二次驗證 (<a href="https://en.wikipedia.org/wiki/Multi-factor_authentication">2FA</a>)，不過這次主要是想借助他拿來當 OpenPGP 智慧卡的功能。簡單來說，我們可以把私鑰放在 YubiKey 上，然後請他執行解密簽章之類的功能。但因為硬體的安全性設計，理論上沒有人可以拿出裡頭的私鑰實際內容到底是什麼。</p>
<p>不過因為 YubiKey 4 開始不再使用開放原始碼的 OpenPGP，所以也<a href="https://news.ycombinator.com/item?id=11690774">可能會令人擔心裡頭其實藏有後門，可讓政府取出也說不定。</a>，這也就是為什麼一些擅長安全的朋友建議改用 <a href="https://news.ycombinator.com/item?id=10797256">Nitrokey</a>。</p>
<p>不過因為 YubiKey 目前還是比較多人在用，所以本文就以 YubiKey 4 作為示範，大家可以再自行調整。</p>
<h3 id="設定-yubikey-4-openpgp-功能">設定 YubiKey 4 OpenPGP 功能</h3>
<p>為了避免遺失 YubiKey 後會一時無法解密自己的檔案，所以最好同時設置兩把以上的 YubiKey 讓他們擁有同一把 encryption subkey，不過用來簽章和驗證的 signature subkey 和 authentication subkey 就不必共享了。事實上我們將會直接在 YubiKey 上產生這兩種 subkeys 的私鑰，並且不留任何備份。也就是說連我們自己都永遠無法從 YubiKeys 裡得到真正私鑰的樣子。</p>
<p>首先安裝相依套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install scdaemon pcscd yubikey-personalization libusb-1.0-0-dev</span></span></code></pre></div></div>

<p>接上 YubiKey 4 以後，執行編輯指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --card-edit</span></span></code></pre></div></div>

<p>首先更改管理密碼，和使用者密碼，未來在使用 YubiKey 時要先輸入使用者密碼才能使用，至於管理者密碼則只有在修改設定時才會用到。YubiKey 4 預設的管理密碼是 <code>12345678</code>，使用者密碼則是 <code>123456</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg/card&gt; admin
</span></span><span class="line"><span class="cl">Admin commands are allowed
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg/card&gt; passwd
</span></span><span class="line"><span class="cl">gpg: OpenPGP card no. &lt;CARD-ID&gt; detected
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> - change PIN
</span></span><span class="line"><span class="cl"><span class="m">2</span> - unblock PIN
</span></span><span class="line"><span class="cl"><span class="m">3</span> - change Admin PIN
</span></span><span class="line"><span class="cl"><span class="m">4</span> - <span class="nb">set</span> the Reset Code
</span></span><span class="line"><span class="cl">Q - quit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your selection? <span class="m">3</span>
</span></span><span class="line"><span class="cl">PIN changed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> - change PIN
</span></span><span class="line"><span class="cl"><span class="m">2</span> - unblock PIN
</span></span><span class="line"><span class="cl"><span class="m">3</span> - change Admin PIN
</span></span><span class="line"><span class="cl"><span class="m">4</span> - <span class="nb">set</span> the Reset Code
</span></span><span class="line"><span class="cl">Q - quit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your selection? <span class="m">1</span>
</span></span><span class="line"><span class="cl">PIN changed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">1</span> - change PIN
</span></span><span class="line"><span class="cl"><span class="m">2</span> - unblock PIN
</span></span><span class="line"><span class="cl"><span class="m">3</span> - change Admin PIN
</span></span><span class="line"><span class="cl"><span class="m">4</span> - <span class="nb">set</span> the Reset Code
</span></span><span class="line"><span class="cl">Q - quit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your selection? Q
</span></span></code></pre></div><p>由於每次把 encryption subkey 移進 YubiKey 裡，本機上的私鑰就會消失，因此如果要設定第二個 YubiKey 時，就要用之前的備份檔重設本機的狀態：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --delete-secret-key &lt;MASTER-KEY-ID&gt;
</span></span><span class="line hl"><span class="cl">gpg2 --import &lt; &lt;MASTER-SECRECT-FILE&gt;</span></span></code></pre></div></div>

<p>緊接著，就可以移動 encryption subkey。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --edit-key &lt;MASTER-KEY-ID&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg&gt; toggle
</span></span><span class="line"><span class="cl">gpg&gt; key <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sec  rsa4096/&lt;MASTER-KEY-ID&gt;   created: 2017-01-01  expires: never
</span></span><span class="line"><span class="cl">ssb* rsa4096/&lt;ENCRYPT-KEY-ID&gt;  created: 2017-01-01  expires: 2027-01-01
</span></span><span class="line"><span class="cl"><span class="o">(</span>1<span class="o">)</span>  &lt;NAME&gt; &lt;EMAIL&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg&gt; keytocard
</span></span><span class="line"><span class="cl"> Signature key ....: <span class="o">[</span>none<span class="o">]</span>
</span></span><span class="line"><span class="cl"> Encryption key....: <span class="o">[</span>none<span class="o">]</span>
</span></span><span class="line"><span class="cl"> Authentication key: <span class="o">[</span>none<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please <span class="k">select</span> where to store the key:
</span></span><span class="line"><span class="cl">   <span class="o">(</span>2<span class="o">)</span> Encryption key
</span></span><span class="line"><span class="cl">Your selection? <span class="m">2</span></span></span></code></pre></div></div>

<p>然後產生 authentication 和 signature subkeys，不過這兩個主要是真的要拿來做正常的 OpenPGP 功能時才需要。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg&gt; addcardkey
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Signature key ....: <span class="o">[</span>none<span class="o">]</span>
</span></span><span class="line"><span class="cl"> Encryption key....: &lt;ENCRYPT-KEY-ID&gt;
</span></span><span class="line"><span class="cl"> Authentication key: <span class="o">[</span>none<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please <span class="k">select</span> the <span class="nb">type</span> of key to generate:
</span></span><span class="line"><span class="cl">   <span class="o">(</span>1<span class="o">)</span> Signature key
</span></span><span class="line"><span class="cl">   <span class="o">(</span>2<span class="o">)</span> Encryption key
</span></span><span class="line"><span class="cl">   <span class="o">(</span>3<span class="o">)</span> Authentication key
</span></span><span class="line"><span class="cl">Your selection? <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg&gt; addcardkey
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Signature key ....: &lt;SIGNATURE-KEY-ID&gt;
</span></span><span class="line"><span class="cl"> Encryption key....: &lt;ENCRYPT-KEY-ID&gt;
</span></span><span class="line"><span class="cl"> Authentication key: <span class="o">[</span>none<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please <span class="k">select</span> the <span class="nb">type</span> of key to generate:
</span></span><span class="line"><span class="cl">   <span class="o">(</span>1<span class="o">)</span> Signature key
</span></span><span class="line"><span class="cl">   <span class="o">(</span>2<span class="o">)</span> Encryption key
</span></span><span class="line"><span class="cl">   <span class="o">(</span>3<span class="o">)</span> Authentication key
</span></span><span class="line"><span class="cl">Your selection? <span class="m">3</span>
</span></span></code></pre></div><p>過程跟之前產生 encryption subkey 時差不多。最後存檔。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpg&gt; save
</span></span></code></pre></div><p>由於我們擔心歹徒如果入侵電腦，取得了你的使用者密碼，就可以趁你不注意時，利用插上的 YubiKey 來解密檔案。因此我們還要打開只有按下 YubiKey 上的按鈕才能解密的功能。不過如果歹徒取得了管理密碼，則他也可以把這個功能關掉。幸好 YubiKey 4 還有個選項是強制固定一定要按下按鈕，只有重新產生新的私鑰以後才能解除。以下就把這功能針對 3 個 subkeys 開啟：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ykman openpgp touch enc fixed
</span></span><span class="line hl"><span class="cl">ykman openpgp touch sig fixed
</span></span><span class="line hl"><span class="cl">ykman openpgp touch aut fixed</span></span></code></pre></div></div>

<p>做完這件事以後，把 <code>&lt;MASTER-SECRECT-FILE&gt;</code> 和 <code>&lt;REVOKE-FILE&gt;</code> 備份到一個平常不會插到電腦的地方，數年都不把他拿出來。然後把公鑰備份下來準備放到平常正常使用的電腦上。這個檔案會包含 master key，和之前產生的所有 subkeys 的公鑰。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --export &lt;MASTER-KEY-ID&gt; &gt; &lt;MASTER-PUBLIC-FILE&gt;</span></span></code></pre></div></div>

<p>假設你要把這些 keys 拿來做正常的 OpenPGP 用途的話，你可能也會想要把這些公鑰發布到 key servers 上讓大家都能看到，不過如果只是要用來加密自己的密碼，或許就不用這麼做了。畢竟如果有人擁有超越目前時代，從公鑰推出私鑰的計算能力，那麼公開公鑰總是有一定風險。當然，如果他要破解你電腦裡的密碼檔，就意謂著他必須先擁有存取你電腦資料的能力。而一旦他有這個能力，其實他也能獲取放在電腦上的公鑰。因此對抗擁有超越目前時代計算能力的人，就算不公開公鑰，可能也只是拖延了一點時間。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --keyserver hkps://hkps.pool.sks-keyservers.net --send-key &lt;MASTER-KEY-ID&gt;</span></span></code></pre></div></div>

<p>最後就可以把乾淨電腦裡的 GnuPG 資料全數銷毀：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">rm -rf ~/.gnupg</span></span></code></pre></div></div>

<p>在平常的電腦上，先重新編輯 <code>~/.gnupg/gpg.conf</code> 加入之前提到的設定，然後載入之前的公鑰。注意到，私鑰已經被放到安全的地方了，就不要再放進平常的電腦裡了。由於我們等等要用的 <code>pass</code> 主要是用 <code>gpg</code> 而不是 <code>gpg2</code>，所以也把公鑰載入到 <code>gpg</code> 裡。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">gpg2 --import &lt; &lt;MASTER-PUBLIC-FILE&gt;
</span></span><span class="line hl"><span class="cl">gpg  --import &lt; &lt;MASTER-PUBLIC-FILE&gt;</span></span></code></pre></div></div>

<p>如此一來 OpenPGP 就設定完成！！</p>
<h2 id="pass-the-standard-unix-password-manager">pass: the standard unix password manager</h2>
<h3 id="簡介-2">簡介</h3>
<p><a href="https://www.passwordstore.org/">pass</a> 是一個簡單的密碼管理系統，直接把密碼用 OpenPGP 加密的文字檔們來管理，每個密碼都是一個文字檔。因此也可以把整個密碼庫用 <a href="https://git-scm.com/">Git</a> 追蹤，方便同步以及檢視修改紀錄。不過為了搜尋方便，檔案名稱裡通常含有網站位置或甚至使用者名稱，而檔案名稱本身是沒有加密的，這也讓一些使用者<a href="https://www.reddit.com/r/linux/comments/5wcxrs/pass_gpg_encrypted_cli_password_manager_17/de9rhlb/">詬病</a>。</p>
<p>因此我們同時使用 <a href="https://github.com/roddhjav/pass-tomb">pass-tomb</a> 來將 pass 的密碼庫整個加密，他會利用 <a href="https://github.com/dyne/Tomb">Tomb</a> 來產生 <a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">LUKS</a> 加密檔，再把 pass 資料庫放在裡頭。</p>
<h3 id="安裝">安裝</h3>
<p>安裝最新版本的方法是分別到各自網站下載：</p>
<ul>
<li><a href="https://www.passwordstore.org/#download">pass</a></li>
<li><a href="https://github.com/dyne/Tomb/releases">Tomb</a></li>
<li><a href="https://github.com/roddhjav/pass-tomb/releases">pass-tomb</a></li>
</ul>
<p>然後各自解壓縮，並執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo make install</span></span></code></pre></div></div>

<p>同時安裝 pass 會用到的密碼產生器：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install pwgen</span></span></code></pre></div></div>

<h3 id="設定">設定</h3>
<p>首先建立 pass-tomb：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pass tomb &lt;MASTER-KEY-ID&gt;</span></span></code></pre></div></div>

<p>這裡要插入 YubiKey 並且按指示輸入使用者密碼。然後等很久，就能建立完成。</p>
<p>緊接著打開密碼庫，並建立 Git repository。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pass open
</span></span><span class="line hl"><span class="cl">pass git init</span></span></code></pre></div></div>

<p>要關閉時則執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pass close</span></span></code></pre></div></div>

<h3 id="使用">使用</h3>
<p>在 pass-tomb 打開的狀態下，可以使用一些指令管理密碼。</p>
<p>例如新增新的密碼，由於加密只需要公鑰，就算沒有 YubiKey 也能完成。如果想加入其他像是使用者名稱或是安全問題等筆記，可以加上 <code>-m</code> 參數，編輯多行，平常複製密碼預設只會複製第一行。或者也可以事後執行 <code>pass edit</code>，不過這就需要插入私鑰才能解密並編輯了。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pass insert social/facebook
</span></span><span class="line"><span class="cl">Enter password <span class="k">for</span> social/facebook: ************</span></span></code></pre></div></div>

<p>也可以自動產生密碼：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># generate a password of length 15</span>
</span></span><span class="line hl"><span class="cl">pass generate social/facebook <span class="m">15</span></span></span></code></pre></div></div>

<p>其他指令，詳請可執行 <code>man pass</code>。</p>
<ul>
<li>移除密碼： <code>pass rm &lt;PATH&gt;</code></li>
<li>複製密碼： <code>pass -c &lt;PATH&gt;</code></li>
<li>印出密碼： <code>pass &lt;PATH&gt;</code></li>
</ul>
<h2 id="用-openpgp-key-充當-ssh-key-進行遠端登入">用 OpenPGP Key 充當 SSH Key 進行遠端登入</h2>
<h3 id="設定-1">設定</h3>
<p>感覺很多 keys 實在很麻煩，而既然已經有那麼安全的 OpenPGP keys 可用，我們也想直接用當初放在 YubiKey 上的 authentication subkey 來<a href="https://incenp.org/notes/2014/gnupg-for-ssh-authentication.html">取代原本在用的 SSH key</a>。首先編輯 <code>~/.gnupg/gpg-agent.conf</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># ~/.gnupg/gpg-agent.conf</span>
</span></span><span class="line"><span class="cl">enable-ssh-support
</span></span><span class="line"><span class="cl">pinentry-program /usr/bin/pinentry-curses
</span></span><span class="line"><span class="cl">default-cache-ttl <span class="m">60</span>
</span></span><span class="line"><span class="cl">max-cache-ttl <span class="m">120</span>
</span></span></code></pre></div><p>緊接著，在 <code>~/.bashrc</code> 裡加上下面幾行，以免要輸入使用者密碼時，界面無法在正確的 terminal 顯示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GPG_TTY</span><span class="o">=</span><span class="sb">`</span>tty<span class="sb">`</span>
</span></span><span class="line"><span class="cl">gpg-connect-agent updatestartuptty /bye &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nb">unset</span> SSH_AGENT_PID
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">gnupg_SSH_AUTH_SOCK_by</span><span class="k">:-</span><span class="nv">0</span><span class="si">}</span><span class="s2">&#34;</span> -ne <span class="nv">$$</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">export</span> <span class="nv">SSH_AUTH_SOCK</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">HOME</span><span class="si">}</span><span class="s2">/.gnupg/S.gpg-agent.ssh&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></div><p>重新登入後，在 YubiKey 插入的情況下執行 <code>ssh-add -L</code> 應該就會看到 authentication subkeys 的 SSH public key 的長相，可以用來寫入 <code>~/.ssh/authorized_keys</code>。這樣就可以用 OpenPGP keys 來登入 SSH 了。</p>
<h3 id="讓遠端機器也能用這把-key-登入其他機器">讓遠端機器也能用這把 Key 登入其他機器</h3>
<p>當然，如果你還記得的話，這把 authentication subkey 只在 YubiKey 上有，連我們自己都沒有私鑰的備份。因此遠端機器無法直接使用這把 SSH key。不過其實可以用 <a href="https://heipei.github.io/2015/02/26/SSH-Agent-Forwarding-considered-harmful/">SSH agent forwarding</a> 的功能讓遠端機器使用這把 key：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ssh -A &lt;HOST&gt;</span></span></code></pre></div></div>

<p>注意不管從哪裡要啟用這把 key，都還是要按下 YubiKey 上的按鈕才行。不過像這樣做 SSH agent forwarding 的話，還是會有風險。畢竟如果有人能存取遠端電腦上你分享出去的 agent，就能使用你的 key 了。當然，這樣的風險已經比直接把 key 放在遠端電腦上小了。</p>
<h2 id="其他-yubikey-的功能">其他 YubiKey 的功能</h2>
<p>除此之外，YubiKey 還可以用來啟用 U2F 二次驗證，目前像是 <a href="https://support.google.com/accounts/answer/6103523">Google</a>、<a href="https://www.facebook.com/notes/facebook-security/security-key-for-safer-logins-with-a-touch/10154125089265766/">Facebook</a> 之類的大網站都有支援。簡單說，啟用了以後，如果在新電腦登入的話，同時還要插入 YubiKey 才能登入，光有密碼是無法登入的。</p>
<p>但是不少網站目前並不支援 U2F，只支援 <a href="https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm">OATH TOTP</a>，也就是平常大家可能會安裝 <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Google Authenticator</a> 或者 <a href="https://play.google.com/store/apps/details?id=com.azure.authenticator&amp;hl=en">Microsoft Authenticator</a>，然後在新電腦登入時除了輸入密碼，還要輸入上面的隨時間會不一樣的數字。</p>
<p>YubiKey 同樣可以使用 <a href="https://www.yubico.com/products/services-software/download/yubico-authenticator/">Yubico Authenticator</a> 來支援這個功能，不過能夠支援的網站數有所極限。</p>
<p>其他還有記憶一個密碼幫你輸入，以及其他更複雜的功能，不過就沒有研究了。詳情可以參考：〈<a href="https://ruimarinho.gitbooks.io/yubikey-handbook/">Yubikey Handbook</a>〉。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2017/padlocks.jpg" alt="Locks" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>Scrapy Cloud &#43; Scrapy 網路爬蟲</title>
      <link>https://city.shaform.com/zh/2017/05/13/scrapy-cloud/</link>
      <pubDate>Sat, 13 May 2017 16:10:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2017/05/13/scrapy-cloud/</guid>
      <description>前言：取得研究資料集 最近聽到不少擅長 Deep Learning 的朋友買了顯示卡準備自己做起研究，讓人也十分受到激勵。不過平常想自己做研究時，常常會因為沒有適當的資</description>
      <content:encoded><![CDATA[<h2 id="前言取得研究資料集">前言：取得研究資料集</h2>
<p>最近聽到不少擅長 Deep Learning 的朋友買了<a href="https://www.nvidia.com/en-us/geforce/products/10series/geforce-gtx-1080-ti/">顯示卡</a>準備自己做起研究，讓人也十分受到激勵。不過平常想自己做研究時，常常會因為沒有適當的資料集而窒礙難行。尤其不少學術資料集似乎需要由研究單位出面才能取得，使得默默無名的個人研究者深感惶恐，此時撰寫網路爬蟲蒐集資料便成為必要的麻煩。無怪乎本站的<a href="/zh/2016/02/28/scrapy/">〈Scrapy 筆記〉</a>似乎也一直很熱門。</p>
<p>只是平常在學校有龐大學術網路資源的支持，撰寫爬蟲還算可行。但自己一個人寫爬蟲就很辛苦了。總會擔心 IP 被阻擋要怎麼辦，還有電腦開太久，到處亂爬，會不會因此被駭客攻擊等問題。</p>
<p>就在最近，得知有 <a href="https://scrapinghub.com/scrapy-cloud/">Scrapy Cloud</a> 這樣方便的服務，可以用來架設自己的爬蟲，感覺相當方便。於是本文就以 <a href="https://www.ptt.cc/bbs/Beauty/index.html">PTT Beauty 板</a> 為範例，紀錄利用 Scrapy Cloud 撰寫爬蟲的過程。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2019/cobweb.jpg" alt="Coweb" />
    </div>
    
  </figure>
</div>

<h2 id="環境設置">環境設置</h2>
<p>這次同樣使用 <a href="https://docs.python.org/3/library/venv.html">pyvenv</a> 創立虛擬環境，好安裝自己的 Python 套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pyvenv-3.5 env
</span></span><span class="line hl"><span class="cl"><span class="nb">source</span> env/bin/activate
</span></span><span class="line hl"><span class="cl">pip install -U pip</span></span></code></pre></div></div>

<p>此外，也安裝 <a href="https://scrapy.org/">Scrapy</a>，以及本次實驗會用到的加密套件等等。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip install <span class="nv">Scrapy</span><span class="o">==</span>1.3.3 <span class="nv">cryptography</span><span class="o">==</span>1.8.1 <span class="nv">html2text</span><span class="o">==</span>2016.5.29</span></span></code></pre></div></div>

<h3 id="scrapy-cloud">Scrapy Cloud</h3>
<p>Scrapy Cloud 其實就是 <a href="https://scrapy.org/">Scrapy</a> 背後的公司 <a href="https://scrapinghub.com/">Scrapinghub</a> 所推出的線上爬蟲服務。可以把自己寫好的爬蟲上傳到遠端的機器執行。由於 IP 偶爾就會換一次，所以可以大幅降低被阻擋的風險。在筆者撰文的當下，每個人的帳號都有一個免費的 slot (1 GB RAM) 可以用來跑爬蟲，爬下來的資料可供存放一個星期，個人使用已經相當足夠了。如果有更高的需求，也可用 $9/month 的價格購買多的 slots，或者購買可以每個 request 都使用不同 IP，大幅降低被阻擋風險的強大 proxy 服務。</p>
<p>創建完帳號後，首先可以在 <a href="https://app.scrapinghub.com/account/apikey">API Key</a> 頁面取得自己的 <code>SH_APIKEY</code>，到時上傳爬蟲時會用到。然後可以建立一個 project，並在 project 網址裡取得 <code>SHUB_PROJECT_ID</code>:</p>
<pre><code>https://app.scrapinghub.com/p/&lt;SHUB_PROJECT_ID&gt;/jobs
</code></pre>
<p>最後也安裝專用的 <a href="https://github.com/scrapinghub/shub">shub</a> 部署工具。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip install shub</span></span></code></pre></div></div>

<h3 id="backblaze-b2-cloud-storage">Backblaze B2 Cloud Storage</h3>
<p>Scrapy Cloud 雖然方便，不過並不支援像圖片一般大檔案的儲存。平常在學術或者企業的研究單位裡，可能有類似 <a href="https://aws.amazon.com/s3/">S3</a> 之類的儲存方案。不過一般小資女，小資男等等可能就沒有辦法負擔了。<a href="https://www.backblaze.com/b2/cloud-storage.html">Backblaze B2 Cloud Storage</a> 在筆者撰文的當下，有著 $0.005/GB/month 的低廉價格，而且上傳免費，又有 10 GB 的免費空間，而且如果只是要使用免費的部份，也不用提供付款資料，不怕被亂收錢。對於個人爬蟲的應用來說，已經相當足夠了。</p>
<p>註冊以後，可以在 <a href="https://secure.backblaze.com/b2_buckets.htm">Buckets</a> 頁面取得 Account ID 以及 Application Key，以下稱為 <code>B2_ACCOUNT_ID</code> 以及 <code>B2_APPLICATION_KEY</code>，此外同時也可以創立一個 bucket 來存放檔案，以下就把這個 bucket 稱作 <code>storage-ptt-beauty</code>。</p>
<p>最後可以安裝 <a href="https://github.com/Backblaze/B2_Command_Line_Tool">b2</a> 套件，測試檔案的操作。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip install b2</span></span></code></pre></div></div>

<h2 id="撰寫爬蟲">撰寫爬蟲</h2>
<p>於是就開始撰寫爬蟲！</p>
<p>首先創立專案：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy startproject ptt_beauty</span></span></code></pre></div></div>

<p>啟用自動連線延遲：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/settings.py</span>
</span></span><span class="line"><span class="cl"><span class="n">AUTOTHROTTLE_ENABLED</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="n">AUTOTHROTTLE_START_DELAY</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">AUTOTHROTTLE_MAX_DELAY</span> <span class="o">=</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl"><span class="n">AUTOTHROTTLE_TARGET_CONCURRENCY</span> <span class="o">=</span> <span class="mf">1.0</span>
</span></span></code></pre></div><p>像上次一樣定義一些想要抓取的項目，包含本文和推文等等，但多增加檔案的欄位 <code>files</code> 和 <code>file_urls</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/items.py</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PostItem</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Item</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">author</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">date</span> <span class="s1">&#39;= scrapy.Field:()&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">comments</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">score</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_urls</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">files</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span></code></pre></div><p>接著創立爬蟲：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy genspider beauty_images ptt.cc</span></span></code></pre></div></div>

<p>接著就編輯 <code>&lt;root_dir&gt;/ptt_beauty/spiders/beauty_images.py</code> 實際撰寫爬蟲程式了。</p>
<p>有了上次的經驗，這次寫起來相當順利。首先設定起始的網址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/spiders/beauty_images.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scrapy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BeautyImagesSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;beauty_images&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ptt.cc&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;https://www.ptt.cc/bbs/Beauty/index.html&#39;</span><span class="p">,</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_pages</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_max_pages</span> <span class="o">=</span> <span class="n">max_pages</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_pages</span> <span class="o">=</span> <span class="mi">0</span>
</span></span></code></pre></div><p>然後照抄以前的程式，不過移除 18 歲的部份：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/spiders/beauty_images.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ptt_beauty.items</span> <span class="kn">import</span> <span class="n">PostItem</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BeautyImagesSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_pages</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">href</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.r-ent &gt; div.title &gt; a::attr(href)&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">urljoin</span><span class="p">(</span><span class="n">href</span><span class="o">.</span><span class="n">extract</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">parse_post</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pages</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">_max_pages</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">next_page</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;//div[@id=&#34;action-bar-container&#34;]//a[contains(text(), &#34;上頁&#34;)]/@href&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">next_page</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">urljoin</span><span class="p">(</span><span class="n">next_page</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;follow </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="k">yield</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;no next page&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;max pages reached&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span> <span class="o">=</span> <span class="n">PostItem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//meta[@property=&#34;og:title&#34;]/@content&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;author&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//div[@class=&#34;article-metaline&#34;]/span[text()=&#34;作者&#34;]/following-sibling::span[1]/text()&#39;</span><span class="p">)[</span>
</span></span><span class="line"><span class="cl">                <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">datetime_str</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//div[@class=&#34;article-metaline&#34;]/span[text()=&#34;時間&#34;]/following-sibling::span[1]/text()&#39;</span><span class="p">)[</span>
</span></span><span class="line"><span class="cl">                <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">datetime_str</span><span class="p">,</span> <span class="s1">&#39;</span><span class="si">%a</span><span class="s1"> %b </span><span class="si">%d</span><span class="s1"> %H:%M:%S %Y&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">converter</span> <span class="o">=</span> <span class="n">html2text</span><span class="o">.</span><span class="n">HTML2Text</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">converter</span><span class="o">.</span><span class="n">ignore_links</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">converter</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//div[@id=&#34;main-content&#34;]&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">comments</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_score</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">comment</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//div[@class=&#34;push&#34;]&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">push_tag</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;span.push-tag::text&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">push_user</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;span.push-userid::text&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">push_content</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;span.push-content::text&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="s1">&#39;推&#39;</span> <span class="ow">in</span> <span class="n">push_tag</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">score</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="s1">&#39;噓&#39;</span> <span class="ow">in</span> <span class="n">push_tag</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">total_score</span> <span class="o">+=</span> <span class="n">score</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">comments</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;user&#39;</span><span class="p">:</span> <span class="n">push_user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;content&#39;</span><span class="p">:</span> <span class="n">push_content</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;score&#39;</span><span class="p">:</span> <span class="n">score</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;comments&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">comments</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_score</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">item</span>
</span></span></code></pre></div><p>在 <code>&lt;root_dir&gt;</code> 根目錄（有 <code>scrapy.cfg</code> 的目錄）執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy crawl beauty_images -o test.jl</span></span></code></pre></div></div>

<p>測試確實可以抓到文章。</p>
<h2 id="抓取圖片">抓取圖片</h2>
<p>由於我們實際上只想要抓有圖片的文章，所以將程式改寫。同時為了方便起見，只抓 <code>imgur.com</code> 上的 <code>.jpg</code> 圖片。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/spiders/beauty_images.py</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BeautyImagesSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">        <span class="n">file_urls</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//a[contains(@href, &#34;imgur.com&#34;)]/@href&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">file_urls</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">file_urls</span> <span class="o">=</span> <span class="p">[</span><span class="n">url</span> <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">file_urls</span> <span class="k">if</span> <span class="n">url</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.jpg&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">file_urls</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">item</span><span class="p">[</span><span class="s1">&#39;file_urls&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">file_urls</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="n">item</span>
</span></span></code></pre></div><p>然後先按照 <a href="https://doc.scrapy.org/en/latest/topics/media-pipeline.html">Downloading and processing files and images</a> 的教學啟用 Files Pipeline 做測試：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/spiders/beauty_images.py</span>
</span></span><span class="line"><span class="cl"><span class="n">ITEM_PIPELINES</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="s1">&#39;scrapy.pipelines.files.FilesPipeline&#39;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">FILES_STORE</span> <span class="o">=</span> <span class="s1">&#39;images&#39;</span>
</span></span></code></pre></div><p>再次在 <code>&lt;root_dir&gt;</code> 根目錄（有 <code>scrapy.cfg</code> 的目錄）執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy crawl beauty_images -o test.jl</span></span></code></pre></div></div>

<p>應該會看到在 <code>&lt;root_dir&gt;/images/full/</code> 底下出現不少圖片。</p>
<p>假設只是要在本機上抓圖，這樣就行了，不過我們想在 Scrapy Cloud 上，把圖傳到 B2 空間，因此還得進行一些修改。</p>
<h2 id="上傳-b2">上傳 B2</h2>
<p>首先寫好上傳的串接程式，這裡因為我主要是想抓圖，所以如果 B2 連不上就乾脆用 <code>CloseSpider</code> 把整個爬蟲關掉了。同時因為上傳不用用錢，獲取檔案資訊卻有限制，所以乾脆 <code>stat_file</code> 就讓他永遠回傳空的，反正遇到相同檔案就重新上傳就好。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/spiders/pipelines.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">b2.api</span> <span class="kn">import</span> <span class="n">B2Api</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">b2.upload_source</span> <span class="kn">import</span> <span class="n">UploadSourceBytes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scrapy.exceptions</span> <span class="kn">import</span> <span class="n">CloseSpider</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">B2FilesStore</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">B2_ACCOUNT_ID</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="n">B2_APPLICATION_KEY</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">uri</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">assert</span> <span class="n">uri</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;b2://&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">bucket</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">prefix</span> <span class="o">=</span> <span class="n">uri</span><span class="p">[</span><span class="mi">5</span><span class="p">:]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">api</span> <span class="o">=</span> <span class="n">B2Api</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">authorize_account</span><span class="p">(</span><span class="s1">&#39;production&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">B2_ACCOUNT_ID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                       <span class="bp">self</span><span class="o">.</span><span class="n">B2_APPLICATION_KEY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_b2_bucket</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="p">(</span><span class="ne">AssertionError</span><span class="p">,</span> <span class="ne">Exception</span><span class="p">)</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">raise</span> <span class="n">CloseSpider</span><span class="p">(</span><span class="s1">&#39;could not initialize B2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">stat_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">info</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_get_b2_bucket</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">api</span><span class="o">.</span><span class="n">get_bucket_by_name</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">bucket</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_upload_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">file_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">source</span> <span class="o">=</span> <span class="n">UploadSourceBytes</span><span class="p">(</span><span class="n">buf</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">upload</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">file_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">persist_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">info</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;Upload file to B2 storage&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">key_name</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">%s%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">prefix</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">buf</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">threads</span><span class="o">.</span><span class="n">deferToThread</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_upload_file</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                     <span class="n">buf</span><span class="o">=</span><span class="n">buf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                     <span class="n">file_name</span><span class="o">=</span><span class="n">key_name</span><span class="p">)</span>
</span></span></code></pre></div><p>緊接著我們修改原本 scrapy 的 <a href="https://github.com/scrapy/scrapy/blob/1.3/scrapy/pipelines/files.py">FilesPipeline</a> 變成 <code>EncryptedFilesPipeline</code>。目的是為了讓他支援加密以及我們的 <code>B2FilesStore</code>。</p>
<p>之所以要加密的原因是為了怕鄉民上傳一些奇怪的圖片導致我們抓到怪圖上傳，可能造成停權之類的奇怪後果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/spiders/pipelines.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.fernet</span> <span class="kn">import</span> <span class="n">Fernet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scrapy.pipelines.files</span> <span class="kn">import</span> <span class="n">FilesPipeline</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scrapy.utils.misc</span> <span class="kn">import</span> <span class="n">load_object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">EncryptedFilesPipeline</span><span class="p">(</span><span class="n">FilesPipeline</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">store_uri</span><span class="p">,</span> <span class="n">download_func</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">settings</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">store_uri</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                         <span class="n">download_func</span><span class="o">=</span><span class="n">download_func</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                         <span class="n">settings</span><span class="o">=</span><span class="n">settings</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cls_name</span> <span class="o">=</span> <span class="s2">&#34;EncryptedFilesPipeline&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">resolve</span> <span class="o">=</span> <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_key_for_pipe</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">base_class_name</span><span class="o">=</span><span class="n">cls_name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">settings</span><span class="o">=</span><span class="n">settings</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">encryption_key</span> <span class="o">=</span> <span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">resolve</span><span class="p">(</span><span class="s1">&#39;FILES_ENCRYPTION_KEY&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">encryption_key</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cipher</span> <span class="o">=</span> <span class="n">Fernet</span><span class="p">(</span><span class="n">encryption_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">cipher</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@classmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">from_settings</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">settings</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">cls</span><span class="o">.</span><span class="n">STORE_SCHEMES</span> <span class="o">=</span> <span class="bp">cls</span><span class="o">.</span><span class="n">_load_components</span><span class="p">(</span><span class="n">settings</span><span class="p">,</span> <span class="s1">&#39;FILES_STORES&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">b2store</span> <span class="o">=</span> <span class="bp">cls</span><span class="o">.</span><span class="n">STORE_SCHEMES</span><span class="p">[</span><span class="s1">&#39;b2&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">b2store</span><span class="o">.</span><span class="n">B2_ACCOUNT_ID</span> <span class="o">=</span> <span class="n">settings</span><span class="p">[</span><span class="s1">&#39;B2_ACCOUNT_ID&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">b2store</span><span class="o">.</span><span class="n">B2_APPLICATION_KEY</span> <span class="o">=</span> <span class="n">settings</span><span class="p">[</span><span class="s1">&#39;B2_APPLICATION_KEY&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">store_uri</span> <span class="o">=</span> <span class="n">settings</span><span class="p">[</span><span class="s1">&#39;FILES_STORE&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">cls</span><span class="p">(</span><span class="n">store_uri</span><span class="p">,</span> <span class="n">settings</span><span class="o">=</span><span class="n">settings</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">_load_components</span><span class="p">(</span><span class="n">settings</span><span class="p">,</span> <span class="n">setting_prefix</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">conf</span> <span class="o">=</span> <span class="n">without_none_values</span><span class="p">(</span><span class="n">settings</span><span class="o">.</span><span class="n">getwithbase</span><span class="p">(</span><span class="n">setting_prefix</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">conf</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">load_object</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">except</span> <span class="n">NotConfigured</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">d</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">file_downloaded</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">info</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">file_path</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="o">=</span><span class="n">response</span><span class="p">,</span> <span class="n">info</span><span class="o">=</span><span class="n">info</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">cipher</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">buf</span> <span class="o">=</span> <span class="n">BytesIO</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cipher</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">buf</span> <span class="o">=</span> <span class="n">BytesIO</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">checksum</span> <span class="o">=</span> <span class="n">md5sum</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">buf</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">store</span><span class="o">.</span><span class="n">persist_file</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">checksum</span>
</span></span></code></pre></div><p>接下來可以在 <code>&lt;root_dir&gt;/ptt_beauty/settings.py</code> 填入以下設定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/settings.py</span>
</span></span><span class="line"><span class="cl"><span class="n">ITEM_PIPELINES</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;ptt_beauty.pipelines.EncryptedFilesPipeline&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">FILES_STORES</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;</span><span class="p">:</span> <span class="s1">&#39;scrapy.pipelines.files.FSFilesStore&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;file&#39;</span><span class="p">:</span> <span class="s1">&#39;scrapy.pipelines.files.FSFilesStore&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;s3&#39;</span><span class="p">:</span> <span class="s1">&#39;scrapy.pipelines.files.S3FilesStore&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;b2&#39;</span><span class="p">:</span> <span class="s1">&#39;ptt_beauty.pipelines.B2FilesStore&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然後填入對應的密鑰做測試，不過測試完這些設定還是不要直接寫在檔案裡比較好。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/settings.py</span>
</span></span><span class="line"><span class="cl"><span class="n">FILES_ENCRYPTION_KEY</span> <span class="o">=</span> <span class="s1">&#39;&lt;YOUR_ENCRYPT_KEY&gt;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">FILES_STORE</span> <span class="o">=</span> <span class="s1">&#39;b2://storage-ptt-beauty/ptt-beauty/images/&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">B2_ACCOUNT_ID</span> <span class="o">=</span> <span class="s1">&#39;&lt;B2_ACCOUNT_ID&gt;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">B2_APPLICATION_KEY</span> <span class="o">=</span> <span class="s1">&#39;&lt;B2_APPLICATION_KEY&gt;&#39;</span>
</span></span></code></pre></div><p>其中 <code>storage-ptt-beauty</code> 是在 B2 上創建的 bucket 名稱，後面的 <code>ptt-beauty/images/</code> 則是自行指定要存放圖片的根目錄。</p>
<p>而檔案加密的密鑰 <code>YOUR_ENCRYPT_KEY</code> 可以這樣產生：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.fernet</span> <span class="kn">import</span> <span class="n">Fernet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Fernet</span><span class="o">.</span><span class="n">generate_key</span><span class="p">()</span>
</span></span></code></pre></div><p>加密完的檔案可以這樣解密：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.fernet</span> <span class="kn">import</span> <span class="n">Fernet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cipher</span> <span class="o">=</span> <span class="n">Fernet</span><span class="p">(</span><span class="s1">&#39;&lt;YOUR_ENCRYPT_KEY&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;&lt;INPUT_PATH&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;&lt;OUTPUT_PATH&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cipher</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">infile</span><span class="o">.</span><span class="n">read</span><span class="p">()))</span>
</span></span></code></pre></div><p>再次在 <code>&lt;root_dir&gt;</code> 根目錄（有 <code>scrapy.cfg</code> 的目錄）執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy crawl beauty_images -o test.jl</span></span></code></pre></div></div>

<p>應該會看到在 B2 裡出現不少加密檔案。</p>
<h2 id="部署到-scrapy-cloud">部署到 Scrapy Cloud</h2>
<p>最後的部署，首先新增相依檔案 <code>requirements.txt</code>：</p>
<pre><code>b2==0.7.2
cryptography==1.8.1
html2text==2016.5.29
</code></pre>
<p>再新增設定檔 <code>scrapinghub.yml</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">projects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;PROjECT_ID&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">stacks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="l">scrapy:1.3-py3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">requirements_file</span><span class="p">:</span><span class="w"> </span><span class="l">requirements.txt</span><span class="w">
</span></span></span></code></pre></div><p>接著將整個資料夾的相關程式碼和設定檔都 commit 到 git repository 裡。然後在該資料夾執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">shub login
</span></span><span class="line hl"><span class="cl">shub deploy</span></span></code></pre></div></div>

<p>輸入相應的 <code>SH_APIKEY</code> 即可上傳。</p>
<p>最後則在 project 的 spiders settings <code>https://app.scrapinghub.com/p/&lt;SHUB_PROJECT_ID&gt;/job-settings/standard</code> 裡，把各種密鑰輸進去：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">FILES_ENCRYPTION_KEY</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">FILES_STORE</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">B2_ACCOUNT_ID</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">B2_APPLICATION_KEY</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span>
</span></span></code></pre></div><p>如此就行了！可在 Dashboard 執行上傳的爬蟲。</p>
<h2 id="定期上傳抓取文章到-b2">定期上傳抓取文章到 B2</h2>
<p>Scrapy Cloud 也支援排程執行，所以可以每天都到板上抓圖。然而雖然做完以上步驟就會把下載的圖片上傳到 B2，可是抓取的文章還是在 Scrapy Cloud 裡頭。幸好 Scrapy Cloud 也提供定期執行自訂 script 的功能。所以我們也可以另外寫個程式把抓好的文章上傳到 B2 上。</p>
<p>由於 script 不像 spider 會自動讀取 project settings，我們先自行寫一個讀取的函式，這樣就可以在 script 裡讀取在 Scrapy Cloud 上設定的參數：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/utils.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scrapy.utils.project</span> <span class="kn">import</span> <span class="n">get_project_settings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_shub_project_settings</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">settings</span> <span class="o">=</span> <span class="n">get_project_settings</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">shub_settings</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;SHUB_SETTINGS&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">settings</span><span class="o">.</span><span class="n">setdict</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">shub_settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;project_settings&#39;</span><span class="p">,</span> <span class="p">{}),</span>
</span></span><span class="line"><span class="cl">        <span class="n">priority</span><span class="o">=</span><span class="s1">&#39;project&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">settings</span>
</span></span></code></pre></div><p>除此之外也順便新增一些方便處理 B2 上傳的函式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/utils.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">b2.upload_source</span> <span class="kn">import</span> <span class="n">UploadSourceBytes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">split_bucket_prefix</span><span class="p">(</span><span class="n">uri</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">uri</span><span class="p">[</span><span class="mi">5</span><span class="p">:]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">upload_file</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">file_name</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">source</span> <span class="o">=</span> <span class="n">UploadSourceBytes</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket</span><span class="o">.</span><span class="n">upload</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">file_name</span><span class="p">)</span>
</span></span></code></pre></div><p>最後就可以實際實做抓取資料的程式了，首先定義執行參數。</p>
<p>新增的 project settings 包含：</p>
<ul>
<li><code>&lt;SH_APIKEY&gt;</code>: 就是之前提到的 Scrapy Cloud 的 API Key</li>
<li><code>&lt;SHUB_PROJECT_ID&gt;</code>: 本次部屬到 Scrapy Cloud 的 project ID</li>
<li><code>&lt;ITEMS_STORE&gt;</code>: 儲存文章的地點，例如 <code>b2://storage-ptt-beauty/ptt-beauty/items/</code></li>
</ul>
<p>同樣在 project 的 spiders settings <code>https://app.scrapinghub.com/p/&lt;SHUB_PROJECT_ID&gt;/job-settings/standard</code> 裡，把他們輸進去。</p>
<p>另外可以指定要抓取的 spider 名稱，以本例來說，只有 <code>beauty_images</code> 一種。<code>--delete</code> 參數則是指定抓取完後，是否要把 Scrapy Cloud 上對應的 job 順便刪除，以免下次重複上傳。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/bin/upload_items.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ptt_beauty.utils</span> <span class="kn">import</span> <span class="n">get_shub_project_settings</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">parse_args</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">settings</span> <span class="o">=</span> <span class="n">get_shub_project_settings</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="vm">__doc__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--api-key&#39;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;SH_APIKEY&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--project-id&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">default</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;SHUB_PROJECT_ID&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--b2-account-id&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">default</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;B2_ACCOUNT_ID&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--b2-application-key&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">default</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;B2_APPLICATION_KEY&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--b2-path&#39;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;ITEMS_STORE&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--delete&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s1">&#39;store_true&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;spider_name&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">nargs</span><span class="o">=</span><span class="s1">&#39;+&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">help</span><span class="o">=</span><span class="s1">&#39;Spider name to get info from.&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">args</span><span class="o">.</span><span class="n">b2_path</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;b2://&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">args</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="s1">&#39;__main__&#39;</span> <span class="o">==</span> <span class="vm">__name__</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">(</span><span class="o">**</span><span class="nb">vars</span><span class="p">(</span><span class="n">parse_args</span><span class="p">()))</span>
</span></span></code></pre></div><p>最後則是主程式，先用 <code>ScrapinghubClient</code> 列出需要處理的 jobs。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/bin/upload_items.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scrapinghub</span> <span class="kn">import</span> <span class="n">ScrapinghubClient</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">api_key</span><span class="p">,</span> <span class="n">project_id</span><span class="p">,</span> <span class="n">spider_name</span><span class="p">,</span> <span class="n">b2_account_id</span><span class="p">,</span> <span class="n">b2_application_key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="n">b2_path</span><span class="p">,</span> <span class="n">delete</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">client</span> <span class="o">=</span> <span class="n">ScrapinghubClient</span><span class="p">(</span><span class="n">api_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">project</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">get_project</span><span class="p">(</span><span class="n">project_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">spider_name</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">spider</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="n">spiders</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">job_list</span> <span class="o">=</span> <span class="n">spider</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">list</span><span class="p">(</span><span class="n">state</span><span class="o">=</span><span class="s1">&#39;finished&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">keys</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">job</span> <span class="ow">in</span> <span class="n">job_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="s1">&#39;items&#39;</span> <span class="ow">in</span> <span class="n">job</span> <span class="ow">and</span> <span class="n">job</span><span class="p">[</span><span class="s1">&#39;items&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">keys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">job</span><span class="p">[</span><span class="s1">&#39;key&#39;</span><span class="p">])</span>
</span></span></code></pre></div><p>緊接著，把下載的文章用 gzip 壓縮後，上傳到指定的位置上，並順便刪除上傳完的 jobs：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/bin/upload_items.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gzip</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">b2.api</span> <span class="kn">import</span> <span class="n">B2Api</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ptt_beauty.utils</span> <span class="kn">import</span> <span class="n">split_bucket_prefix</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ptt_beauty.utils</span> <span class="kn">import</span> <span class="n">upload_file</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">api_key</span><span class="p">,</span> <span class="n">project_id</span><span class="p">,</span> <span class="n">spider_name</span><span class="p">,</span> <span class="n">b2_account_id</span><span class="p">,</span> <span class="n">b2_application_key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="n">b2_path</span><span class="p">,</span> <span class="n">delete</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket_name</span><span class="p">,</span> <span class="n">root</span> <span class="o">=</span> <span class="n">split_bucket_prefix</span><span class="p">(</span><span class="n">b2_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">spider_name</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">keys</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">bucket</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">b2_api</span> <span class="o">=</span> <span class="n">B2Api</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">b2_api</span><span class="o">.</span><span class="n">authorize_account</span><span class="p">(</span><span class="s1">&#39;production&#39;</span><span class="p">,</span> <span class="n">b2_account_id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                         <span class="n">b2_application_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">bucket</span> <span class="o">=</span> <span class="n">b2_api</span><span class="o">.</span><span class="n">get_bucket_by_name</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">job</span> <span class="o">=</span> <span class="n">spider</span><span class="o">.</span><span class="n">jobs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">job</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">out</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">with</span> <span class="n">gzip</span><span class="o">.</span><span class="n">GzipFile</span><span class="p">(</span><span class="n">fileobj</span><span class="o">=</span><span class="n">out</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">job</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">iter</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">                            <span class="n">line</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">                            <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="n">content</span> <span class="o">=</span> <span class="n">out</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="n">file_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                             <span class="n">key</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;.jl.gz&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">upload_file</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">file_name</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">delete</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">job</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                        <span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;job </span><span class="si">{}</span><span class="s1"> deleted&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span></span></code></pre></div><p>然後在 <code>setup.py</code> 新增 script 的位置 <code>bin/upload_items.py</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt_beauty/setup.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Automatically created by: shub deploy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">find_packages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span>         <span class="o">=</span> <span class="s1">&#39;project&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span>      <span class="o">=</span> <span class="s1">&#39;1.0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">packages</span>     <span class="o">=</span> <span class="n">find_packages</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">scripts</span>      <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;bin/upload_items.py&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry_points</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;scrapy&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;settings = ptt_beauty.settings&#39;</span><span class="p">]},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>新增相依檔案 <code>requirements.txt</code> 中的一行：</p>
<pre><code>scrapinghub==2.0.0
</code></pre>
<p>緊接著上傳更新的程式：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">shub deploy</span></span></code></pre></div></div>

<p>最後就能在 Dashboard 上執行 script 了，記得在 Arguments 欄位填上 <code>beauty_images</code> 等參數。</p>
<p><img src="/images/upload_items.png" alt="upload_items.py"></p>
<h2 id="結語">結語</h2>
<p>如此一來就能順利的每天抓文章和圖了，其他像是偵測不要抓到同樣的文章等等的功能就請各位自行研究了。</p>
<p>這次實驗所用到的程式碼按照慣例放在 GitHub 上面供參考：<a href="https://github.com/shaform/ptt-beauty">https://github.com/shaform/ptt-beauty</a>。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>生成對抗網路 - Generative Adversarial Networks</title>
      <link>https://city.shaform.com/zh/2017/04/04/generative-adversarial-networks/</link>
      <pubDate>Tue, 04 Apr 2017 15:37:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2017/04/04/generative-adversarial-networks/</guid>
      <description>前言 記得最早聽說 Generative Adversarial Networks 似乎是去年看到〈Image Completion with Deep Learning in TensorFlow〉這篇文章。這篇文章提到如何用 GAN 來對圖片進行腦補。比如說像是把</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>記得最早聽說 <a href="https://arxiv.org/abs/1701.00160">Generative Adversarial Networks</a> 似乎是去年看到<a href="https://bamos.github.io/2016/08/09/deep-completion/">〈Image Completion with Deep Learning in TensorFlow〉</a>這篇文章。這篇文章提到如何用 GAN 來對圖片進行腦補。比如說像是把人臉的中心遮起來，然後再用 GAN 補完幻想的人臉。效果如下所示。當時覺得感覺好酷阿，想像中可以腦補的東西真的很多，例如後來看到有人<a href="https://blog.insightdatascience.com/isee-removing-eyeglasses-from-faces-using-deep-learning-d4e7d935376f">腦補眼鏡</a>、<a href="http://www.digitaltrends.com/photography/faceapp-neural-net-image-editing/">腦補笑容和年紀</a>，或者<a href="https://zhuanlan.zhihu.com/p/25542274">腦補動漫人物</a>。而 GAN 作為其中一種生成模型，<a href="https://www.quora.com/What-are-the-pros-and-cons-of-Generative-Adversarial-Networks-vs-Variational-Autoencoders">視覺效果是相當不錯的</a>。</p>
<!-- raw HTML omitted -->
<p>就在那附近的時候，也終於下定決心換新六年多沒更新的桌機，順便買了一張 GTX 1060 來練習 Deep Learning。只是後來因為生活忙碌，所以雖然偶爾有拿別人的程式來跑跑看看效果，但一直沒有真正的寫程式。</p>
<p>現在剛好遇到連假，想說練習一下 TensorFlow，決定模仿<a href="http://musyoku.github.io/2017/02/06/Wasserstein-GAN/">〈ご注文は機械学習ですか？〉</a>網誌上的文章，做點簡單的實驗。</p>
<h2 id="環境">環境</h2>
<p>這次我是用 TensorFlow 1.0 配合 GTX 1060 來做這次的實驗。Python 則是用 Anaconda 安裝 Python 3.6。</p>
<p>本次使用的程式碼可以在 <a href="https://github.com/shaform/DeepNetworks">DeepNetworks</a> 找到。 如有興趣可自行參考。將會用 Jupyter Notebook 來做實驗，可以在<a href="https://github.com/shaform/DeepNetworks/blob/master/notebooks/GAN%20-%20Mixture%20of%20Gaussians.ipynb">〈GAN - Mixture of Gaussians Experiment〉</a>找到實驗的過程。</p>
<p>我將用個簡單的二維資料來測試 GAN 學會其分佈的能力。如下所示，每個白點都是一個資料點，希望 GAN 能成功學會他們主要分佈於七個地方。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2017/mog.png" alt="Mixture of Gaussians" />
    </div>
    
  </figure>
</div>

<h2 id="生成實驗">生成實驗</h2>
<p>這個實驗我先實做了三個模型，一個是基本的 GAN，不過我加上了 label smoothing 的修改，同時雖然是用 fully-connected layers 但 batch normalization 和 activation functions 有參考一些 DCGAN 的設計。第二個則是和<a href="https://arxiv.org/abs/1610.09585">〈Conditional Image Synthesis With Auxiliary Classifier GANs〉</a>很像的 ACGAN，在訓練時會告知資料點是 0~6 哪一群的資料點。生成時也會 7 群可以條件式的分開產生。最後則是 <a href="http://musyoku.github.io/2017/02/06/Wasserstein-GAN/">WGAN</a>。</p>
<p>GAN 和 ACGAN 都跑一樣多的 epochs，但是 WGAN 因為 discriminator 要多用很多資料訓練很多次，而且 learning rate 又比較小，所以要跑相對多很多的 epochs 才能得到結果。</p>
<p>結果如下所示，其中 ACGAN 每個顏色表示是在輸入要求生成不同群的資料。可以看到確實成功的學會不同群的資料位置。</p>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2017/compare.png" alt="Compare" />
    </div>
    
  </figure>
</div>

<h2 id="learning-to-discover-cross-domain-relations-with-generative-adversarial-networks">Learning to Discover Cross-Domain Relations with Generative Adversarial Networks</h2>
<p>同時，最近又恰好看見一個新的 <a href="https://arxiv.org/abs/1703.05192">DiscoGAN</a>，相當神奇。只要將兩組沒有事先標記他們之間對應的資料丟進去，就可以自動學會兩組資料的對應。</p>
<p>也就是說，假設我改用有 8 群分佈的 Mixture of Gaussians 將其中 4 群當成第一份資料，另外 4 群當成第二份資料，應該可以期待 DiscoGAN 有可能會把兩邊的四群各自一對一對應。</p>
<p>實驗結果如下，六欄分別是：</p>
<ol>
<li>原始的第一份資料，共有四群</li>
<li>透過 DiscoGAN 轉換成第二份資料，同樣顏色是從同樣的資料點轉換過來的，可以看見他確實大概的把四群一對一對應了。</li>
<li>透過 DiscoGAN 再轉回第一份資料。</li>
<li>原始的第二份資料，共有四群</li>
<li>透過 DiscoGAN 轉換成第一份資料。</li>
<li>透過 DiscoGAN 再轉回第二份資料。</li>
</ol>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2017/discogan.png" alt="DiscoGAN" />
    </div>
    
  </figure>
</div>

<h2 id="結語">結語</h2>
<p>這次為了實做學到不少東西，像是 <code>tf.contrib.layers.batch_norm</code> 在 share weights 時要如何使用，同時雖然我還沒做完圖像的實驗，不過也學了不少 tensorflow 的 <a href="https://www.tensorflow.org/api_guides/python/io_ops">I/O</a>。希望有空時能更新這篇文章，再加上圖像實驗以及更詳細的 GAN 介紹。</p>


<div class="box aligncenter" style="max-width:400px;">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>用 Ansible 和 yadm 來加速重灌流程</title>
      <link>https://city.shaform.com/zh/2017/03/25/ansible-and-yadm/</link>
      <pubDate>Sat, 25 Mar 2017 09:09:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2017/03/25/ansible-and-yadm/</guid>
      <description>前言 還記得當年修計算機系統管理時曾經為了做 NFS + NIS 的作業自行開了三台虛擬機設定環境，同時灌三台電腦實在是煞費精力。在此之後雖然比較少遇到此情形</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>還記得<a href="https://island.shaform.com/zh/2013/01/01/computer-system-administration/">當年修計算機系統管理</a>時曾經為了做 NFS + NIS 的作業自行開了三台虛擬機設定環境，同時灌三台電腦實在是煞費精力。在此之後雖然比較少遇到此情形，但還是得常常重灌電腦。像是研究所期間，自己的桌機、筆電，以及實驗室的桌機都是自己裝的 Ubuntu，而每次升級病發就會想重灌成新的版本，久了以後慢慢把安裝的東西寫成 Bash scripts，可是還是相當繁瑣。</p>
<p>就在最近的時候，偷聽大大們聊天，得知了 <a href="https://www.ansible.com/">Ansible</a> 這個方便的自動化部屬工具。由於它使用時目的端完全不須安裝任何套件，而是從本地端完全使用 SSH 進去目的端安裝設定軟體，感覺也挺適合個人重灌的需求。於是就花了一點時間研究了一下。在此同時，也得知了 <a href="https://github.com/TheLocehiliosan/yadm">yadm</a> 這個 <a href="https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789">dotfiles</a> 管理套件，也花了一點時間把原本用 Makefile 來安裝的 dotfiles 改成用 yadm 管理了。</p>
<h2 id="ansible-設定">Ansible 設定</h2>
<p>實際上 Ansible 的功用是用來自動化部署而不是拿來重灌個人電腦的，所以尋找文件時常常看到許多複雜功能。這份文件只挑些用在重灌上有用的部份。</p>
<p>安裝 Ansible 的方法非常簡單，只要使用 <code>pip install ansible</code> 或者是 <code>sudo apt install ansible</code> 即可。</p>
<p>然後我建立一個資料夾放置設定檔，組織成如下所示：</p>
<pre><code>.
├── ansible.cfg
├── hosts
├── anaconda.yml
├── desktop.yml
└── roles
    ├── anaconda
    │   └── tasks
    │       └── main.yml
    ├── base
    │   └── tasks
    │       └── main.yml
    └── desktop
        └── tasks
            └── main.yml
</code></pre>
<p>首先在 <code>ansible.cfg</code> 裡指定用來設定有哪些機器的 hostfile 的位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[defaults]</span>
</span></span><span class="line"><span class="cl"><span class="na">hostfile</span> <span class="o">=</span> <span class="s">hosts</span>
</span></span></code></pre></div><p>然後在 <code>hosts</code> 裡設定機器位址，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[host1]</span>
</span></span><span class="line"><span class="cl"><span class="na">192.168.1.2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[host2]</span>
</span></span><span class="line"><span class="cl"><span class="na">192.168.1.3 ansible_ssh_user</span><span class="o">=</span><span class="s">bob ansible_ssh_private_key_file=~/.ssh/bob.pem</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[servers]</span>
</span></span><span class="line"><span class="cl"><span class="na">192.168.1.4</span>
</span></span><span class="line"><span class="cl"><span class="na">192.168.1.5</span>
</span></span><span class="line"><span class="cl"><span class="na">192.168.1.6</span>
</span></span></code></pre></div><p>每個 group 可以設定多個機器，也可以指定使用者名稱和登入方法等等，見：<a href="http://docs.ansible.com/ansible/intro_inventory.html">〈Inventory〉</a>。</p>
<p><code>deploy</code> 則是一個簡單的 Bash script，用來方便執行。使用方法為：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">./deploy HOST YML</span></span></code></pre></div></div>

<p>利用 <code>HOST</code> 指定要設定的機器名稱，例如之前設定的 <code>host1</code> 或者 <code>localhost</code>，<code>YML</code> 則是要執行的 playbook 設定檔，例如最上層的 <code>anaconda.yml</code> 或者 <code>desktop.yml</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">HOST</span><span class="o">=</span><span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">localhost</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">YML</span><span class="o">=</span><span class="si">${</span><span class="nv">2</span><span class="k">:-</span><span class="nv">desktop</span><span class="p">.yml</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">ansible-playbook --ask-become-pass --extra-vars<span class="o">=</span><span class="s2">&#34;hosts=</span><span class="nv">$HOST</span><span class="s2">&#34;</span> <span class="nv">$YML</span>
</span></span></code></pre></div><p><code>desktop.yml</code> 和 <code>anaconda.yml</code> 則是簡單的 <a href="http://docs.ansible.com/ansible/playbooks.html">Playbooks</a>，用來指定要執行哪些 tasks。例如我在 <code>desktop.yml</code> 寫要用 root 權限執行 <code>base</code> 和 <code>desktop</code> 兩個 roles：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">hosts</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ hosts }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">become</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">become_user</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">roles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">base</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">desktop</span><span class="w">
</span></span></span></code></pre></div><p><code>anaconda.yml</code> 則寫要用正常使用者權限執行 <code>anaconda</code> 這個 role：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">hosts</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ hosts }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">roles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">anaconda</span><span class="w">
</span></span></span></code></pre></div><h2 id="roles">Roles</h2>
<p>最後的 <code>roles</code> 資料夾底下把相關的設定項目放在一起，這樣分開設定的好處是，可以根據不同機器的需求指定要執行哪些 roles，此外，也可以用 <code>git submodule</code> 之類的方法直接利用別人寫好的 roles。</p>
<p>先從 <code>base.yml</code> 開始，這個檔案裡我設置了一些基本的系統設定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 建立 sudoers.d 資料夾，以放置設定檔</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mkdir for configure files</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">file</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.dest }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">owner</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.mode | default(&#34;0755&#34;) }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="l">directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with_items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/sudoers.d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 因為我自己的使用者 umask 設的比較嚴格，避免 sudo 受影響所以加上這個把 sudo 的 umask 轉回來</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">set sudo umask</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">copy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.dest }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">owner</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.mode | default(&#34;0644&#34;) }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">content</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.content }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with_items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/sudoers.d/umask</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0400&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">content</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        # This file is managed by Ansible. DO NOT EDIT.
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        Defaults umask_override
</span></span></span><span class="line"><span class="cl"><span class="sd">        Defaults umask = 0002</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 更新系統</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">upgrade packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">upgrade</span><span class="p">:</span><span class="w"> </span><span class="l">dist</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_cache</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 安裝常用套件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">install core packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.name }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.state | default(&#34;present&#34;) }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">purge</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with_items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">git-core</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">gufw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">htop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">p7zip-full</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">p7zip-rar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tmux</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">yadm</span><span class="w">
</span></span></span></code></pre></div><p><code>desktop.yml</code> 則用來放個人桌機常用的設定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 建立資料夾來放之後的設定檔</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mkdir for configure files</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">file</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.dest }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">owner</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.mode | default(&#34;0755&#34;) }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="l">directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with_items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/lightdm/lightdm.conf.d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 取消訪客登入</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">disable guest login</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">copy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.dest }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">owner</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">root</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.mode | default(&#34;0644&#34;) }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">content</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.content }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with_items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/share/lightdm/lightdm.conf.d/50-no-guest.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0400&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">content</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        # This file is managed by Ansible. DO NOT EDIT.
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        [SeatDefaults]
</span></span></span><span class="line"><span class="cl"><span class="sd">        allow-guest=false</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 安裝一些我常用的軟體</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">install desktop apps</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.name }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ item.state | default(&#34;present&#34;) }}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">purge</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_cache</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with_items</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ibus-chewing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">keepassx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">libappindicator1</span><span class="w"> </span><span class="c"># For Dropbox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">python-gpgme</span><span class="w"> </span><span class="c"># For Dropbox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nautilus-dropbox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">workrave</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 安裝 Google Chrome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">install Google Chrome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">deb</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_cache</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">最後則是安裝 Anaconda 的部份，我會先安裝 Anaconda 2：</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">:::</span><span class="l">yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>---<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">download Anaconda</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">get_url</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;https://repo.continuum.io/archive/Anaconda2-4.3.1-Linux-x86_64.sh&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">dest</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp/Anaconda2-4.3.1-Linux-x86_64.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0755&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">install Anaconda</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">bash /tmp/Anaconda2-4.3.1-Linux-x86_64.sh -b -p {{ ansible_env.HOME }}/anaconda2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">creates</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ ansible_env.HOME}}/anaconda2&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">add Anaconda to PATH</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">lineinfile</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{ ansible_env.HOME }}/.bashrc&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">line</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;export PATH=$HOME/anaconda2/bin:${PATH}&#39;</span><span class="w">
</span></span></span></code></pre></div><p>然後再進到目的機器額外安裝 Python 3 的環境：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">conda create -n py3 <span class="nv">python</span><span class="o">=</span>3.6 anaconda</span></span></code></pre></div></div>

<p>不過還不確定以上這件事怎麼寫成 Ansible playbook 比較好。</p>
<h2 id="實際執行">實際執行</h2>
<p>假設新安裝的電腦是 <code>host1</code> 的話，那我就執行以下指令來安裝設定：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">./deploy host1 desktop.yml</span></span></code></pre></div></div>

<p>當然也可以直接登入該電腦，然後把 <code>host1</code> 改成 <code>localhost</code> 直接在本地執行。</p>
<h2 id="yadm">yadm</h2>
<p>至於 yadm 使用起來就<a href="https://thelocehiliosan.github.io/yadm/docs/getting_started">非常簡單</a>了。基本上就是一個可以把家目錄直接當成 git repository 的簡單套件。首先安裝：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install yadm</span></span></code></pre></div></div>

<p>然後剛開始可以直接：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">yadm init
</span></span><span class="line hl"><span class="cl">yadm add ~/.vimrc
</span></span><span class="line hl"><span class="cl">yadm add ~/.tmux.conf
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line hl"><span class="cl">yadm commit -m <span class="s1">&#39;first commit!&#39;</span></span></span></code></pre></div></div>

<p>如果要同步已經有的 repository 則是：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">yadm clone &lt;url&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line hl"><span class="cl">yadm pull</span></span></code></pre></div></div>

<p>跟正常的 git 一模一樣。</p>
<p>其他比較有用的功能大概是 <a href="https://thelocehiliosan.github.io/yadm/docs/bootstrap">Boostrap</a>，可以取代我原本用 Makefile 手動打指令的部份。</p>
<h2 id="結語">結語</h2>
<p>本次設定檔放在 <a href="https://github.com/shaform/experiments/tree/master/ansible">shaform/experiments/ansible</a>。其他還可以參考：</p>
<ul>
<li><a href="http://docs.ansible.com/">Ansible Documentation</a></li>
<li><a href="https://medium.com/@chihsuan/ansible-%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7-b2e8b8534a8d#.6m6yfov5s">Ansible 自動化部署工具</a></li>
<li><a href="http://ithelp.ithome.com.tw/users/20031776/ironman/1022">現代 IT 人一定要知道的 Ansible 自動化組態技巧</a></li>
<li><a href="https://thelocehiliosan.github.io/yadm/">Yet Another Dotfiles Manager</a></li>
<li><a href="https://github.com/webpro/awesome-dotfiles">Awesome dotfiles</a></li>
<li><a href="https://git-scm.com/book/en/v2">Git - Book</a></li>
</ul>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>用 Sacred 追蹤實驗數據</title>
      <link>https://city.shaform.com/zh/2017/03/18/run-experiments-with-sacred/</link>
      <pubDate>Sat, 18 Mar 2017 15:33:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2017/03/18/run-experiments-with-sacred/</guid>
      <description>前言 前陣子相當恰好的常有跑大量實驗的需求，跑著跑著就開始覺得管理實驗執行和整理數據實在相當繁瑣且容易產生錯誤。 以執行而言，由於處理的檔案龐大</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>前陣子相當恰好的常有跑大量實驗的需求，跑著跑著就開始覺得管理實驗執行和整理數據實在相當繁瑣且容易產生錯誤。</p>
<p>以執行而言，由於處理的檔案龐大、計算時間冗長、使用機器繁多，如何最有效率的把實驗跑完，同時又盡可能避免重複計算浪費時間，就成了難題。尤其考慮有時會因為不可抗力因素導致部份實驗中斷，此時要如何從一半的結果繼續執行，同時又最節省時間也是值得思考的點。</p>
<p>管理實驗數據部份，也因為使用機器增多及實驗繁多而複雜了起來。看到有種作法是利用 bash script 或者 Makefile 紀錄參數，然後將不同參數輸出的 stdout 導進指定的檔案名字裡來產生不同條件的實驗數據。不過這樣做很容易就會不小心改了參數卻把輸出導進錯誤的地方，導致最後數據錯誤。同時如果有很多台機器，資料又存在本機，那就得進行不少手動處理而無法全自動重現實驗結果。</p>
<p>感覺如果每次開始新的實驗就在程式碼中使用大量的自訂程式來處理這些問題好像一不小心就會花去太多時間。可是如果在忙亂中持續用奇怪的作法做實驗，心中的不安全感產生的焦慮又與日俱增，實在相當痛苦。</p>
<p>之前問了友人：</p>
<blockquote>
<p>「大大都怎麼跑實驗阿？」</p>
<p>「包成 Docker 先放著。或是用 Makefile + GitLab 做版本管控。
用 Jenkins + ZooKeeper 管理，然後隨時打點 OpenTSDB 用 Grafana 監控。」</p>
</blockquote>
<p>感覺好像相當有道理。像是可以把各種 jobs 交給 <a href="https://jenkins.io">Jenkins</a> 管理，藉此得知哪些已經跑完，哪些還要跑，然後選擇要在什麼機器跑，並且將結果回收到同一個地方。不過實際上到底要如何做到實在也找不到範例可抄襲。</p>
<p>由於每天實在過得很忙亂，只好苟且的一天過一天。好不容易有個週末無車無人的時刻，趕緊稍微做點小實驗來測試怎麼樣的作法較好。</p>
<p>這次要介紹的 <a href="https://github.com/IDSIA/sacred">Sacred</a> 其實最早是去年讀到 <a href="https://gab41.lab41.org/show-your-work-a-month-with-sacred-e665af4eeac2">〈Show Your Work: A Month with Sacred〉</a> 這篇文章時所發現的。它是從遠在瑞士的 <a href="http://www.idsia.ch/">Istituto Dalle Molle di Studi sull&rsquo;Intelligenza Artificiale (IDSIA)</a> 發展出來的一套工具，據說就是企圖解決做實驗難題的一個嘗試。</p>
<h2 id="環境設定">環境設定</h2>
<p>為了使用 Sacred，首先我裝了一套 <a href="https://www.mongodb.com/">MongoDB</a>，為了方便起見我就參考<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">教學</a>直接裝在本機上。接著用 pip3 安裝 Sacred 相關套件，因為不知為何不指定版本會裝到舊的，所以這裡我就指定了 Sacred 的版本：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip3 install <span class="nv">sacred</span><span class="o">==</span>0.7b3 pymongo</span></span></code></pre></div></div>

<p>除此之外也安裝其他實驗會用到的套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip3 install xgboost jupyter matplotlib numpy tensorflow-gpu scikit-learn sacredboard</span></span></code></pre></div></div>

<h2 id="實驗設計">實驗設計</h2>
<p>這次我打算用知名的 <a href="http://yann.lecun.com/exdb/mnist/">MNIST</a> 手寫辨識資料集來做實驗，不過我將把訓練資料集隨機取樣 500、1000 或 1500 個來訓練分類器，藉此測試他們在資料稀少時的效能。同時為了避免受到取樣偏差的影響，同樣大小的取樣我會各作十次，再將十次的結果取平均值。</p>
<p>這次測試的分類器則是預設參數的 xgboost、linear svm 和一個順便練習 TensorFlow 實作的 SoftmaxClassifier。</p>
<h2 id="主程式">主程式</h2>
<p>首先設定這次實驗所需的參數，我用最簡單的方法，使用 <code>ex.config</code> 來宣告實驗參數。其中亂數種子 <code>seed</code> 因為預設本來就有，就不特別列出了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># mnist.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sacred</span> <span class="kn">import</span> <span class="n">Experiment</span>
</span></span><span class="line"><span class="cl"><span class="n">ex</span> <span class="o">=</span> <span class="n">Experiment</span><span class="p">(</span><span class="s1">&#39;mnist_sampled&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@ex</span><span class="o">.</span><span class="n">config</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_config</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">sample_size</span> <span class="o">=</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl">    <span class="n">classifier</span> <span class="o">=</span> <span class="s1">&#39;svc&#39;</span>
</span></span></code></pre></div><p>緊接著實作實驗程式，每次將資料進行取樣，並且利用特定的分類器去驗證效能。利用 <code>ex.automain</code> 來宣告實驗主程式`。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># mnist.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tensorflow.examples.tutorials.mnist</span> <span class="kn">import</span> <span class="n">input_data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@ex</span><span class="o">.</span><span class="n">automain</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">run_experiments</span><span class="p">(</span><span class="n">data_dir</span><span class="o">=</span><span class="s1">&#39;MNIST_data&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">mnist</span> <span class="o">=</span> <span class="n">input_data</span><span class="o">.</span><span class="n">read_data_sets</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="n">one_hot</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_test</span> <span class="o">=</span> <span class="n">mnist</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">images</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_test</span> <span class="o">=</span> <span class="n">mnist</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">labels</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span> <span class="o">=</span> <span class="n">sample_data</span><span class="p">(</span><span class="n">mnist</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">images</span><span class="p">,</span> <span class="n">mnist</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">labels</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clf</span> <span class="o">=</span> <span class="n">get_classifier</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">clf</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_train_pred</span> <span class="o">=</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">train_accuracy</span> <span class="o">=</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">y_train_pred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">y_test_pred</span> <span class="o">=</span> <span class="n">clf</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">test_accuracy</span> <span class="o">=</span> <span class="n">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_test_pred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;train_accuracy&#39;</span><span class="p">:</span> <span class="n">train_accuracy</span><span class="p">,</span> <span class="s1">&#39;test_accuracy&#39;</span><span class="p">:</span> <span class="n">test_accuracy</span><span class="p">}</span>
</span></span></code></pre></div><p>接下來實作取樣和選擇分類器的函式。值得注意的是，實驗參數因為可以被 Sacred 透過 <code>ex.capture</code> 自動傳入，所以呼叫子函數時可以不直接傳進去也沒關係。此外，<code>_rnd</code> 是一個會根據 <code>seed</code> 來決定的亂數器，在每次實驗時，只要 <code>seed</code> 一樣，則同一個函式呼叫被呼叫特定次數時的 <code>_rng</code> 就會產生一樣的亂數，所以可以確保取樣出來的資料是一樣的。詳情可見：<a href="http://sacred.readthedocs.io/en/latest/randomness.html">〈Controlling Randomness〉</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># mnist.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">xgboost</span> <span class="k">as</span> <span class="nn">xgb</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">LinearSVC</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">softmax</span> <span class="kn">import</span> <span class="n">SoftmaxClassifier</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@ex</span><span class="o">.</span><span class="n">capture</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sample_data</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sample_size</span><span class="p">,</span> <span class="n">_rnd</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">indices</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">choice_indices</span> <span class="o">=</span> <span class="n">_rnd</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">indices</span><span class="p">,</span> <span class="n">sample_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">X</span><span class="p">[</span><span class="n">choice_indices</span><span class="p">,</span> <span class="p">:],</span> <span class="n">y</span><span class="p">[</span><span class="n">choice_indices</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@ex</span><span class="o">.</span><span class="n">capture</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_classifier</span><span class="p">(</span><span class="n">classifier</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">classifier</span> <span class="o">==</span> <span class="s1">&#39;svc&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">LinearSVC</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">classifier</span> <span class="o">==</span> <span class="s1">&#39;softmax&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">SoftmaxClassifier</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">classifier</span> <span class="o">==</span> <span class="s1">&#39;xgb&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">xgb</span><span class="o">.</span><span class="n">XGBClassifier</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><p>SoftmaxClassifier 的程式我放在 <a href="https://github.com/shaform/experiments/blob/master/sacred/softmax.py">softmax.py</a>。 如有興趣可自行參考。</p>
<h2 id="執行實驗">執行實驗</h2>
<p>我寫了一個簡單的 bash script 來幫我執行所有想執行的實驗。當然這種作法會導致 MNIST 被不斷重複讀取，感覺不是很有效率，若想節省機器時間或許可以考慮用 <a href="http://sacred.readthedocs.io/en/latest/experiment.html#run-the-experiment">ex.run</a> 來執行程式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> clf in svc xgb softmax <span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> sample_size in <span class="m">500</span> <span class="m">1000</span> <span class="m">1500</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> seed in <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="m">6</span> <span class="m">7</span> <span class="m">8</span> <span class="m">9</span> <span class="m">10</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span>
</span></span><span class="line"><span class="cl">      python mnist.py with <span class="nv">classifier</span><span class="o">=</span><span class="nv">$clf</span> <span class="nv">sample_size</span><span class="o">=</span><span class="nv">$sample_size</span> <span class="nv">seed</span><span class="o">=</span><span class="nv">$seed</span> -m sacred <span class="o">||</span> <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">done</span>
</span></span><span class="line"><span class="cl">  <span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><p>使用 Sacred 的程式可以直接用 <code>with</code> 選項來傳入所有實驗參數。至於 <code>-m</code> 則是指定要寫入的 MongoDB 位址。由於我的資料庫直接裝在本機，所以這裡單純指定了資料集的名字。詳情可見：<a href="http://sacred.readthedocs.io/en/latest/command_line.html">〈Command-Line Interface〉</a>。至於 <code>|| exit 1</code> 則是為了讓我如果手動中斷程式時，for loop 可以被中斷而不會繼續跑下去。</p>
<h2 id="回收結果">回收結果</h2>
<p>一旦執行了以後 Sacred 就會自動將實驗參數、回傳結果以及一些像是執行時間、執行過程的 stdout 等等通通都寫進 MongoDB 當中。我們也可以執行 <code>sacredboard</code> 來觀察執行狀況。不過老實說這功能實在還有點陽春：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sacredboard -m sacred</span></span></code></pre></div></div>

<p><img src="/images/sacredboard.png" alt="SacredBoard"></p>
<p>是以，我們還是自己寫個程式來回收吧。還好 MongoDB 裡紀錄了所有實驗參數，因此要回收特定數據也是相當容易的。</p>
<p>這次我們還是會用 <a href="http://jupyter.readthedocs.io/en/latest/index.html">Jupyter Notebook</a> 方便畫圖。首先連結到本機的 MongoDB：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">MongoClient</span>
</span></span><span class="line"><span class="cl"><span class="n">mc</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">db</span> <span class="o">=</span> <span class="n">mc</span><span class="p">[</span><span class="s1">&#39;sacred&#39;</span><span class="p">]</span>
</span></span></code></pre></div><p>緊接著把每個分類器在不同情形的十個數據都回收：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sample_sizes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">1500</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">classifiers</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;svc&#39;</span><span class="p">,</span> <span class="s1">&#39;xgb&#39;</span><span class="p">,</span> <span class="s1">&#39;softmax&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">clf</span> <span class="ow">in</span> <span class="n">classifiers</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">clf_mean</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">clf_std</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">sample_size</span> <span class="ow">in</span> <span class="n">sample_sizes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">test_accuracy</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="s1">&#39;runs&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">find_one</span><span class="p">({</span><span class="s1">&#39;experiment.name&#39;</span><span class="p">:</span> <span class="s1">&#39;mnist_sampled&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="s1">&#39;config.classifier&#39;</span><span class="p">:</span> <span class="n">clf</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="s1">&#39;config.sample_size&#39;</span><span class="p">:</span> <span class="n">sample_size</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="s1">&#39;config.seed&#39;</span><span class="p">:</span> <span class="n">seed</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                 <span class="s1">&#39;status&#39;</span><span class="p">:</span> <span class="s1">&#39;COMPLETED&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span><span class="s1">&#39;result&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">            <span class="n">test_accuracy</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="s1">&#39;result&#39;</span><span class="p">][</span><span class="s1">&#39;test_accuracy&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">clf_mean</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">test_accuracy</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">clf_std</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">test_accuracy</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">clf_mean</span><span class="p">,</span> <span class="n">clf_std</span><span class="p">))</span>
</span></span></code></pre></div><p>最後則把結果畫出來：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;Test Accuracy of Different Classifiers on MNIST&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;sample size&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s1">&#39;test accuracy&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">xticks</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sample_sizes</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">xticks</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">set_xticklabels</span><span class="p">(</span><span class="n">sample_sizes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">clf</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">classifiers</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">errorbar</span><span class="p">(</span><span class="n">xticks</span><span class="p">,</span> <span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">yerr</span><span class="o">=</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="n">clf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></div>
<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2017/accuracy.png" alt="Accuracy" />
    </div>
    
  </figure>
</div>

<p>完成！</p>
<h2 id="結語">結語</h2>
<p>本次的實驗程式放在 <a href="https://github.com/shaform/experiments/tree/master/sacred">shaform/experiments/sacred</a>，最後的 notebook 同時也可以在 <a href="http://nbviewer.jupyter.org/github/shaform/experiments/blob/master/sacred/Sampled%20MNIST.ipynb">Sampled MNIST</a> 上觀看。</p>


<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/dots.jpg" alt="Dots" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>用 TensorBox 製作簡易貓貓辨識器</title>
      <link>https://city.shaform.com/zh/2016/11/05/detect-cats-with-tensorbox/</link>
      <pubDate>Sat, 05 Nov 2016 13:40:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2016/11/05/detect-cats-with-tensorbox/</guid>
      <description>最近恰好有個需求是要收集大量特定物體的圖片，直覺的想法就是訓練一個該物體的偵測器，然後再用這個偵測器從大量圖片中找出符合需求的區塊。經過一番</description>
      <content:encoded><![CDATA[<p>最近恰好有個需求是要收集大量特定物體的圖片，直覺的想法就是訓練一個該物體的偵測器，然後再用這個偵測器從大量圖片中找出符合需求的區塊。經過一番搜尋，發現 <a href="https://github.com/Russell91/TensorBox">TensorBox</a> 似乎是個用來訓練單一物體偵測器的簡單套件，於是便利用貓咪來進行了簡單的嘗試。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/cat-detector.png" alt="Detect a Cat" />
    </div>
    
  </figure>
</div>

<p>本文使用的套件有的是只支援 Python 2，此時執行時將會以 <code>python</code> 程式執行。但筆者寫的 scripts 大多是 Python 3，本文中就以 <code>python3</code> 來表示。</p>
<p>本文將會用到不少套件，實際放置套件的資料夾結構如下：</p>
<pre><code>./
./cats
./TensorBox
./labelImg
./labels
./data
./data/train
./data/test
</code></pre>
<p>實際的程式可在 <a href="https://github.com/shaform/experiments/tree/master/cat">shaform/experiments/cat</a> 裡找到，本文只會顯示重點部份。</p>
<h2 id="收集資料">收集資料</h2>
<p>首先我們使用 <a href="https://github.com/maxogden/cats">maxogden/cats</a> 收集好的小規模貓貓照片來進行實驗，我們將利用 <code>catmapper</code> 資料夾中的照片做為訓練資料，最後再用 <code>cat_photos</code> 裡的照片來觀看結果。</p>
<p>值得注意的是，這樣的訓練資料只有大約三百多筆，而且每張照片裡幾乎都有貓。實際上若是真的要訓練高品質的偵測器，應當收集更多的訓練資料，而且應該要加入一些沒有貓，或者有跟貓很像但不是貓的物體，來加強模型的能力。不過本文純屬示範工具用法，未免麻煩就不做深入探討了。</p>
<p>由於 TensorBox 比較支援圖片大小為 32 倍數的照片，不符時須縮放或擷取。為了方便起見我就先把圖片都轉成適當大小。首先安裝 <a href="https://python-pillow.org/">Pillow</a> 套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip3 install Pillow</span></span></code></pre></div></div>

<p>緊接著寫一個程式可以將圖片裁成指定大小 608x608，然後轉成 png 檔案格式儲存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">image_extensions</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;png&#39;</span><span class="p">,</span> <span class="s1">&#39;jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;jpeg&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">crop_center</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">x1</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">width</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x2</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">width</span> <span class="o">-</span> <span class="n">width</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">y1</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">height</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y2</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">height</span> <span class="o">-</span> <span class="n">height</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">img</span><span class="o">.</span><span class="n">crop</span><span class="p">((</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">OSError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">indir</span><span class="p">,</span> <span class="n">outdir</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">fname</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">indir</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">parts</span> <span class="o">=</span> <span class="n">fname</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">image_extensions</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">name</span><span class="p">,</span> <span class="n">ext</span> <span class="o">=</span> <span class="n">parts</span>
</span></span><span class="line"><span class="cl">            <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">indir</span><span class="p">,</span> <span class="n">fname</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">img</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">width</span> <span class="ow">and</span> <span class="n">img</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">height</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">img</span> <span class="o">=</span> <span class="n">crop_center</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">img</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">img</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">outdir</span><span class="p">,</span> <span class="n">name</span> <span class="o">+</span> <span class="s1">&#39;.png&#39;</span><span class="p">))</span>
</span></span></code></pre></div><p>並且將訓練和測試資料進行處理：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">mkdir data/train data/test
</span></span><span class="line hl"><span class="cl">python3 crop.py --indir cats/catmapper --outdir data/train
</span></span><span class="line hl"><span class="cl">python3 crop.py --indir cats/cat_photos --outdir data/test</span></span></code></pre></div></div>

<h2 id="標記貓貓">標記貓貓</h2>
<p>緊接著，我們使用 <a href="https://github.com/tzutalin/labelImg">labelImg</a> 來針對訓練資料 <code>cats/catmapper</code> 做標記，並將標記存放在 <code>labels</code> 資料夾裡。</p>
<p>注意到 labelImg 只支援 Python 2，同時要先按照官方安裝步驟進行初始化：</p>
<p><div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> labelImg
</span></span><span class="line hl"><span class="cl">sudo apt-get install pyqt4-dev-tools
</span></span><span class="line hl"><span class="cl">sudo pip install lxml
</span></span><span class="line hl"><span class="cl">make all</span></span></code></pre></div></div>
./labelImg.py</p>
<p>可以利用 <code>Ctrl-N</code>, <code>N</code>, <code>P</code> 等快速鍵，建立框框來標記貓咪，以及切換上一張、下一張照片。</p>
<p>緊接著，撰寫一個程式將標記好的資料轉成 TensorBox 能夠讀取的格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">xml.etree.ElementTree</span> <span class="k">as</span> <span class="nn">ET</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">indir</span><span class="p">,</span> <span class="n">outdir</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">seed</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">name</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">indir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">entries</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">indir</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">path</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;.xml&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">tree</span> <span class="o">=</span> <span class="n">ET</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">indir</span><span class="p">,</span> <span class="n">path</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">root</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">getroot</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">img_path</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">findtext</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">rects</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">obj</span> <span class="ow">in</span> <span class="n">root</span><span class="o">.</span><span class="n">iter</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">x1</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;bndbox&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">findtext</span><span class="p">(</span><span class="s1">&#39;xmin&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">y1</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;bndbox&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">findtext</span><span class="p">(</span><span class="s1">&#39;ymin&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">x2</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;bndbox&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">findtext</span><span class="p">(</span><span class="s1">&#39;xmax&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">y2</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;bndbox&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">findtext</span><span class="p">(</span><span class="s1">&#39;ymax&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="n">rects</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;x1&#39;</span><span class="p">:</span> <span class="n">x1</span><span class="p">,</span> <span class="s1">&#39;x2&#39;</span><span class="p">:</span> <span class="n">x2</span><span class="p">,</span> <span class="s1">&#39;y1&#39;</span><span class="p">:</span> <span class="n">y1</span><span class="p">,</span> <span class="s1">&#39;y2&#39;</span><span class="p">:</span> <span class="n">y2</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">entry</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;image_path&#39;</span><span class="p">:</span> <span class="n">img_path</span><span class="p">,</span> <span class="s1">&#39;rects&#39;</span><span class="p">:</span> <span class="n">rects</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">entries</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">entries</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">train_offset</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">entries</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">train</span> <span class="o">=</span> <span class="n">entries</span><span class="p">[:</span><span class="n">train_offset</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">val</span> <span class="o">=</span> <span class="n">entries</span><span class="p">[</span><span class="n">train_offset</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">datasets</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;train&#39;</span><span class="p">,</span> <span class="n">train</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;val&#39;</span><span class="p">,</span> <span class="n">val</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">prefix_name</span><span class="p">,</span> <span class="n">dataset</span> <span class="ow">in</span> <span class="n">datasets</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">outdir</span><span class="p">,</span> <span class="s1">&#39;</span><span class="si">{}</span><span class="s1">_</span><span class="si">{}</span><span class="s1">_boxes.json&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">name</span><span class="p">,</span> <span class="n">prefix_name</span><span class="p">)),</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">separators</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="s1">&#39;: &#39;</span><span class="p">))</span>
</span></span></code></pre></div><p>將標記轉換到 <code>data</code> 資料夾之下：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">python3 extract_label.py --indir labels --outdir data</span></span></code></pre></div></div>

<h2 id="安裝-tensorbox-並進行訓練">安裝 TensorBox 並進行訓練</h2>
<p>TensorBox 似乎是只支援 Python 2，所以首先設定好 TensorFlow 的 Python 2 版本。接著還要安裝一些相依套件（因為 OpenCV 似乎比較難設定，所以我安裝系統套件）：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install python-opencv
</span></span><span class="line hl"><span class="cl">pip install Cython numpy scikit-image jupyter</span></span></code></pre></div></div>

<p>接下來下載 TensorBox：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">git clone http://github.com/russell91/Tensorbox
</span></span><span class="line hl"><span class="cl"><span class="nb">cd</span> Tensorbox
</span></span><span class="line hl"><span class="cl">./download_data.sh
</span></span><span class="line hl"><span class="cl"><span class="nb">cd</span> utils <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ..</span></span></code></pre></div></div>

<p>緊接著修改 <code>TensorBox/hypes/overfeat_rezoom.json</code> 對應的項目：</p>
<p>注意到，<code>train_idl</code> 和 <code>test_idl</code> 須使用絕對路徑。</p>
<pre><code>&quot;train_idl&quot;: &quot;/path/to/data/labels_train_boxes.json&quot;,
&quot;test_idl&quot;: &quot;/path/to/data/labels_val_boxes.json&quot;,
&quot;image_width&quot;: 608, 
&quot;image_height&quot;: 608,
&quot;grid_height&quot;: 19, 
&quot;grid_width&quot;: 19,
</code></pre>
<p>最後就是實際進行訓練了！這個會跑很久，並且把訓練的不同階段的模型存在 <code>TensorBox/output/overfeat_rezoom_{DATETIME}/save.ckpt-{iteration}</code>。由於訓練資料實在很少，所以不須訓練到太後面，可以拿前面的版本就好。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> TensorBox
</span></span><span class="line hl"><span class="cl">python train.py --hypes hypes/overfeat_rezoom.json --gpu <span class="m">0</span> --logdir output</span></span></code></pre></div></div>

<h2 id="測試結果">測試結果</h2>
<p>最後就用 <a href="http://jupyter.readthedocs.io/en/latest/index.html">Jupyter Notebook</a> 來檢視我們的結果，先把之前提到的 <code>save.ckpt-10000</code> 以及 <code>save.ckpt-10000.meta</code> 存到 project 根目錄。然後在根目錄用跟 TensorBox 一樣的 Python 2 環境執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">jupyter notebook</span></span></code></pre></div></div>

<p>進行初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="nn">tf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scipy.misc</span> <span class="kn">import</span> <span class="n">imread</span>
</span></span></code></pre></div><p>方便起見將 TensorBox 直接加到路徑，平時請勿模仿：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;./TensorBox&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">train</span> <span class="kn">import</span> <span class="n">build_forward</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">evaluate</span> <span class="kn">import</span> <span class="n">add_rectangles</span>
</span></span></code></pre></div><p>最後照抄 TensorBox 的示範程式碼，更改一些檔案路徑：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">model_path</span> <span class="o">=</span> <span class="s1">&#39;./save.ckpt-10000&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">image_dir</span> <span class="o">=</span> <span class="s1">&#39;./data/test&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">hypes_file</span> <span class="o">=</span> <span class="s1">&#39;./TensorBox/hypes/overfeat_rezoom.json&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">hypes_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">H</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tf</span><span class="o">.</span><span class="n">reset_default_graph</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">x_in</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">placeholder</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">tf</span><span class="o">.</span><span class="n">float32</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;x_in&#39;</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="n">H</span><span class="p">[</span><span class="s1">&#39;image_height&#39;</span><span class="p">],</span> <span class="n">H</span><span class="p">[</span><span class="s1">&#39;image_width&#39;</span><span class="p">],</span> <span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">H</span><span class="p">[</span><span class="s1">&#39;use_rezoom&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="n">pred_boxes</span><span class="p">,</span> <span class="n">pred_logits</span><span class="p">,</span> <span class="n">pred_confidences</span><span class="p">,</span> <span class="n">pred_confs_deltas</span><span class="p">,</span> <span class="n">pred_boxes_deltas</span> <span class="o">=</span> <span class="n">build_forward</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">H</span><span class="p">,</span> <span class="n">tf</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">x_in</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="n">reuse</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">grid_area</span> <span class="o">=</span> <span class="n">H</span><span class="p">[</span><span class="s1">&#39;grid_height&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="n">H</span><span class="p">[</span><span class="s1">&#39;grid_width&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">pred_confidences</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">tf</span><span class="o">.</span><span class="n">nn</span><span class="o">.</span><span class="n">softmax</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">tf</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">pred_confs_deltas</span><span class="p">,</span> <span class="p">[</span><span class="n">grid_area</span> <span class="o">*</span> <span class="n">H</span><span class="p">[</span><span class="s1">&#39;rnn_len&#39;</span><span class="p">],</span> <span class="mi">2</span><span class="p">])),</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="n">grid_area</span><span class="p">,</span> <span class="n">H</span><span class="p">[</span><span class="s1">&#39;rnn_len&#39;</span><span class="p">],</span> <span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">H</span><span class="p">[</span><span class="s1">&#39;reregress&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">pred_boxes</span> <span class="o">=</span> <span class="n">pred_boxes</span> <span class="o">+</span> <span class="n">pred_boxes_deltas</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">pred_boxes</span><span class="p">,</span> <span class="n">pred_logits</span><span class="p">,</span> <span class="n">pred_confidences</span> <span class="o">=</span> <span class="n">build_forward</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">H</span><span class="p">,</span> <span class="n">tf</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">x_in</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="n">reuse</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">saver</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="n">train</span><span class="o">.</span><span class="n">Saver</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">tf</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span> <span class="k">as</span> <span class="n">sess</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">sess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">tf</span><span class="o">.</span><span class="n">initialize_all_variables</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">saver</span><span class="o">.</span><span class="n">restore</span><span class="p">(</span><span class="n">sess</span><span class="p">,</span> <span class="n">model_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">images</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">image_dir</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">fname</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">image_dir</span><span class="p">,</span> <span class="n">fname</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">img</span> <span class="o">=</span> <span class="n">imread</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">feed</span> <span class="o">=</span> <span class="p">{</span><span class="n">x_in</span><span class="p">:</span> <span class="n">img</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">np_pred_boxes</span><span class="p">,</span> <span class="n">np_pred_confidences</span><span class="p">)</span> <span class="o">=</span> <span class="n">sess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="n">pred_boxes</span><span class="p">,</span> <span class="n">pred_confidences</span><span class="p">],</span> <span class="n">feed_dict</span><span class="o">=</span><span class="n">feed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">new_img</span><span class="p">,</span> <span class="n">rects</span> <span class="o">=</span> <span class="n">add_rectangles</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">H</span><span class="p">,</span> <span class="p">[</span><span class="n">img</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">np_pred_confidences</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">np_pred_boxes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">use_stitching</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">rnn_len</span><span class="o">=</span><span class="n">H</span><span class="p">[</span><span class="s1">&#39;rnn_len&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">min_conf</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">show_suppressed</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">new_img</span><span class="p">)</span>
</span></span></code></pre></div><p>就可以<a href="https://nbviewer.jupyter.org/github/shaform/experiments/blob/master/cat/Detect%20Cats.ipynb">在 Notebook 上看到成果</a>了！！！</p>
<p>以下分別展示一張成功和一張失敗的照片，如果增加更多訓練資料或者使用更容易辨認的物體，效果應該可以更好才是。</p>
<p><img src="/images/cat-success.png" alt="Detect a Cat Successfully">
<img src="/images/cat-failure.png" alt="Failed to Detect a Cat"></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>在 Ubuntu 16.04 安裝 CUDA 8.0 和 TensorFlow 0.11 並使用內顯顯示畫面</title>
      <link>https://city.shaform.com/zh/2016/10/31/install-tensorflow-with-cuda/</link>
      <pubDate>Mon, 31 Oct 2016 21:28:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2016/10/31/install-tensorflow-with-cuda/</guid>
      <description>本文紀錄了使用內顯來顯示畫面，而透過 Nvidia 顯卡來進行 CUDA 計算的安裝步驟。 顯卡設定 基礎設定 首先在 BIOS 裡設定內顯為主要顯卡，並且將螢幕接到內顯輸出上。 安</description>
      <content:encoded><![CDATA[<p>本文紀錄了使用內顯來顯示畫面，而透過 Nvidia 顯卡來進行 CUDA 計算的安裝步驟。</p>
<h2 id="顯卡設定">顯卡設定</h2>
<h3 id="基礎設定">基礎設定</h3>
<p>首先在 BIOS 裡設定內顯為主要顯卡，並且將螢幕接到內顯輸出上。</p>
<h3 id="安裝-cuda">安裝 CUDA</h3>
<p>接著到 <a href="https://developer.nvidia.com/cuda-downloads">CUDA 下載頁面</a>下載對應的 deb 檔案。緊接著，重開 Ubuntu，並在登入畫面時按下 <code>Ctrl-Alt-F1</code> 進入命令列界面。</p>
<p>執行以下指令關閉 <code>lightdm</code>，據<a href="https://gist.github.com/bearpaw/c38ef18ec45ba6548ec0">這裡</a>的講法，這樣就可以達成將內顯和顯卡功能分開的目的。筆者測試如果沒執行這個指令，則最後安裝完 CUDA 重開機就會無法進入圖形登入畫面。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo service lightdm stop</span></span></code></pre></div></div>

<p>接著實際安裝 CUDA，並重新開機，確認可以登入：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo dpkg -i cuda-repo-&lt;distro&gt;_&lt;version&gt;_&lt;architecture&gt;.deb
</span></span><span class="line hl"><span class="cl">sudo apt update
</span></span><span class="line hl"><span class="cl">sudo apt install cuda
</span></span><span class="line hl"><span class="cl">sudo reboot</span></span></code></pre></div></div>

<h3 id="安裝-cudnn">安裝 cuDNN</h3>
<p>接著到 <a href="https://developer.nvidia.com/cudnn">cuDNN 下載頁面</a>下載 cuDNN v5，然後按照 <a href="https://www.tensorflow.org/versions/r0.11/get_started/os_setup.html#optional-install-cuda-gpus-on-linux">TensorFlow 文件</a>指示，將檔案複製到指定位置：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">tar xvzf cudnn-8.0-linux-x64-v5.1-ga.tgz
</span></span><span class="line hl"><span class="cl">sudo cp cuda/include/cudnn.h /usr/local/cuda/include
</span></span><span class="line hl"><span class="cl">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
</span></span><span class="line hl"><span class="cl">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span></span></code></pre></div></div>

<h3 id="設定環境變數">設定環境變數</h3>
<p>接下來在 <code>.bashrc</code> 或者其他開機時會載入的啟動檔案中加入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="nv">$LD_LIBRARY_PATH</span>:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/lib/nvidia-367
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CUDA_HOME</span><span class="o">=</span>/usr/local/cuda
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/cuda/bin
</span></span></code></pre></div><p>其中 <code>/usr/lib/nvidia-367</code> 可指到你實際安裝的顯卡驅動程式版本。</p>
<p>最後重新開機即可。</p>
<p>開機完可執行 <code>nvidia-smi</code> 確定顯卡真的有裝好。</p>
<h2 id="安裝-tensorflow">安裝 TensorFlow</h2>
<p>由於這部份跟官方文件一模一樣，沒有特別更改什麼。所以詳細安裝步驟就直接參考<a href="https://www.tensorflow.org/versions/r0.11/get_started/index.html">官方文件</a>即可。</p>
<h2 id="安裝-caffe">安裝 Caffe</h2>
<p>由於安裝 Caffe 的步驟跟官方有些不一樣，故順便紀錄。</p>
<p>首先安裝需要的套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install build-essential libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler libgflags-dev libgoogle-glog-dev liblmdb-dev
</span></span><span class="line hl"><span class="cl">sudo apt install --no-install-recommends libboost-all-dev</span></span></code></pre></div></div>

<p>這裡我用 OpenBLAS。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt install libopenblas-dev </span></span></code></pre></div></div>

<p>接著修改 <code>Makefile.config</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-make" data-lang="make"><span class="line"><span class="cl"><span class="nv">BLAS</span> <span class="o">:=</span> open
</span></span><span class="line"><span class="cl"><span class="nv">USE_CUDNN</span> <span class="o">:=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">INCLUDE_DIRS</span> <span class="o">:=</span> <span class="k">$(</span>PYTHON_INCLUDE<span class="k">)</span> /usr/local/include /usr/include/hdf5/serial/
</span></span><span class="line"><span class="cl"><span class="nv">LIBRARY_DIRS</span> <span class="o">:=</span> <span class="k">$(</span>PYTHON_LIB<span class="k">)</span> /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu
</span></span><span class="line"><span class="cl"><span class="nv">WITH_PYTHON_LAYER</span> <span class="o">:=</span> <span class="m">1</span>
</span></span></code></pre></div><p>並且修改 <code>Makefile</code>，加入 hdf5 相關程式庫：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-make" data-lang="make"><span class="line"><span class="cl"><span class="nv">LIBRARIES</span> <span class="o">+=</span> glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial
</span></span></code></pre></div><p>同時在想用的 Python 環境裡安裝必要套件，利用 Caffe 資料夾裡的 <code>python/requirements.txt</code>：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip install -r requirements.txt</span></span></code></pre></div></div>

<p>最後就可以編譯了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">make all
</span></span><span class="line hl"><span class="cl">make pycaffe</span></span></code></pre></div></div>


<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>找出 GitHub 上和 Python 3 不相容的 Python 專案</title>
      <link>https://city.shaform.com/zh/2016/09/10/py3tracker/</link>
      <pubDate>Sat, 10 Sep 2016 19:44:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2016/09/10/py3tracker/</guid>
      <description>Porting to Python 3 Python 3 已經釋出近八年，原本一片慘紅的 Python 3 Readiness 和 PYTHON 3 WALL OF SUPERPOWERS 都已經接近全綠，真的可以看見社群逐漸朝向 Python 3 的努力。事實上，也開始有些專案漸漸要</description>
      <content:encoded><![CDATA[<h2 id="porting-to-python-3">Porting to Python 3</h2>
<p>Python 3 已經釋出近八年，原本一片慘紅的 <a href="http://py3readiness.org/">Python 3 Readiness</a> 和 <a href="http://python3wos.mybluemix.net/">PYTHON 3 WALL OF SUPERPOWERS</a> 都已經接近全綠，真的可以看見社群逐漸朝向 Python 3 的努力。事實上，<a href="https://blog.jupyter.org/release-of-ipython-5-0-8ce60b8d2e8e">也開始有些專案漸漸要中止 Python 2 的支援了。</a></p>
<p>然而其實還是有不少常用的 packages 並不支援 Python 3，像是最近常會用到的 <a href="https://github.com/s3tools/s3cmd">s3cmd</a> 就是一例。到了他們的 Issues 頁面瞧瞧，發現其實<a href="https://github.com/s3tools/s3cmd/issues/335">很早以前就有想支援 Python 3 的聲音</a>，只是一直沒有人力去做。</p>
<p>其實，雖然要完全支援的話工程有點浩大，但一小步一小步做起來就在可以處理的範圍之內。有些情況甚至用 <a href="https://docs.python.org/3.5/library/2to3.html">2to3</a> 就能有很大幫助了。於是忍不住就順手發了一個 <a href="https://github.com/s3tools/s3cmd/pull/785">pull request</a>，結果很順利就被 merge 了。感覺是很低成本的讓自己感覺對世界有貢獻的方法之一。</p>
<h2 id="找出可以幫忙的-repositories">找出可以幫忙的 repositories</h2>
<p>於是想到，其實說不定 <a href="https://github.com/">GitHub</a> 上也還存在許多可以發 pull requests 的 repositories，於是就想寫個類似 Python 3 Readiness 的頁面，專門列出有在 GitHub 上但是卻不支援 Python 3 的專案，讓有強迫症的路人可以簡單找出可以去哪貢獻。</p>
<p>就這樣，<a href="http://py3tracker.shaform.com/">py3tracker</a> 誕生了。</p>
<p>主要的作法是先用 <a href="https://wiki.python.org/moin/PyPIXmlRpc">PyPI API</a> 找出最多人下載的 projects，然後再透過 <a href="https://github.com/brettcannon/caniusepython3">caniusepython3</a> 檢查哪些不支援 Python 3，最後再偵測該 project 在 GitHub 上是否有公開原始碼。順便抓星星數用來排序。</p>
<p>本來想用 GitHub API 但是一下子就超過一天查詢限制，所以只好強抓網頁了。</p>
<p>最後的網頁樣板則是用 <a href="http://materializecss.com">materializecss</a> 快速做成。</p>
<p>希望對有強迫症的路人有所幫助。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>bs2 公開板備份初探</title>
      <link>https://city.shaform.com/zh/2016/07/26/bs2-backup/</link>
      <pubDate>Tue, 26 Jul 2016 22:30:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2016/07/26/bs2-backup/</guid>
      <description>前言 bs2.to 就要關閉了，雖然官方有提供個人板備份功能，可是公開板因為著作權問題無法備份，而若要自行轉寄信箱又太過操勞，於是我就想研究一下是否有自動</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>bs2.to 就要關閉了，雖然官方有提供個人板備份功能，可是公開板因為著作權問題無法備份，而若要自行轉寄信箱又太過操勞，於是我就想研究一下是否有自動備份的選擇。</p>
<p>經過一番搜尋，似乎有個古老的 <a href="https://github.com/iblis17/bs2-crawler">bs2-crawler</a>。雖然一開始無法成功跑起來，不過經過修改，似乎真的可以拿來備份 bs2 的看板了。</p>
<p>以下就是修改版本 <a href="https://github.com/shaform/bs2-crawler">bs2-crawler@shaform</a>，的使用教學。</p>
<h2 id="安裝">安裝</h2>
<p>首先 clone 我們修改的版本：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">git clone https://github.com/shaform/bs2-crawler</span></span></code></pre></div></div>

<p>可以用 Python 3 執行，首先使用 <a href="https://docs.python.org/3/library/venv.html">pyvenv</a> 創立虛擬環境，好安裝自己的套件：</p>
<p><div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> bs2-crawler
</span></span><span class="line hl"><span class="cl">pyvenv env</span></span></code></pre></div></div>
source env/bin/activate</p>
<p>緊接著，安裝所有這次會用到的套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip3 install -r requirements.txt</span></span></code></pre></div></div>

<h2 id="下載看板資料">下載看板資料</h2>
<p>一些著名的看板像是書評板或選課板皆可使用，以下我們就用選課板做示範：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">python3 crawler.py --board-name NCTU-Teacher</span></span></code></pre></div></div>

<p>會出現要下載哪些文章的提示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">n - <span class="m">14520</span> : 
</span></span></code></pre></div><p>輸入 1 即可下載 1~14520 所有文章。</p>
<p>下載完後會出現在 <code>articles/NCTU-Teacher</code> 的路徑裡。</p>
<p>由於倉促修改，所以還有不少 bug，像是如果有加密文章，有時會無法處理，只好請大大們自行修改了。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>價格追蹤：使用 gspread 自動更新 Google Sheets</title>
      <link>https://city.shaform.com/zh/2016/03/19/gspread/</link>
      <pubDate>Sat, 19 Mar 2016 09:02:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2016/03/19/gspread/</guid>
      <description>前言 Google Sheets 和傳統試算表最大的差異或許在於他的資料存放在遠端，所以可以從任何地方存取，也很方便和別人共享編輯。因為這個特性，使得我偶爾會將一些實</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><a href="https://www.google.com/sheets/about/">Google Sheets</a> 和傳統試算表最大的差異或許在於他的資料存放在遠端，所以可以從任何地方存取，也很方便和別人共享編輯。因為這個特性，使得我偶爾會將一些實驗資料放到 Google Sheets 上面。</p>
<p>有的時候這些實驗數據是隨著時間固定產生的，此時如果總是自己剪剪貼貼，難免會覺得有些浪費時間。幸好，Google 提供了 <a href="https://developers.google.com/google-apps/spreadsheets/">Sheets API</a>，所以我們可以透過程式自動將資料寫進試算表裡。</p>
<p><a href="https://github.com/burnash/gspread">gspread</a> 將底層的 API 又包裝成更方便好用的界面，是使用 Python 來存取 Google Sheets 很好的選擇。</p>
<p>本文便使用 Python 3 配合 gspread 來展示寫入 Google Sheets 的方法。確切的來說，我將寫一個程式每天去某個網站檢查目前的記憶體價格，然後把每天查到的價格寫入一個試算表裡，藉此追蹤價格變化。</p>
<h2 id="環境設置">環境設置</h2>
<p>首先使用 <a href="https://docs.python.org/3/library/venv.html">pyvenv</a> 創立虛擬環境，好安裝自己的套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pyvenv-3.5 my_env
</span></span><span class="line hl"><span class="cl"><span class="nb">source</span> my_env/bin/activate</span></span></code></pre></div></div>

<p>緊接著，安裝所有這次會用到的套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip install beautifulsoup4 gspread oauth2client pyOpenSSL</span></span></code></pre></div></div>

<h2 id="申請-api-用帳號">申請 API 用帳號</h2>
<p>於是就開始參考<a href="http://gspread.readthedocs.org/en/latest/oauth2.html">教學</a>，先申請一個可以用來存取 Google Sheets 的帳號。步驟如下：</p>
<ol>
<li>先到 <a href="https://console.developers.google.com/project">Google Developers Console</a> 建立一個 project。</li>
<li>啟動該 project 的 <a href="https://console.developers.google.com/apis/api/drive/overview">Drive API</a>。</li>
<li>在 <a href="https://console.developers.google.com/apis/credentials">Credentials</a> 頁面按下 Create credentials -&gt; Service account key。</li>
<li>取好名字，選擇 JSON 作為 Key type。</li>
</ol>
<p>下載好 JSON 檔案，把他取名為 <code>auth.json</code>，之後會用到，它大概會長這樣：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;service_account&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;project_id&#34;</span><span class="p">:</span> <span class="s2">&#34;cool-236196&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;private_key_id&#34;</span><span class="p">:</span> <span class="s2">&#34;ab18...24&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;private_key&#34;</span><span class="p">:</span> <span class="s2">&#34;-----BEGIN PRIVATE KEY-----...-----END PRIVATE KEY-----\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;client_email&#34;</span><span class="p">:</span> <span class="s2">&#34;name...@....gserviceaccount.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;client_id&#34;</span><span class="p">:</span> <span class="s2">&#34;21..6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;auth_uri&#34;</span><span class="p">:</span> <span class="s2">&#34;https://accounts.google.com/o/oauth2/auth&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_uri&#34;</span><span class="p">:</span> <span class="s2">&#34;https://accounts.google.com/o/oauth2/token&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;auth_provider_x509_cert_url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://www.googleapis.com/oauth2/v1/certs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;client_x509_cert_url&#34;</span><span class="p">:</span> <span class="s2">&#34;https://www.googleapis.com/...&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="建立試算表">建立試算表</h2>
<p>接下來我們到 <a href="https://www.google.com/sheets/about/">Google Sheets</a> 建立一個試算表，同時將試算表分享給剛剛的 <code>auth.json</code> 裡 <code>client_email</code> 欄位提到的 email 帳號： <code>name...@....gserviceaccount.com</code>，並給予編輯的權限，這樣子才有辦法透過程式存取。</p>
<p>將試算表多餘的欄位刪除，只剩下 date, item, price 三欄，並留下新的一個空白行，好讓程式插入資料時，也能有白色背景。</p>
<p><img src="/images/gspread-1.png" alt="Create a spreadsheet"></p>
<p>最後我們把網址中 <code>https://docs.google.com/spreadsheets/d/{key}/edit</code> 的 <code>{key}</code> 複製到 <code>spreadsheet_key</code> 檔案裡，供之後程式要開啟試算表時存取。</p>
<h2 id="抓取資料">抓取資料</h2>
<p>這裡我們透過 <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a> 從某個價格看板挖出最便宜的記憶體價格當作指標指數。確切的來說，我們先搜尋「記憶體 RAM」關鍵字找出項目清單，然後一個一個搜尋價格，並紀錄最便宜的項目。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># update.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_cheapest</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span> <span class="k">as</span> <span class="n">response</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">(),</span> <span class="s1">&#39;lxml&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cheapest_price</span> <span class="o">=</span> <span class="n">cheapest_item</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">re_price</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\$(\d+)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;td&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">text</span><span class="p">))</span><span class="o">.</span><span class="n">parent</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">option</span> <span class="ow">in</span> <span class="n">root</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;option&#39;</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">re_price</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span> <span class="o">=</span> <span class="n">option</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">price</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">re_price</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">item</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">cheapest_price</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">or</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="n">cheapest_price</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">cheapest_price</span> <span class="o">=</span> <span class="n">price</span>
</span></span><span class="line"><span class="cl">            <span class="n">cheapest_item</span> <span class="o">=</span> <span class="n">item</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">cheapest_item</span><span class="p">,</span> <span class="n">cheapest_price</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">coolpc_url</span> <span class="o">=</span> <span class="s1">&#39;http://www.coolpc.com.tw/evaluate.php&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="n">ram_text</span> <span class="o">=</span> <span class="s1">&#39;記憶體 RAM&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">cheapest_item</span><span class="p">,</span> <span class="n">cheapest_price</span><span class="p">)</span> <span class="o">=</span> <span class="n">get_cheapest</span><span class="p">(</span><span class="n">coolpc_url</span><span class="p">,</span> <span class="n">ram_text</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="更新-google-sheets">更新 Google Sheets</h2>
<p>接下來先撰寫帳號登入的部份，利用 <code>oauth2client</code> 中的 <code>ServiceAccountCredentials</code> 來讀取之前的 <code>auth.json</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gspread</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">oauth2client.service_account</span> <span class="kn">import</span> <span class="n">ServiceAccountCredentials</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">auth_gss_client</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">scopes</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">credentials</span> <span class="o">=</span> <span class="n">ServiceAccountCredentials</span><span class="o">.</span><span class="n">from_json_keyfile_name</span><span class="p">(</span><span class="n">path</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                                   <span class="n">scopes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">gspread</span><span class="o">.</span><span class="n">authorize</span><span class="p">(</span><span class="n">credentials</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">auth_json_path</span> <span class="o">=</span> <span class="s1">&#39;auth.json&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">gss_scopes</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;https://spreadsheets.google.com/feeds&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gss_client</span> <span class="o">=</span> <span class="n">auth_gss_client</span><span class="p">(</span><span class="n">auth_json_path</span><span class="p">,</span> <span class="n">gss_scopes</span><span class="p">)</span>
</span></span></code></pre></div><p>接下來再用 <code>open_by_key</code> 打開試算表，用 <code>sheet1</code> 存取第一頁，再用 <code>insert_row</code> 插入更新的價格：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># update.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">update_sheet</span><span class="p">(</span><span class="n">gss_client</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">today</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">price</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">wks</span> <span class="o">=</span> <span class="n">gss_client</span><span class="o">.</span><span class="n">open_by_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sheet</span> <span class="o">=</span> <span class="n">wks</span><span class="o">.</span><span class="n">sheet1</span>
</span></span><span class="line"><span class="cl">    <span class="n">sheet</span><span class="o">.</span><span class="n">insert_row</span><span class="p">([</span><span class="n">today</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">price</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">spreadsheet_key_path</span> <span class="o">=</span> <span class="s1">&#39;spreadsheet_key&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">cheapest_price</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">today</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">%c</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">spreadsheet_key_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">spreadsheet_key</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">update_sheet</span><span class="p">(</span><span class="n">gss_client</span><span class="p">,</span> <span class="n">spreadsheet_key</span><span class="p">,</span> <span class="n">today</span><span class="p">,</span> <span class="n">cheapest_item</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                 <span class="n">cheapest_price</span><span class="p">)</span>
</span></span></code></pre></div><p>測試一下，應該可以看到資料被成功插入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python update.py
</span></span></code></pre></div><p><img src="/images/gspread-2.png" alt="Insert data"></p>
<h2 id="設定-crontab">設定 crontab</h2>
<p>當然，每次都要手動執行程式一點也不自動。所以我們會用 <a href="https://help.ubuntu.com/community/CronHowto">crontab</a> 來自動執行我們的程式。</p>
<p>由於我們使用到了 <code>pyvenv</code>，而且很多檔案路徑都是用相對路徑，因此我另外寫了一個 bash script 來幫忙設定好執行 Python 的步驟。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># start_update.sh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get directory of the script</span>
</span></span><span class="line"><span class="cl"><span class="nv">curr_dir</span><span class="o">=</span><span class="sb">`</span>dirname <span class="s2">&#34;</span><span class="nv">$BASH_SOURCE</span><span class="s2">&#34;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> <span class="nv">$curr_dir</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> my_env/bin/activate
</span></span><span class="line"><span class="cl">python update.py
</span></span></code></pre></div><p>用 <code>chmod +x start_update.sh</code> 打開執行權限，最後執行 <code>crontab -e</code> 並增加下面一行：</p>
<pre><code>@daily {path_to_script_directory}/start_update.sh
</code></pre>
<p>如此一來就會每天自動更新了！</p>
<h2 id="參考文件">參考文件</h2>
<ul>
<li><a href="http://gspread.readthedocs.org/en/latest/index.html">gspread API reference</a></li>
<li><a href="http://www.indjango.com/access-google-sheets-in-python-using-gspread/">Access google sheets in python using Gspread</a></li>
<li><a href="https://github.com/shaform/experiments/tree/master/gspread">https://github.com/shaform/experiments/tree/master/gspread</a></li>
</ul>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/dots.jpg" alt="Dots" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>Scrapy &#43; Python 3: PTT 資料抓取與分析</title>
      <link>https://city.shaform.com/zh/2016/02/28/scrapy/</link>
      <pubDate>Sun, 28 Feb 2016 10:23:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2016/02/28/scrapy/</guid>
      <description>Scrapy 1.1 with Python 3 Support 很久很久以前，曾經想要學學網路爬蟲，爬一些 PTT 的資料來看看能幹嘛。當時找到了 Scrapy 這個程式庫，覺得很有潛力。只可惜當初他還不太支援 Python 3</description>
      <content:encoded><![CDATA[<h2 id="scrapy-11-with-python-3-support">Scrapy 1.1 with Python 3 Support</h2>
<p>很久很久以前，曾經想要學學網路爬蟲，爬一些 <a href="https://www.ptt.cc/bbs/index.html">PTT</a> 的資料來看看能幹嘛。當時找到了 <a href="http://scrapy.org/">Scrapy</a> 這個程式庫，覺得很有潛力。只可惜當初他還不太支援 <a href="http://cyrille.rossant.net/why-you-should-move-to-python-3-now/">Python 3</a>，於是就暫且放下學習的念頭，想說先等等看。</p>
<p>如今，<a href="https://pypi.python.org/pypi/Scrapy/1.1.0">Scrapy 1.1</a> 釋出，除了一些功能的更新外，他也終於要<a href="https://github.com/scrapy/scrapy/issues/263">支援基本的 Python 3</a> 了！於是抱持著推廣 Python 3 的想法，重拾之前的目標，實際測試了一下網路爬蟲的撰寫。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2019/cobweb.jpg" alt="Coweb" />
    </div>
    
  </figure>
</div>

<h2 id="環境設置">環境設置</h2>
<p>由於這次是要爬 PTT 的資料，為了避免一旦被鎖 IP，就會無法上 PTT，很不方便。所以我特地使用了 NTU CS 自己的機器，同時也設定高一點的連線延遲，避免同時產生太多連線。</p>
<p>如果你是用自己的主機而不是用系上工作站，可能還需要安裝額外套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt-get install python3-dev libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</span></span></code></pre></div></div>

<p>接下來就能使用 <a href="https://docs.python.org/3/library/venv.html">pyvenv</a> 創立虛擬環境，好安裝自己的 Python 套件：</p>
<p><div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pyvenv-3.5 my_env
</span></span><span class="line hl"><span class="cl"><span class="nb">source</span> my_env/bin/activate</span></span></code></pre></div></div>
pip install -U pip</p>
<p>緊接著，安裝所有這次會用到的套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 不知為何在工作站上要用 `python /sbin/pip3.5` 來取代下述的 `pip` 才能跑</span>
</span></span><span class="line hl"><span class="cl">pip install <span class="nv">Scrapy</span><span class="o">==</span>1.1.0 numpy notebook scipy scikit-learn seaborn jieba</span></span></code></pre></div></div>

<h2 id="撰寫爬蟲">撰寫爬蟲</h2>
<p>於是就開始參考<a href="http://doc.scrapy.org/en/latest/intro/tutorial.html">教學</a>撰寫我人生中第一個 Scrapy 爬蟲！</p>
<p>首先創立專案：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy startproject ptt</span></span></code></pre></div></div>

<p>設定連線延遲：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt/settings.py</span>
</span></span><span class="line"><span class="cl"><span class="n">DOWNLOAD_DELAY</span> <span class="o">=</span> <span class="mf">1.25</span>
</span></span></code></pre></div><p>然後定義一些想要抓取的項目，包含本文和推文等等：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># &lt;root_dir&gt;/ptt/items.py</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PostItem</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Item</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">author</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">date</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">comments</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">score</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Field</span><span class="p">()</span>
</span></span></code></pre></div><p>接著就編輯 <code>&lt;root_dir&gt;/ptt/spiders/ptt.py</code> 實際撰寫爬蟲程式了。</p>
<p>首先測試一下是否真的可以連上 PTT：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scrapy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PTTSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;ptt&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ptt.cc&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;https://www.ptt.cc/bbs/Gossiping/index.html&#39;</span><span class="p">,</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">filename</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;.html&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span></span></code></pre></div><p>然後在 <code>&lt;root_dir&gt;</code> 根目錄（有 <code>scrapy.cfg</code> 的目錄）執行：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy crawl ptt</span></span></code></pre></div></div>

<p>完成後應該會發現存下了一個詢問年紀是否已經大到可以觀看八卦版的網頁。為了能夠成功抓取八卦版文章，我們必須要自動回答這個問題才行。雖然也可以直接用 <a href="http://doc.scrapy.org/en/latest/topics/request-response.html#topics-request-response">cookies</a> 參數傳入回答紀錄，不過這裡為了盡量模擬人類的行為，所以決定真正的送出表單。（Scrapy 會自動記下送出表單後產生的 cookie。）</p>
<h3 id="自動回答年齡問題">自動回答年齡問題</h3>
<p>於是我們新增測試，利用 <code>div.over18-notice</code> 的存在來偵測是否進到年齡詢問的頁面。這裡使用到了 <a href="https://en.wikipedia.org/wiki/XPath">XPath</a>
來指定物件的位置。記得當初在微軟寫測試程式時也有用到，現在再碰到一次感覺格外熟悉。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">scrapy.http</span> <span class="kn">import</span> <span class="n">FormRequest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PTTSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">_retries</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">MAX_RETRY</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//div[@class=&#34;over18-notice&#34;]&#39;</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_retries</span> <span class="o">&lt;</span> <span class="n">PTTSpider</span><span class="o">.</span><span class="n">MAX_RETRY</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">_retries</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;retry </span><span class="si">{}</span><span class="s1"> times...&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_retries</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="k">yield</span> <span class="n">FormRequest</span><span class="o">.</span><span class="n">from_response</span><span class="p">(</span><span class="n">response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                                <span class="n">formdata</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;yes&#39;</span><span class="p">:</span> <span class="s1">&#39;yes&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                                                <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">parse</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;you cannot pass&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># ...</span>
</span></span></code></pre></div><p>我們利用 <code>FormRequest</code> 在遇到詢問頁時自動送出表單，然後用 <code>callback</code> 在表單送出成功後重新回到原本的 <code>parse</code>
函式，繼續處理。為了避免表單傳送失敗會不斷嘗試卡住，所以用 <code>MAX_RETRY</code>
稍微限制表單傳送的次數。</p>
<h3 id="自動翻頁並打開每篇文章">自動翻頁，並打開每篇文章</h3>
<p>接下來就是實際爬文的程式了，這裡也嘗試使用 <a href="http://doc.scrapy.org/en/stable/topics/selectors.html">CSS Selector</a>，利用 <code>css('.r-ent &gt; div.title &gt; a::attr(href)')</code>
來抓出每個文章的連結。
再使用 <code>response.urljoin</code> 把相對路徑轉成絕對路徑。然後把他送給 <code>parse_post</code> 做進一步處理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PTTSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">_pages</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">MAX_PAGES</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//div[@class=&#34;over18-notice&#34;]&#39;</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">_pages</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">href</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.r-ent &gt; div.title &gt; a::attr(href)&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">urljoin</span><span class="p">(</span><span class="n">href</span><span class="o">.</span><span class="n">extract</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                <span class="k">yield</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">parse_post</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pages</span> <span class="o">&lt;</span> <span class="n">PTTSpider</span><span class="o">.</span><span class="n">MAX_PAGES</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_page</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;//div[@id=&#34;action-bar-container&#34;]//a[contains(text(), &#34;上頁&#34;)]/@href&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">next_page</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">urljoin</span><span class="p">(</span><span class="n">next_page</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">                    <span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;follow </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="k">yield</span> <span class="n">scrapy</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;no next page&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">logging</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s1">&#39;max pages reached&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>最後再用 XPath 找出上一頁的連結，自動翻頁。至於要翻幾頁，則用 <code>MAX_PAGES</code> 控制。</p>
<h3 id="實際抓文">實際抓文</h3>
<p>最後就是實際的抓文程式了，除了抓下標題、作者、本文等等，我也抓下每一則推文的作者和分數，以及整篇文章的分數。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">ptt.items</span> <span class="kn">import</span> <span class="n">PostItem</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PTTSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="o">.</span><span class="n">Spider</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">parse_post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span> <span class="o">=</span> <span class="n">PostItem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//meta[@property=&#34;og:title&#34;]/@content&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;author&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//div[@class=&#34;article-metaline&#34;]/span[text()=&#34;作者&#34;]/following-sibling::span[1]/text()&#39;</span><span class="p">)[</span>
</span></span><span class="line"><span class="cl">                <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">datetime_str</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;//div[@class=&#34;article-metaline&#34;]/span[text()=&#34;時間&#34;]/following-sibling::span[1]/text()&#39;</span><span class="p">)[</span>
</span></span><span class="line"><span class="cl">                <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">datetime_str</span><span class="p">,</span> <span class="s1">&#39;</span><span class="si">%a</span><span class="s1"> %b </span><span class="si">%d</span><span class="s1"> %H:%M:%S %Y&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//div[@id=&#34;main-content&#34;]/text()&#39;</span><span class="p">)[</span>
</span></span><span class="line"><span class="cl">            <span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">comments</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_score</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">comment</span> <span class="ow">in</span> <span class="n">response</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s1">&#39;//div[@class=&#34;push&#34;]&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">push_tag</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;span.push-tag::text&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">push_user</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;span.push-userid::text&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">push_content</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;span.push-content::text&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="s1">&#39;推&#39;</span> <span class="ow">in</span> <span class="n">push_tag</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">score</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="s1">&#39;噓&#39;</span> <span class="ow">in</span> <span class="n">push_tag</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">score</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">total_score</span> <span class="o">+=</span> <span class="n">score</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">comments</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s1">&#39;user&#39;</span><span class="p">:</span> <span class="n">push_user</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;content&#39;</span><span class="p">:</span> <span class="n">push_content</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                             <span class="s1">&#39;score&#39;</span><span class="p">:</span> <span class="n">score</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;comments&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">comments</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">total_score</span>
</span></span><span class="line"><span class="cl">        <span class="n">item</span><span class="p">[</span><span class="s1">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">url</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">item</span>
</span></span></code></pre></div><p>最後執行以下指令，就可以把文章存成一個大 JSON 檔案：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">scrapy crawl ptt -o gossip.json</span></span></code></pre></div></div>

<h2 id="在-ipython-notebook-裡做資料分析">在 IPython Notebook 裡做資料分析</h2>
<p>爬完文之後就可以分析了，這次我一共爬了 1881 篇八卦版的文章。
跟之前一樣是用 IPython Notebook 來進行分析，可以直接在 <a href="http://nbviewer.jupyter.org/github/shaform/experiments/blob/master/scrapy/PTT%20Analysis.ipynb">PTT Analysis @ nbviewer</a> 上閱讀。</p>
<p>因為之前看 <a href="http://www.cs109.org">CS 109</a> 時發現 <a href="http://stanford.edu/~mwaskom/software/seaborn/">Seaborn</a> 畫的圖好像比較漂亮，這次也決定試試。共會用到以下套件：</p>
<ol>
<li><a href="http://matplotlib.org/">matplotlib</a></li>
<li><a href="http://www.numpy.org/">Numpy</a></li>
<li><a href="http://scikit-learn.org/stable/index.html">scikit-learn</a></li>
<li><a href="http://stanford.edu/~mwaskom/software/seaborn/">Seaborn</a></li>
<li><a href="https://github.com/fxsjy/jieba">结巴中文分词</a></li>
</ol>
<p>首先載入所有會用到的套件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">matplotlib</span> <span class="n">notebook</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jieba</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.feature_extraction</span> <span class="kn">import</span> <span class="n">DictVectorizer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfTransformer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">LinearSVC</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sns</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="s1">&#39;whitegrid&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>然後載入所有文章：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># load ptt posts</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;gossip.json&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">posts</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="推文分析">推文分析</h3>
<p>我決定先來看看大家都推了多少文，或許可以當作宅度量表之類的。不過為了隱私問題，這裡就不列出實際的 ID 了。先載入每個人的推噓文數目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># get pushes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">total_comments</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">total_pushes</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">total_hates</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">post</span> <span class="ow">in</span> <span class="n">posts</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">comment</span> <span class="ow">in</span> <span class="n">post</span><span class="p">[</span><span class="s1">&#39;comments&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span> <span class="o">=</span> <span class="n">comment</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">total_comments</span><span class="p">[</span><span class="n">user</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">comment</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_pushes</span><span class="p">[</span><span class="n">user</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">comment</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">total_hates</span><span class="p">[</span><span class="n">user</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span></code></pre></div><p>然後就可以畫出排名最高一百名的推文者到底推了多少文。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show_distributions</span><span class="p">(</span><span class="n">counts</span><span class="p">,</span> <span class="n">pushes</span><span class="p">,</span> <span class="n">hates</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">sorted_cnts</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">counts</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="o">-</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])][:</span><span class="mi">100</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="n">counts</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">sorted_cnts</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_pushes</span> <span class="o">=</span> <span class="p">[</span><span class="n">pushes</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">sorted_cnts</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_hates</span> <span class="o">=</span> <span class="p">[</span><span class="n">hates</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">sorted_cnts</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sns</span><span class="o">.</span><span class="n">set_color_codes</span><span class="p">(</span><span class="s1">&#39;pastel&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sns</span><span class="o">.</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Total </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sns</span><span class="o">.</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_pushes</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Total </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;pushes&#39;</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;green&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sns</span><span class="o">.</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y_hates</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s1">&#39;Total </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;hates&#39;</span><span class="p">),</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">ncol</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="s1">&#39;upper right&#39;</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">ylabel</span><span class="o">=</span><span class="s1">&#39;counts&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">xlabel</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Total comments&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sns</span><span class="o">.</span><span class="n">despine</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">bottom</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># display pushes</span>
</span></span><span class="line"><span class="cl"><span class="n">show_distributions</span><span class="p">(</span><span class="n">total_comments</span><span class="p">,</span> <span class="n">total_pushes</span><span class="p">,</span> <span class="n">total_hates</span><span class="p">)</span>
</span></span></code></pre></div><p>可以看到，大部分都是推文比較多，不過也有人幾乎都在噓文呢！</p>
<h4 id="每個推文者的推噓文次數">每個推文者的推噓文次數</h4>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2016/push.png" alt="Push" />
    </div>
    
  </figure>
</div>

<h3 id="用語分析">用語分析</h3>
<p>接下來我們來看看文章裡出現哪些字比較容易被推或噓，以及網友推噓文時都用什麼用詞吧。</p>
<p>首先利用結巴分詞，把每篇文章的詞收集起來，順便紀錄文章分數：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># grap post</span>
</span></span><span class="line"><span class="cl"><span class="n">words</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="n">scores</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">post</span> <span class="ow">in</span> <span class="n">posts</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="n">post</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">post</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">l</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">d</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">words</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">scores</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">post</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
</span></span></code></pre></div><p>推文們也比照辦理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># grap comments</span>
</span></span><span class="line"><span class="cl"><span class="n">c_words</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="n">c_scores</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">post</span> <span class="ow">in</span> <span class="n">posts</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">comment</span> <span class="ow">in</span> <span class="n">post</span><span class="p">[</span><span class="s1">&#39;comments&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">l</span> <span class="o">=</span> <span class="n">comment</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">l</span> <span class="ow">and</span> <span class="n">comment</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">d</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">jieba</span><span class="o">.</span><span class="n">cut</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">d</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">c_scores</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">comment</span><span class="p">[</span><span class="s1">&#39;score&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">c_words</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span></span></code></pre></div><p>最後用 <code>TfidfTransformer</code> 做出特徵向量，配合 <code>LinearSVC</code> 進行預測訓練：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># convert to vectors</span>
</span></span><span class="line"><span class="cl"><span class="n">dvec</span> <span class="o">=</span> <span class="n">DictVectorizer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">tfidf</span> <span class="o">=</span> <span class="n">TfidfTransformer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">X</span> <span class="o">=</span> <span class="n">tfidf</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">dvec</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">words</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">c_dvec</span> <span class="o">=</span> <span class="n">DictVectorizer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">c_tfidf</span> <span class="o">=</span> <span class="n">TfidfTransformer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">c_X</span> <span class="o">=</span> <span class="n">c_tfidf</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">c_dvec</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">c_words</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">svc</span> <span class="o">=</span> <span class="n">LinearSVC</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">svc</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">scores</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">c_svc</span> <span class="o">=</span> <span class="n">LinearSVC</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">c_svc</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">c_X</span><span class="p">,</span> <span class="n">c_scores</span><span class="p">)</span>
</span></span></code></pre></div><p>然後就可以畫圖了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_top_features</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">,</span> <span class="n">top_n</span><span class="p">,</span> <span class="n">select</span><span class="o">=</span><span class="nb">abs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">top_features</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">select</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)[:</span><span class="n">top_n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">top_weights</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">top_features</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">top_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">top_features</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ind</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">top_n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">ind</span><span class="p">,</span> <span class="n">top_weights</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">bar</span><span class="p">,</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">bars</span><span class="p">,</span> <span class="n">top_weights</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">bar</span><span class="o">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mf">0.30</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">ind</span> <span class="o">+</span> <span class="n">width</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xticklabels</span><span class="p">(</span><span class="n">top_names</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">fontdict</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;fontname&#39;</span><span class="p">:</span> <span class="s1">&#39;Droid Sans Fallback&#39;</span><span class="p">,</span> <span class="s1">&#39;fontsize&#39;</span><span class="p">:</span><span class="mi">12</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span></code></pre></div><p>原本我想同時列出正向和負向詞彙，但後來發現似乎負向詞彙都比較強，所以只好分開列出了。</p>
<p>首先是貼文的負向詞彙，不知為何，如果文中出現「妹妹」似乎就很容易被噓呢！</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># top features for posts</span>
</span></span><span class="line"><span class="cl"><span class="n">display_top_features</span><span class="p">(</span><span class="n">svc</span><span class="o">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">dvec</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">(),</span> <span class="mi">30</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="貼文負向詞彙">貼文負向詞彙</h4>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2016/negative.png" alt="Negative" />
    </div>
    
  </figure>
</div>

<p>然後是貼文的正向詞彙，看不出什麼 QQ。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># top positive features for posts</span>
</span></span><span class="line"><span class="cl"><span class="n">display_top_features</span><span class="p">(</span><span class="n">svc</span><span class="o">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">dvec</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">(),</span> <span class="mi">30</span><span class="p">,</span> <span class="n">select</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="貼文正向詞彙">貼文正向詞彙</h4>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2016/positive.png" alt="Positive" />
    </div>
    
  </figure>
</div>

<p>推文的正負向詞彙倒是滿有趣，最強的特徵是「紅明顯」和「給推」，哈哈。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># top features for comments</span>
</span></span><span class="line"><span class="cl"><span class="n">display_top_features</span><span class="p">(</span><span class="n">c_svc</span><span class="o">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">c_dvec</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">(),</span> <span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># top positive features for comments</span>
</span></span><span class="line"><span class="cl"><span class="n">display_top_features</span><span class="p">(</span><span class="n">c_svc</span><span class="o">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">c_dvec</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">(),</span> <span class="mi">30</span><span class="p">,</span> <span class="n">select</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><h4 id="推文負向詞彙">推文負向詞彙</h4>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2016/negative-push.png" alt="Negative Push" />
    </div>
    
  </figure>
</div>

<h4 id="推文正向詞彙">推文正向詞彙</h4>


<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2016/positive-push.png" alt="Positive Push" />
    </div>
    
  </figure>
</div>

<h2 id="結語">結語</h2>
<p>雖然已經過了那麼多年，<a href="http://py3readiness.org/">Python 3 的使用率</a>還是沒能上升到理想的境界，不過已經是漸入佳境了。
希望更多人一起來寫 Python 3。</p>
<p>做完分析感覺 PTT 實在是一個寶庫，尤其各種特殊看板似乎很適合拿來測風向。不知還能做出什麼分析應用呢？</p>
<p>這次實驗所用到的程式碼按照慣例放在 GitHub 上面供參考：<a href="https://github.com/shaform/experiments/tree/master/scrapy">https://github.com/shaform/experiments/tree/master/scrapy</a>。</p>
<h2 id="連結">連結</h2>
<p>若您喜歡這篇文章，或許你也會對下一篇：<a href="/zh/2017/05/13/scrapy-cloud/">〈Scrapy Cloud + Scrapy 網路爬蟲〉</a>感興趣。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Caffe 程式閱讀筆記</title>
      <link>https://city.shaform.com/zh/2016/02/26/caffe/</link>
      <pubDate>Fri, 26 Feb 2016 07:12:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2016/02/26/caffe/</guid>
      <description>前陣子有機會研究了一下 Caffe framework 的程式碼，於是把內容記下來避免忘記。 由於自己對該程式庫也不是很熟悉，加上一直拖稿導致 Caffe 在撰寫期間也已經有不少變動，</description>
      <content:encoded><![CDATA[<p>前陣子有機會研究了一下 Caffe framework 的程式碼，於是把內容記下來避免忘記。
由於自己對該程式庫也不是很熟悉，加上一直拖稿導致 Caffe 在撰寫期間也已經有不少變動，
以致可能有許多不正確的地方，還請各位大大不吝指教。</p>
<p>主要分成四個部份來講。首先是整個 Caffe 的大架構，以及一些重要的元件。
其次，我也研究了如何自己新增一個 layer。
接下來，再重新回到 Caffe 做更深入的解析。</p>
<!-- raw HTML omitted -->
<h2 id="架構">架構</h2>
<p>那麼，就從大架構開始講起。
Caffe 的 command line 工具有幾個功能，他可以讓你 train 一個 model，
也可以讓你用 train 好的 model 來進行效能的檢驗。當他在做 training 時，
他會建立一個 Solver 物件，他的主要功能就是協調類神經網路的運作來進行訓練。</p>
<p><img src="/images/caffe_overview.png" alt="Overview"></p>
<p>我們可以用一個設定檔來指定 Solver 的參數，像是 learning rate 或者是 Solver 的種類，
例如 SGD Solver 等等。在設定檔中，可以指定一個 training net 的參數，
testing nets 則有可能有多個。例如如果要用不同的 data set 同時驗證 model 的效能時就可以用到。
雖然也可以直接把網路定義寫在 Solver 的設定檔裡，不過範例程式碼通常把他寫在獨立的設定檔中。</p>
<p>Solver 會根據這些設定檔，建立相對應的 training 和 testing 的 Net 物件。而 Net，
就會根據整個網路的定義，建立每個 Layer，同時也會建立很多的 Blobs 來放置 Layer
跟 Layer 間的輸出入資料，並把他們都接起來。其中，一個 layer 的輸入被稱為 bottom
blobs，輸出則為 top blobs。 Blob 基本上是一個多維陣列，不過他除了用來放 Data 外，
也同時包含一組對應的 Diff，可以用來放 Gradient 的計算結果。這些 Blobs 提供了簡易的界面，
可以讓 Layer 透過 GPU 或 CPU 來存取裡頭的資料。</p>
<p>而這些 Layers 除了有計算的功能以外，也有一些特別的 data layers 可以把資料從檔案中讀進來，
或者把輸出的結果寫到特定的檔案。此外，也有一些 loss layer 是用來計算最後預測結果的分數，
並藉此資訊讓 solver 得以最佳化所有的參數。每個 layer 會建立額外的 blobs 來放置這些可訓練的參數，
而 Net 在建立 layer 時，會把這些 blobs 也收集起來，方便 Solver 根據 learning rate 來計算每個參數的更新值。
當 Solver 呼叫了 Net 的 Forward 和 Backward 之後，資料就會沿著一層一層的 layer 進行計算。</p>
<h2 id="新增-layer">新增 Layer</h2>
<p>講完大略的架構後。我們就可以把焦點放在新增 layers 上。</p>
<p>要新增一個 layer，官方其實有提供<a href="https://github.com/BVLC/caffe/wiki/Development">簡單的指引</a>。
但除了單純的看文件之外，我們其實也可以參考看看以前的人是怎麼做的。</p>
<p>沒有錯，理論上應該有不同的人、在不同的時間點。分別新增了不同的  layers。
只要找出這些 commits 並且觀察裡頭的內容，應該就可以推測出要如何新增了。</p>
<p>所以，我選了兩個 pull requests:
<a href="https://github.com/BVLC/caffe/pull/1940">#1940</a>,
<a href="https://github.com/BVLC/caffe/pull/303">#303</a>，並且對照他們修改的檔案。</p>
<p>很快的，就可以看出其中的規律。他們都修改了一個叫做 caffe.proto 的檔案，
用來定義 layer 可以設定的參數。
HingeLoss 的修改還改動了 layer factory，不過看起來是因為以前在新增 layer 時，
要修改一個選擇 layer 的函數。
現在的 layer 都被放進一個 dictionary 裡，透過名稱取出，所以就不需要這種修改了。
只有一些有 cuDNN 實作的 layers 會在這裡放一個特別的函數來選擇實作的引擎。</p>
<p>接下來 <code>src/caffe/layers/*</code>, <code>include/caffe/*</code> 等檔案，則是 layer 實際的宣告以及實作。
以前 layer 的宣告依照分類被放置在不同的地方。
比如說 <code>neuron_layers.hpp</code> 通常是放進行 element-wise operations 的 layers。
<code>vision_layers.hpp</code> 則是放跟影像比較相關的 layers。
不過後來不同的 layers 就被搬到獨立的檔案了。</p>
<p>最後 <code>src/caffe/test/*</code> 則是一些測試。</p>
<p>於是我就實際的修改看看，我要加入一個很簡單的 layer，
他會把所有的輸入乘上一個事先指定的參數。
我在 caffe.proto 修改了三個地方，包含下個可用的 ID、放置參數的變數，
和實際的 layer 參數，也就是要乘上的那個常數。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// src/caffe/proto/caffe.proto
</span></span></span><span class="line"><span class="cl"><span class="c1">// LayerParameter next available layer-specific ID: 144 (last added: zzz_param)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">message</span> <span class="n">LayerParameter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">optional</span> <span class="n">ZZZParameter</span> <span class="n">zzz_param</span> <span class="o">=</span> <span class="mi">143</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// Message that stores parameters used by ZZZLayer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">message</span> <span class="n">ZZZParameter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Whether or not slope paramters are shared across channels.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">optional</span> <span class="n">int32</span> <span class="n">mul</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="k">default</span> <span class="o">=</span> <span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然後，我複製了一些簡單的宣告。其中主要的修改只有新增了一個 mul 參數，用來存放要乘的常數。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// include/caffe/layers/zzz_layer.hpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Dtype</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ZZZLayer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">NeuronLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="n">ZZZLayer</span><span class="p">(</span><span class="k">const</span> <span class="n">LayerParameter</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="n">NeuronLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span><span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">LayerSetUp</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">bottom</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">top</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kr">inline</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">type</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;ZZZ&#34;</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Forward_cpu</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">bottom</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">top</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">Forward_gpu</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">bottom</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">top</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">Backward_cpu</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">top</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">propagate_down</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">bottom</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">Backward_gpu</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">top</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">propagate_down</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">bottom</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Dtype</span> <span class="n">mul_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>實作的部份因為初始化很簡單，只有讀取將來要乘的常數，所以主要的實作只有 Forward 和 Backward。
不過一些複雜的 layers 可能就會需要實作一些複雜的初始化，和計算輸出維度大小的函數。
Neuron layer 因為是 element-wise ，所以輸出的維度大小就跟輸入一樣。</p>
<p>Forward的部份，是先把 bottom_data 複製到 top，然後再將整個 top scale 指定的常數。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// src/caffe/layers/zzz_layer.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Dtype</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ZZZLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;::</span><span class="n">Forward_cpu</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">bottom</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                     <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">top</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">Dtype</span><span class="o">*</span> <span class="n">bottom_data</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">cpu_data</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">Dtype</span><span class="o">*</span> <span class="n">top_data</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mutable_cpu_data</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">caffe_copy</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">bottom_data</span><span class="p">,</span> <span class="n">top_data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">mul_</span> <span class="o">!=</span> <span class="n">Dtype</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">caffe_scal</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">mul_</span><span class="p">,</span> <span class="n">top_data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Backward 也很類似，確定需要計算後，先把 top_diff 複製到 bottom_diff 再 scale 指定的常數。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// src/caffe/layers/zzz_layer.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Dtype</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ZZZLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;::</span><span class="n">Backward_cpu</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">top</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                      <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">propagate_down</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                      <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">bottom</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">propagate_down</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">Dtype</span> <span class="o">*</span><span class="n">top_diff</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">cpu_diff</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Dtype</span> <span class="o">*</span><span class="n">bottom_diff</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mutable_cpu_diff</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">caffe_copy</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">top_diff</span><span class="p">,</span> <span class="n">bottom_diff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">caffe_scal</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">mul_</span><span class="p">,</span> <span class="n">bottom_diff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>CUDA 的版本也很類似，只是從 blob 要取出 gpu data ，然後 scale 時要選 GPU 的版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// src/caffe/layers/zzz_layer.cu
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Dtype</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ZZZLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;::</span><span class="n">Forward_gpu</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">bottom</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">top</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">Dtype</span><span class="o">*</span> <span class="n">bottom_data</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">gpu_data</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">Dtype</span><span class="o">*</span> <span class="n">top_data</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mutable_gpu_data</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">caffe_copy</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">bottom_data</span><span class="p">,</span> <span class="n">top_data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">mul_</span> <span class="o">!=</span> <span class="n">Dtype</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">caffe_gpu_scal</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">mul_</span><span class="p">,</span> <span class="n">top_data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Dtype</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ZZZLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;::</span><span class="n">Backward_gpu</span><span class="p">(</span><span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">top</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;&amp;</span> <span class="n">propagate_down</span><span class="p">,</span> <span class="k">const</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">Blob</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;*&gt;&amp;</span> <span class="n">bottom</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">propagate_down</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="n">Dtype</span> <span class="o">*</span><span class="n">top_diff</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">gpu_diff</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Dtype</span> <span class="o">*</span><span class="n">bottom_diff</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">mutable_gpu_diff</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">caffe_copy</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">top_diff</span><span class="p">,</span> <span class="n">bottom_diff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">caffe_gpu_scal</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">mul_</span><span class="p">,</span> <span class="n">bottom_diff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>最後我們再加一些 test，檢查 forward 確實成功乘上參數。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// src/caffe/test/test_zzz_layer.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">TYPED_TEST</span><span class="p">(</span><span class="n">NeuronLayerTest</span><span class="p">,</span> <span class="n">TestZZZForward</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">typedef</span> <span class="k">typename</span> <span class="n">TypeParam</span><span class="o">::</span><span class="n">Dtype</span> <span class="n">Dtype</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">LayerParameter</span> <span class="n">layer_param</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">ZZZLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="n">layer</span><span class="p">(</span><span class="n">layer_param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">layer</span><span class="p">.</span><span class="n">SetUp</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_bottom_vec_</span><span class="p">,</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_top_vec_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">layer</span><span class="p">.</span><span class="n">Forward</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_bottom_vec_</span><span class="p">,</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_top_vec_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">Dtype</span><span class="o">*</span> <span class="n">bottom_data</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_bottom_</span><span class="o">-&gt;</span><span class="n">cpu_data</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">Dtype</span><span class="o">*</span> <span class="n">top_data</span>    <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_top_</span><span class="o">-&gt;</span><span class="n">cpu_data</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_bottom_</span><span class="o">-&gt;</span><span class="n">count</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">int</span> <span class="n">mul</span> <span class="o">=</span> <span class="n">layer_param</span><span class="p">.</span><span class="n">zzz_param</span><span class="p">().</span><span class="n">mul</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">EXPECT_FLOAT_EQ</span><span class="p">(</span><span class="n">top_data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">bottom_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">mul</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>同時也檢查用數值方法計算出來的 gradient 跟我們算的是否一樣。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// src/caffe/test/test_zzz_layer.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">TYPED_TEST</span><span class="p">(</span><span class="n">NeuronLayerTest</span><span class="p">,</span> <span class="n">TestZZZBackward</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">typedef</span> <span class="k">typename</span> <span class="n">TypeParam</span><span class="o">::</span><span class="n">Dtype</span> <span class="n">Dtype</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">LayerParameter</span> <span class="n">layer_param</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">ZZZLayer</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="n">layer</span><span class="p">(</span><span class="n">layer_param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">GradientChecker</span><span class="o">&lt;</span><span class="n">Dtype</span><span class="o">&gt;</span> <span class="n">checker</span><span class="p">(</span><span class="mf">1e-2</span><span class="p">,</span> <span class="mf">1e-3</span><span class="p">,</span> <span class="mi">1701</span><span class="p">,</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">checker</span><span class="p">.</span><span class="n">CheckGradientEltwise</span><span class="p">(</span><span class="o">&amp;</span><span class="n">layer</span><span class="p">,</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_bottom_vec_</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">blob_top_vec_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>最後就可以實際測試看看。並看到測試的結果了。以上就是新增 layer 的部份。</p>
<pre><code>[----------] 2 tests from ZZZLayerTest/1, where TypeParam = caffe::CPUDevice&lt;double&gt;
[ RUN      ] ZZZLayerTest/1.TestZZZBackward
[       OK ] ZZZLayerTest/1.TestZZZBackward (2 ms)
[ RUN      ] ZZZLayerTest/1.TestZZZForward
[       OK ] ZZZLayerTest/1.TestZZZForward (0 ms)
[----------] 2 tests from ZZZLayerTest/1 (2 ms total)
</code></pre>
<h2 id="dive-into-caffe">Dive into Caffe</h2>
<p>好，講完新增 layer 之後，這次可以更深入的研究 Caffe 的內部架構。</p>
<p>一開始我先到網路上搜尋了一下教學文件，包含官方的內容、課程的教學、或者是網友在問要怎麼讀 Caffe，以及各種網友的分享。最後再直接開始讀程式碼。</p>
<ul>
<li><a href="http://caffe.berkeleyvision.org/">Caffe</a></li>
<li><a href="https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/preview">DIY Deep Learning for Vision</a></li>
<li><a href="http://vision.stanford.edu/teaching/cs231n/slides/caffe_tutorial.pdf">CS231n Caffe Tutorial</a></li>
<li><a href="http://www.zhihu.com/question/27982282">深度学习caffe的代码怎么读？</a></li>
<li><a href="https://yufeigan.github.io/tags/Caffe/">Caffe学习笔记</a></li>
<li><a href="http://www.cnblogs.com/nwpuxuezha/tag/caffe/">caffe笔记之例程学习</a></li>
<li><a href="https://www.quora.com/How-do-we-read-the-source-code-of-Caffe">How do we read the source code of Caffe?</a></li>
<li><a href="http://blog.csdn.net/kkk584520/article/category/2620633">Caffe代码导读</a></li>
</ul>
<p>剛剛已經講過 Caffe 的大致架構，不過實際上每個部件是怎麼互動的呢？
我們先從程式流程講起，之後再特別介紹 layers 的功能。</p>
<h3 id="training">Training</h3>
<p>以 training 的部份來說，程式實際上做的事大致如下：首先，載入參數，設定 GPU 等初始化。
接著，利用這些參數初始化一個 Solver 物件。接下來，如果是要載入 train 好的 weights
來 fine-tune 的話，就會直接把這些 weights 讀進 solver 裡頭的 Net 物件裡。
如果是要繼續進行到一半的 training 的話，則會把 snapshot 檔案當作參數傳給 Solver 的 solve。
否則就直接呼叫 Solve 開始 training 了。</p>
<p>而根據 Solver 種類的不同，會初始化一些不同的參數。但他們都會根據設定檔建立 training nets 以及 testing nets 等物件。</p>
<h3 id="initialize-net">Initialize Net</h3>
<p>每個 Net 被建立時會經過下列流程：</p>
<p>首先根據一些條件過濾掉參數中指定的 layers，比如說你可以把 testing 和 training
的 net 寫在一起，然後 input layer 分成兩個，一個只有在 training 時才有效，
另一個則在 testing 才有效，這樣在建立 Net 物件時依據不同階段，就會過濾掉不要的
input layer，達成載入不同的 data set 的目的。</p>
<p>接下來則是在參數中插入 split layers。
也就是在一些 output blob 被接到多個 layer 作為 input 的時候，
在中間多加入一個 split layer ,把 blob 複製成多份作為其他層的輸入。</p>
<p>這麼做大概有兩個目的，首先是收集從多個方向計算的 gradient ，
其次則是因為有些 layer 會做 in-place 的計算，也就是他 input 和 output 使用同一個 blob，
所以在這裡把 blob 分成多個，可以避免這種情形下的計算錯誤。</p>
<p>把 net 的參數經過之前的處理後，就會實際初始化 Net 物件。首先是建好網路最底層 input blobs。
再來則是按照順序一層一層的建立，並初始化每個 layers。</p>
<p>實際的流程是先建立 layer 物件後，先從之前的底層 input blobs 或者其他 layer 的
top blobs 中找到該 layer 的 bottom blob，也就是他的 input，然後呢，再視情況建立他的
top blob，也就是 output。</p>
<p>最後再用這些 input / output blobs 作為參數，完成 layer 的初始化。每個不同的
layer 會根據自己的需要分別實作不同的初始化程式。然後 net 再把該 layer 可以訓練的參數紀錄下來。</p>
<p>像這樣一層一層的初始化每個 layer 時，同時也找出哪些 layer 實際上需要 backward
的計算。這樣訓練時就可以節省不必要的計算。最後則是收集最後剩下來的 output blobs
，當作整個類神經網路的 output。同時也收集所有設定的 learning rate 和 weight
decay。</p>
<p>像這樣初始化完畢後，就進到真正的 trainning 了。</p>
<h3 id="solver-solve">Solver-&gt;Solve()</h3>
<p>在 training 時所作的，其實就是先做一次 forward 和 backward  的計算，再更新網路中的 weight，重複循環。計算 forward 的方法就是按照 layer 的順序，呼叫每個 layer 的 forward 函數。而 backward 就是用相反的順序呼叫每個 layer 的 backward 函數。每計算完一次就會得到更新的 gradients，然後就可以更新參數。</p>
<p>詳細流程是這樣的，收集完這些 gradients 後 Solver 會依照 learning rates 和 weight decay 算出每個參數應該更新的實際數字。然後再把有共用參數的 layer 的更新值加在一起，最後再一次更新所有的數值。</p>
<h3 id="testing">Testing</h3>
<p>testing 時跟 training 也很類似，不過這次不需要建立 Solver ，而是直接建立 test net，並且讀取訓練好的 weight，最後執行 forward，就可以得到最後的輸出值了。</p>
<h2 id="layers-簡介">Layers 簡介</h2>
<p>整個程式其實最重要的計算還是在 Layers 的部份。因此，我現在就來簡單介紹到底有哪些 layers 可供使用。</p>
<h3 id="data-layers">Data Layers</h3>
<ul>
<li>DataLayer: 可以載入 leveldb 和 lmdb 的檔案。</li>
<li>DummyDataLayer: 用來產生一些亂數或其他預先定義的資料。</li>
<li>HDF5DataLayer: 可以讀取 HDF5 的檔案格式。</li>
<li>HDF5OutputLayer: 可以寫入 HDF5 的檔案格式。</li>
<li>ImageDataLayer: 直接載入圖片。</li>
<li>MemoryDataLayer: 可以透過程式，直接將記憶體中的資料放進 layer 中。</li>
<li>WindowDataLayer: 可以指定從一些圖片中擷取一些 windows 來當作輸入，比如說同一張圖裡幾個 windows 可能標記成貓。其他地方則有狗和沒有東西的標記。</li>
</ul>
<h3 id="common-layers">Common Layers</h3>
<p>在 common layers 的分類中則有：</p>
<ul>
<li>ArgMaxLayer: 找出輸入中最大的 k 個值的 indices 或者 value。</li>
<li>ConcatLayer: 連接多個 bottom blobs。</li>
<li>EltwiseLayer: 他可以把多個 blobs 彼此 element-wise 進行加總，相乘，取最大等運算。</li>
<li>FlattenLayer: 把輸入的 blob 變成單維陣列。</li>
<li>InnerProductLayer: 其實就是輸出入全部接滿的 layers。</li>
<li>MVNLayer: 指的是 mean variance normalization，可以針對輸入做整體的 normalization。</li>
<li>SilenceLayer: 有點像垃圾桶，沒有輸出，只有輸入，被接到這裡的東西就會被丟掉，不會成為最後的輸出。</li>
<li>SplitLayer: 把輸出複製成多份。</li>
<li>SliceLayer: 把輸入切割成多分輸出。</li>
<li>SoftmaxLayer: 把一組輸出，轉換成機率輸出，也就是讓他們的和 normalize 成 1。</li>
</ul>
<h3 id="neuron-layers">Neuron Layers</h3>
<p>neuron layers 主要是直接對每個元素運算。</p>
<ul>
<li>AbsValLayer: 取絕對值。</li>
<li>DropoutLayer: 隨機丟掉某些 input。</li>
<li>ExpLayer</li>
<li>PowerLayer</li>
<li>TanHLayer</li>
<li>ThresholdLayer: 若輸入大於門檻則為 1，否則為0。</li>
<li>BNLLLayer: 將輸入轉換成 binomial normal log likelihood。</li>
<li>ReLULayerReLu: 則是強制輸出不能小於零。</li>
<li>PReLULayerPReLU: 則多加了一個可以訓練的參數。接在後面。</li>
<li>SigmoidLayer: Sigmoid 可以把輸出限制在 0~1 之間，不過現在大家好像比較常用 ReLU 就是。</li>
</ul>
<h3 id="vision-layers">Vision Layers</h3>
<p>再來是 visions layers，其實這些 layers 都跟 CNN 有關。</p>
<ul>
<li>ConvolutionLayer: convolution 做的運算基本上是用數個 filter，或者說 feature detector，在原始輸入的局部小範圍中，進行一個內積運算，得到一個結果。平移這個小範圍做同樣的運算後，每個 filter 都可以得到一個個數比輸入稍微少一些的輸出。一般每個 feature detector 是用來偵測圖片中某些特定的特徵是否出現。</li>
<li>DeconvolutionLayer: 反過來，把一個輸入乘上一個矩陣。比如說右邊的 4 ，乘上一個 3x3 的矩陣，然後把他加回去左邊的輸出。</li>
<li>LRNLayer: LRN 則是一種 normalization 的方法，據論文上寫的，他似乎主要是用來 normalize 不同 filter 輸出的結果，讓訊號間彼此競爭，只留下一些勝利者。</li>
<li>PoolingLayer: 至於最後的 pooling ，則是選一塊輸入的範圍，進行取最大值或者平均的運算。得出個數較少的輸出。</li>
</ul>
<h2 id="結語">結語</h2>
<p>感覺光是對一些運算做操作性的了解，似乎還是不能真正理解 Caffe 是如何被使用的。
未來應該要針對深度學習的理論上做更多研究才行。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/artificial-neural-network.png" alt="Neural Networks" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>IPython Notebook 初探</title>
      <link>https://city.shaform.com/zh/2015/12/26/ipython-notebook/</link>
      <pubDate>Sat, 26 Dec 2015 18:46:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2015/12/26/ipython-notebook/</guid>
      <description>為什麼是 IPython Notebook? 還記得第一次認識到 IPython Notebook 是在 Taipei.py 吧。 當時我還十分懷疑到底使用瀏覽器界面寫 Python 能有什麼好處。 尤其，這樣根本無法使用 Vim 的強大指令。 雖然有安</description>
      <content:encoded><![CDATA[<h2 id="為什麼是-ipython-notebook">為什麼是 IPython Notebook?</h2>
<p>還記得第一次認識到 <a href="http://ipython.org/notebook.html">IPython Notebook</a>
是在 <a href="http://www.meetup.com/Taipei-py/">Taipei.py</a> 吧。
當時我還十分懷疑到底使用瀏覽器界面寫 Python 能有什麼好處。
尤其，這樣根本無法使用 Vim 的強大指令。
雖然有安裝並嘗試了一下，但最後還是沒有繼續使用 IPython Notebook。
不過 <a href="http://ipython.org/index.html">IPython interactive shell</a>
倒確實是比原本的指令列好用許多，於是我慢慢也開始用它來取代原本的 Python 指令列了。</p>
<p>第二次遇到 IPython Notebook 則是在寫 <a href="http://cs231n.stanford.edu">CS231n</a> 作業時。
在那堂課裡，每份作業都是用 IPython Notebook 來呈現。
同學可以在 Notebook 上及其他 Python 檔案裡編輯，並在 Notebook 裡直接驗證結果。
我這才發現這真的是一個跟別人分享與教學的強大方法。
尤其又有 <a href="http://nbviewer.ipython.org/">nbviewer</a> 可以用，簡直太方便了。
甚至不用安裝 Python 就能看到別人之前執行 Python 的結果。</p>
<p>後來對使用 Python 處理資料更有經驗後，更是體會到為何科學社群的人很喜歡 IPython
Notebook 可能的原因了。其中一個重要原因一定是因為它可以極其方便的紀錄實驗步驟吧。</p>
<!-- raw HTML omitted -->
<p>像是在做資料分析時，除了要管理程式碼以外，管理資料常常是更複雜的問題。
像是在做資料前處理或是特徵擷取時，經常會把資料做不同的轉換。
有時候會因為覺得某些轉換只會做一次，就沒有把轉換的步驟記錄下來。
但是如果未來想要更改某個轉換步驟，而要重跑實驗時，這種作法就會造成極大的麻煩。</p>
<p>另一方面，若是直接寫一個大程式，每次都從資料源頭進行各種轉換與分析。
則撰寫程式的時間會拉長，且如果資料量太大，也會使得每次執行程式都跑的太久。</p>
<p>這時就是 IPython Notebook 方便的地方了。它真的就是一個筆記本，讓你紀錄實驗過程。
本篇文章就是想好好分享一下 IPython Notebook，希望不要像我一樣錯過它了。
為了當作練習，本篇文章的程式碼也同樣用 IPython Notebook 呈現，
可以在 <a href="http://nbviewer.ipython.org/github/shaform/experiments/blob/master/ipynb/The%20First%20Tour%20of%20the%20IPython%20Notebook.ipynb">The First Tour of the IPython Notebook</a> 直接閱讀。</p>
<h2 id="在-ipython-裡做資料分析">在 IPython 裡做資料分析</h2>
<p>於是就讓我們開始吧。我們將會用到以下程式庫：</p>
<ol>
<li><a href="http://mpld3.github.io/">MPLD3</a></li>
<li><a href="http://matplotlib.org/">matplotlib</a></li>
<li><a href="http://www.numpy.org/">Numpy</a></li>
<li><a href="http://pandas.pydata.org/">pandas</a></li>
<li><a href="http://scikit-learn.org/stable/index.html">scikit-learn</a></li>
<li><a href="https://github.com/amueller/word_cloud">wordcloud</a></li>
</ol>
<p>其中，matplotlib 是一個非常實用的圖表工具。想當初也是朋友來問問題才發現它的存在。
想不到現在竟然也開始學習了。由於 IPython Notebook 可以直接顯示並存下它產生的圖，所以非常方便。</p>
<p>不過首先，要使用 <a href="http://ipython.readthedocs.org/en/stable/interactive/magics.html?highlight=matplotlib#magic-matplotlib"><code>%matplotlib inline</code></a>
magic command 設定讓圖表直接顯示在筆記本上：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</span></span></code></pre></div><h3 id="找出最重要的特徵">找出最重要的特徵</h3>
<p>通常要對模型有一些理解，找出權重最大的特徵可以有些幫助。所以我們用
polarity dataset 來示範這個概念：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">wget http://www.cs.cornell.edu/people/pabo/movie-review-data/review_polarity.tar.gz
</span></span><span class="line hl"><span class="cl">tar xzf review_polarity.tar.gz</span></span></code></pre></div></div>

<p>然後，載入必要的套件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.datasets</span> <span class="kn">import</span> <span class="n">load_files</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.feature_extraction.text</span> <span class="kn">import</span> <span class="n">TfidfVectorizer</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.svm</span> <span class="kn">import</span> <span class="n">LinearSVC</span>
</span></span></code></pre></div><p>我們用 <a href="http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html"><code>TfidfVectorizer</code></a> 來得到每個句子的特徵向量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">sent_data</span> <span class="o">=</span> <span class="n">load_files</span><span class="p">(</span><span class="s1">&#39;txt_sentoken&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">tfidf_vec</span> <span class="o">=</span> <span class="n">TfidfVectorizer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sent_X</span> <span class="o">=</span> <span class="n">tfidf_vec</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">sent_data</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sent_y</span> <span class="o">=</span> <span class="n">sent_data</span><span class="o">.</span><span class="n">target</span>
</span></span></code></pre></div><p>最後再用 <a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html"><code>LinearSVC</code></a> 訓練正負向的分類器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">lsvc</span> <span class="o">=</span> <span class="n">LinearSVC</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">lsvc</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">sent_X</span><span class="p">,</span> <span class="n">sent_y</span><span class="p">)</span>
</span></span></code></pre></div><p>接下來就可以找出權重最重的特徵了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_top_features</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">,</span> <span class="n">top_n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">top_features</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)[:</span><span class="n">top_n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">top_weights</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">top_features</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">top_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">top_features</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ind</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">top_n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bars</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">ind</span><span class="p">,</span> <span class="n">top_weights</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">bar</span><span class="p">,</span> <span class="n">w</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">bars</span><span class="p">,</span> <span class="n">top_weights</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">bar</span><span class="o">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">width</span> <span class="o">=</span> <span class="mf">0.30</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">ind</span> <span class="o">+</span> <span class="n">width</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xticklabels</span><span class="p">(</span><span class="n">top_names</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_top_features</span><span class="p">(</span><span class="n">lsvc</span><span class="o">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">tfidf_vec</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">(),</span> <span class="mi">20</span><span class="p">)</span>
</span></span></code></pre></div>
<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/sentiment_words.png" alt="Top features" />
    </div>
    
  </figure>
</div>

<p>記得也曾在學長的論文上看過文字雲的呈現方式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">wordcloud</span> <span class="kn">import</span> <span class="n">WordCloud</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">generate_word_cloud</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">WordCloud</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">350</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">250</span><span class="p">)</span><span class="o">.</span><span class="n">generate_from_frequencies</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">weights</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_word_cloud</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pos_weights</span> <span class="o">=</span> <span class="n">weights</span><span class="p">[</span><span class="n">weights</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">pos_names</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">names</span><span class="p">)[</span><span class="n">weights</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">neg_weights</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">weights</span><span class="p">[</span><span class="n">weights</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">neg_names</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">names</span><span class="p">)[</span><span class="n">weights</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lst</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;Positive&#39;</span><span class="p">,</span> <span class="n">pos_weights</span><span class="p">,</span> <span class="n">pos_names</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;Negative&#39;</span><span class="p">,</span> <span class="n">neg_weights</span><span class="p">,</span> <span class="n">neg_names</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">wc</span> <span class="o">=</span> <span class="n">generate_word_cloud</span><span class="p">(</span><span class="n">weights</span><span class="p">,</span> <span class="n">names</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">wc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">set_axis_off</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1"> words&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">label</span><span class="p">),</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_word_cloud</span><span class="p">(</span><span class="n">lsvc</span><span class="o">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">tfidf_vec</span><span class="o">.</span><span class="n">get_feature_names</span><span class="p">())</span>
</span></span></code></pre></div>

<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/word_cloud.png" alt="Word cloud" />
    </div>
    
  </figure>
</div>

<h3 id="用降維來做資料視覺化">用降維來做資料視覺化</h3>
<p>通常太高維度的資料對我們來說不太易懂。所以也常使用降維的方式來做資料視覺化。
這裡我們會用 <a href="https://lvdmaaten.github.io/tsne/">t-SNE</a> 來視覺化
<a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">Iris flower data set</a>。
同時，我們也用 <a href="http://mpld3.github.io/">MPLD3</a> 來建立可以動態縮放的圖表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.datasets</span> <span class="kn">import</span> <span class="n">load_iris</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.manifold</span> <span class="kn">import</span> <span class="n">TSNE</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mpld3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">iris</span> <span class="o">=</span> <span class="n">load_iris</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_iris</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_tsne</span> <span class="o">=</span> <span class="n">TSNE</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">perplexity</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_tsne</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_tsne</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;All instances&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_tsne</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">X_tsne</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;All instances labeled with color&#39;</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mpld3</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_iris</span><span class="p">(</span><span class="n">iris</span><span class="p">)</span>
</span></span></code></pre></div>

<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/iris.png" alt="IRIS" />
    </div>
    
  </figure>
</div>

<p>可以看到， 即使不知道資料的標記，t-SNE 還是能把不同種類的資料點分開的很好。我們再試試
<a href="http://yann.lecun.com/exdb/mnist/">MNIST dataset of handwritten digits</a> 這個複雜一點的資料集。
同時也嘗試使用 <code>PointLabelTooltip</code>，好讓滑鼠移過時能顯示每個資料點的數字。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.datasets</span> <span class="kn">import</span> <span class="n">fetch_mldata</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.decomposition</span> <span class="kn">import</span> <span class="n">PCA</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mnist</span> <span class="o">=</span> <span class="n">fetch_mldata</span><span class="p">(</span><span class="s1">&#39;MNIST original&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_mnist</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">n_samples</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">data</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># downsample as the scikit-learn implementation of t-SNE is unable to handle too much data</span>
</span></span><span class="line"><span class="cl">    <span class="n">indices</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">indices</span><span class="p">[:</span><span class="n">n_samples</span><span class="p">]],</span> <span class="n">y</span><span class="p">[</span><span class="n">indices</span><span class="p">[:</span><span class="n">n_samples</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">X_tsne</span> <span class="o">=</span> <span class="n">TSNE</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">perplexity</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_pca</span> <span class="o">=</span> <span class="n">PCA</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">points</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_tsne</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">X_tsne</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tooltip</span> <span class="o">=</span> <span class="n">mpld3</span><span class="o">.</span><span class="n">plugins</span><span class="o">.</span><span class="n">PointLabelTooltip</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">y_train</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">mpld3</span><span class="o">.</span><span class="n">plugins</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">fig</span><span class="p">,</span> <span class="n">tooltip</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;t-SNE&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">points</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_pca</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">X_pca</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">tooltip</span> <span class="o">=</span> <span class="n">mpld3</span><span class="o">.</span><span class="n">plugins</span><span class="o">.</span><span class="n">PointLabelTooltip</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">y_train</span><span class="o">.</span><span class="n">tolist</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">mpld3</span><span class="o">.</span><span class="n">plugins</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">fig</span><span class="p">,</span> <span class="n">tooltip</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;PCA&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mpld3</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_mnist</span><span class="p">(</span><span class="n">mnist</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span></span></code></pre></div>

<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/t-sne.png" alt="MNIST" />
    </div>
    
  </figure>
</div>

<p>如果你想在有訓練資料的標記的情況下盡可能學到較好的投影向量的話，也可以試試 <a href="http://scikit-learn.org/stable/modules/lda_qda.html">LDA</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">Axes3D</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.lda</span> <span class="kn">import</span> <span class="n">LDA</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_mnist_3d</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">n_samples</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">data</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># downsample as the scikit-learn implementation of t-SNE is unable to handle too much data</span>
</span></span><span class="line"><span class="cl">    <span class="n">indices</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span> <span class="o">=</span> <span class="n">X</span><span class="p">[</span><span class="n">indices</span><span class="p">[:</span><span class="n">n_samples</span><span class="p">]],</span> <span class="n">y</span><span class="p">[</span><span class="n">indices</span><span class="p">[:</span><span class="n">n_samples</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">X_lda</span> <span class="o">=</span> <span class="n">LDA</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span> <span class="n">subplot_kw</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;projection&#39;</span><span class="p">:</span><span class="s1">&#39;3d&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">points</span> <span class="o">=</span> <span class="n">ax</span><span class="o">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_lda</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">X_lda</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">X_lda</span><span class="p">[:,</span><span class="mi">2</span><span class="p">]</span> <span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">y_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;LDA&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">((</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">((</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_mnist_3d</span><span class="p">(</span><span class="n">mnist</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span></span></code></pre></div>

<div class="box aligncenter" style="max-width:480px;">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/lda.png" alt="LDA" />
    </div>
    
  </figure>
</div>

<h3 id="使用-pandas-分析資料">使用 Pandas 分析資料</h3>
<p><a href="http://pandas.pydata.org">Pandas</a> 用來分析資料聽說也是非常方便。我們就用
<a href="https://www.kaggle.com/kaggle/meta-kaggle">Meta Kaggle</a>
來看看 Kaggle 上的使用者都在做什麼吧。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span></code></pre></div><p>手動下載完資料並解壓縮後應該會看到一個 output 資料夾存放所有的檔案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">con</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;output/database.sqlite&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">kaggle_df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_sql_query</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">SELECT * FROM Submissions&#39;&#39;&#39;</span><span class="p">,</span> <span class="n">con</span><span class="p">)</span>
</span></span></code></pre></div><p>先看看裡頭有什麼內容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">kaggle_df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></span></code></pre></div><p>然後來試著分析上傳結果的時間分佈，先取得上傳時間在一週裡的日期或小時：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;There is </span><span class="si">{}</span><span class="s1"> submissions&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">kaggle_df</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># convert time strings to DatetimeIndex</span>
</span></span><span class="line"><span class="cl"><span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;timestamp&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;DateSubmitted&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;The earliest and latest submissions are on </span><span class="si">{}</span><span class="s1"> and </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;timestamp&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">min</span><span class="p">(),</span> <span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;timestamp&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">max</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;weekday&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;timestamp&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">weekday</span>
</span></span><span class="line"><span class="cl"><span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;weekhr&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;weekday&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">+</span> <span class="n">kaggle_df</span><span class="p">[</span><span class="s1">&#39;timestamp&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">hour</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">calendar</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_kaggle</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;submissions per weekday&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="p">[</span><span class="s1">&#39;weekday&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span><span class="o">.</span><span class="n">sort_index</span><span class="p">()</span><span class="o">.</span><span class="n">rename_axis</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">calendar</span><span class="o">.</span><span class="n">day_name</span><span class="p">[</span><span class="n">x</span><span class="p">])</span><span class="o">.</span><span class="n">plot</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;submissions per hour of week&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">df</span><span class="p">[</span><span class="s1">&#39;weekhr&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span><span class="o">.</span><span class="n">sort_index</span><span class="p">()</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_kaggle</span><span class="p">(</span><span class="n">kaggle_df</span><span class="p">)</span>
</span></span></code></pre></div>

<div class="box">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/submissions.png" alt="Submissions" />
    </div>
    
  </figure>
</div>

<p>然後我們試著把使用者分群，看看他們上傳時間的分佈是否有所不同。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">display_hr</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">n_clusters</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">hrs_per_user</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span><span class="s1">&#39;SubmittedUserId&#39;</span><span class="p">,</span> <span class="s1">&#39;weekhr&#39;</span><span class="p">,</span> <span class="s1">&#39;Id&#39;</span><span class="p">]]</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">&#39;SubmittedUserId&#39;</span><span class="p">,</span> <span class="s1">&#39;weekhr&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">total_per_user</span> <span class="o">=</span> <span class="n">hrs_per_user</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">user_patterns</span> <span class="o">=</span> <span class="p">(</span><span class="n">hrs_per_user</span> <span class="o">/</span> <span class="n">total_per_user</span><span class="p">)[</span><span class="s1">&#39;Id&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">vectors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">hr</span><span class="p">),</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">user_patterns</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">vectors</span><span class="p">[</span><span class="n">u</span><span class="p">][</span><span class="n">hr</span><span class="p">]</span> <span class="o">=</span> <span class="n">r</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_hr</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">vectors</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="n">n_clusters</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">fit_predict</span><span class="p">(</span><span class="n">X_hr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_clusters</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">indices</span> <span class="o">=</span> <span class="n">y</span> <span class="o">==</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span> <span class="o">=</span> <span class="n">X_hr</span><span class="p">[</span><span class="n">indices</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="p">),</span> <span class="n">X</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="o">*</span><span class="mi">7</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;Cluster #</span><span class="si">{}</span><span class="s1">, n = </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">)),</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">14</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">display_hr</span><span class="p">(</span><span class="n">kaggle_df</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
</span></span></code></pre></div>

<div class="box aligncenter" style="max-width:480px;">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/cluster1.png" alt="Cluster 1" style="max-height:480px;" />
    </div>
    
  </figure>
</div>



<div class="box aligncenter" style="max-width:480px;">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/cluster8.png" alt="Cluster 8" style="max-height:480px;" />
    </div>
    
  </figure>
</div>

<p>這裡我們只展示兩張圖，看起來第 1 群和第 8 群使用者似乎活動時間有點差別，
不知是否是時區不同的關係呢？</p>
<h3 id="xkcd">XKCD</h3>
<p>最後我們用 <a href="http://matplotlib.org/xkcd/">XKCD 風格</a> 來畫張圖吧。
為了能畫這張圖，我們得先安裝 <a href="https://github.com/shreyankg/xkcd-desktop/blob/master/Humor-Sans.ttf">Humor Sans</a>
並且清除 matplotlib 的字型 cache。他的路徑可用以下指令找到：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib</span>
</span></span><span class="line"><span class="cl"><span class="n">matplotlib</span><span class="o">.</span><span class="n">get_cachedir</span><span class="p">()</span>
</span></span></code></pre></div><p>同時如果是 Python 3 的話，可能還需安裝額外的套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt-get install libffi-dev
</span></span><span class="line hl"><span class="cl">pip3 install cairocffi</span></span></code></pre></div></div>

<p>安裝完就可以開始畫了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">xkcd</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">plt</span><span class="o">.</span><span class="n">xkcd</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">spines</span><span class="p">[</span><span class="s1">&#39;right&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">set_color</span><span class="p">(</span><span class="s1">&#39;none&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">spines</span><span class="p">[</span><span class="s1">&#39;top&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">set_color</span><span class="p">(</span><span class="s1">&#39;none&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_yticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[:</span><span class="mi">60</span><span class="p">]</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="mi">60</span><span class="p">:</span><span class="mi">75</span><span class="p">]</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="mi">75</span><span class="p">:]</span> <span class="o">-=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;DEADLINE&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">xy</span><span class="o">=</span><span class="p">(</span><span class="mi">71</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="n">arrowprops</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">arrowstyle</span><span class="o">=</span><span class="s1">&#39;-&gt;&#39;</span><span class="p">),</span> <span class="n">xytext</span><span class="o">=</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">plot</span><span class="p">([</span><span class="mi">72</span><span class="p">,</span> <span class="mi">72</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span> <span class="s1">&#39;k-&#39;</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s1">&#39;red&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;time&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s1">&#39;productivity&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;productivity under a deadline&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">xkcd</span><span class="p">()</span>
</span></span></code></pre></div>

<div class="box aligncenter" style="max-width:365px;">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img  itemprop="thumbnail" src="/images/2015/deadline.png" alt="Deadline" style="max-height:269px;" />
    </div>
    
  </figure>
</div>

<h2 id="結語">結語</h2>
<p>感覺還有好多需要學習的，目前也才剛剛起步。不過希望這篇文章有吸引到你想嘗試看看
IPython Notebook。最近也聽說 <a href="http://cs109.github.io/2015/">CS109 Data Science</a>
似乎是個不錯的課程，如果想繼續練習或許可以試試看 0.0/</p>
<h2 id="參考資料">參考資料</h2>
<ul>
<li><a href="http://alexanderfabisch.github.io/t-sne-in-scikit-learn.html">t-SNE in scikit learn</a></li>
<li><a href="https://sarahleejane.github.io/learning/python/2015/01/11/feature-engineering-for-Washington-DC-bikeshare-kaggle-competition-with-Python.html">feature engineering for Washington DC bikeshare kaggle competition with Python</a></li>
<li><a href="http://sebastianraschka.com/Articles/2014_twitter_wordcloud.html">Turn Your Twitter Timeline into a Word Cloud Using Python</a></li>
<li><a href="https://www.kaggle.com/inversion/d/kaggle/meta-kaggle/exploring-submission-timing">Exploring Submission Timing</a></li>
</ul>


<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/dots.jpg" alt="Dots" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>用 Apache Spark 來訓練 Word2vec 詞向量 Skip-gram Word Embeddings</title>
      <link>https://city.shaform.com/zh/2015/08/30/spark-for-word2vec/</link>
      <pubDate>Sun, 30 Aug 2015 17:15:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2015/08/30/spark-for-word2vec/</guid>
      <description>先前曾提過 word2vec 可以把語料中的詞轉換成詞向量。 雖然原本提供的 word2vec 工具速度已經很快， 但是如果要訓練更大規模的語料還是需要不少時間。 例如之前在處理 ClueWeb09 時</description>
      <content:encoded><![CDATA[<p>先前曾提過 <a href="/zh/2014/11/04/word2vec/">word2vec 可以把語料中的詞轉換成詞向量</a>。
雖然原本提供的 <a href="https://groups.google.com/forum/#!forum/word2vec-toolkit">word2vec</a> 工具速度已經很快，
但是如果要訓練更大規模的語料還是需要不少時間。
例如之前在處理 <a href="http://www.lemurproject.org/clueweb09.php/">ClueWeb09</a> 時，以實驗室的機器來說，就算只處理中文部份，
也要一個月以上才能跑完。
此時除了購買更強大的機器外，如果已經有不少機器，
或許可以利用平行運算的方式來加速。</p>
<p>最近剛好接觸到了 <a href="https://spark.apache.org/">Apache Spark</a>，他是一個開源的運算平台，
可以運用多台電腦進行平行運算。
且因為把很多資料直接放在記憶體中處理，又比 <a href="http://hadoop.apache.org/">Apache Hadoop</a> 單純的
MapReduce 更快一些。更重要的是，他的機器學習函式庫 <a href="https://spark.apache.org/docs/latest/mllib-guide.html">MLlib</a>
已經實作了 word2vec 當中的 <a href="http://arxiv.org/pdf/1301.3781.pdf">skip-gram</a> 模型，正好可以直接拿來訓練詞向量。</p>
<h2 id="安裝">安裝</h2>
<p>關於如何將 Spark 安裝在一個 cluster 上，可以參考<a href="http://spark.apache.org/docs/latest/index.html">官方文件</a>。
這裡我們只簡單的安裝單機版的 Spark 方便快速的實驗。
我們將會使用 <a href="http://releases.ubuntu.com/14.04/">Ubuntu 14.04</a> 作為實驗平台。</p>
<h3 id="安裝-java-8">安裝 Java 8</h3>
<p>首先安裝 Java 8，如果你已經有裝了則可以跳過。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo add-apt-repository ppa:webupd8team/java
</span></span><span class="line hl"><span class="cl">sudo apt-get update
</span></span><span class="line hl"><span class="cl">sudo apt-get install oracle-java8-installer
</span></span><span class="line hl"><span class="cl">sudo apt-get install oracle-java8-set-default</span></span></code></pre></div></div>

<h3 id="安裝-apache-spark">安裝 Apache Spark</h3>
<p>接下來，到<a href="http://spark.apache.org/downloads.html">下載頁面</a>下載 Spark，
我是選擇 Spark 1.4.1 Pre-built for Hadoop 2.6 and later 的 binary。
不過如果有新版應該變化也不大。直接解壓縮就可以用囉：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">tar -xzf spark-1.4.1-bin-hadoop2.6.tgz</span></span></code></pre></div></div>

<h3 id="安裝-sbt">安裝 sbt</h3>
<p>因為我打算用 Scala 所以我們還得安裝 <a href="http://www.scala-sbt.org/">sbt</a> 這個 build tool。
於是依照 <a href="http://www.scala-sbt.org/download.html">sbt 的下載頁面</a>的說明安裝 sbt：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;deb https://dl.bintray.com/sbt/debian /&#34;</span> <span class="p">|</span> sudo tee -a /etc/apt/sources.list.d/sbt.list
</span></span><span class="line hl"><span class="cl">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 642AC823
</span></span><span class="line hl"><span class="cl">sudo apt-get update
</span></span><span class="line hl"><span class="cl">sudo apt-get install sbt</span></span></code></pre></div></div>

<h2 id="下載資料集">下載資料集</h2>
<p>為了簡單起見，使用 100MB 的 Wikipedia dump：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">wget http://mattmahoney.net/dc/text8.zip -O text8.gz
</span></span><span class="line hl"><span class="cl">gzip -d text8.gz -f</span></span></code></pre></div></div>

<p>由於是單機，所以可以放在任意資料夾，如果是在 cluster 的話，需要放在每台機器都能存取的同一位置。</p>
<h2 id="編寫-spark-程式">編寫 Spark 程式</h2>
<p>首先建立專案資料夾：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">mkdir -p sparkw2v/src/main/scala/</span></span></code></pre></div></div>

<p>然後編輯 <code>sparkw2v/sparkw2v.sbt</code> 檔案，程式版本參考官方文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="line"><span class="cl"><span class="n">name</span> <span class="k">:</span><span class="o">=</span> <span class="s">&#34;Spark Word2Vec&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">version</span> <span class="k">:</span><span class="o">=</span> <span class="s">&#34;1.0&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">scalaVersion</span> <span class="k">:</span><span class="o">=</span> <span class="s">&#34;2.10.4&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;org.apache.spark&#34;</span> <span class="o">%%</span> <span class="s">&#34;spark-core&#34;</span> <span class="o">%</span> <span class="s">&#34;1.4.1&#34;</span> <span class="o">%</span> <span class="s">&#34;provided&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;org.apache.spark&#34;</span> <span class="o">%%</span> <span class="s">&#34;spark-mllib&#34;</span> <span class="o">%</span> <span class="s">&#34;1.4.1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span></code></pre></div><p>最後則是程式碼 <code>sparkw2v/src/main/scala/SparkW2V.scala</code> 本身，注意要設定輸出入 <code>{input directory}</code> 和 <code>{output directory}</code>的路徑。
同樣的如果是在 cluster 的話，需要放在每台機器都能存取的同一位置。
Word2Vec 參數設定則可參考 <a href="https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.ml.feature.Word2Vec">API 文件</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-scala" data-lang="scala"><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark._</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark.rdd._</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark.SparkContext</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark.SparkContext._</span>
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark.SparkConf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">import</span> <span class="nn">org.apache.spark.mllib.feature.Word2Vec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">object</span> <span class="nc">SparkW2V</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">text8</span> <span class="k">=</span> <span class="s">&#34;{input directory}/text8&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">output</span> <span class="k">=</span> <span class="s">&#34;{output directory}/model&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">conf</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkConf</span><span class="o">().</span><span class="n">setAppName</span><span class="o">(</span><span class="s">&#34;Spark Word2Vec&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">sc</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">SparkContext</span><span class="o">(</span><span class="n">conf</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">input</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">textFile</span><span class="o">(</span><span class="n">text8</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">line</span> <span class="k">=&gt;</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">).</span><span class="n">toSeq</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">word2vec</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Word2Vec</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">val</span> <span class="n">model</span> <span class="k">=</span> <span class="n">word2vec</span><span class="o">.</span><span class="n">fit</span><span class="o">(</span><span class="n">input</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span><span class="o">.</span><span class="n">save</span><span class="o">(</span><span class="n">sc</span><span class="o">,</span> <span class="n">output</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="build">Build</h3>
<p>使用 sbt 進行 package：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> sparkw2v
</span></span><span class="line hl"><span class="cl">sbt package</span></span></code></pre></div></div>

<p>根據版本不同，產生的檔案名稱也不同，我的輸出是 <code>sparkw2v/target/scala-2.10/spark-word2vec_2.10-1.0.jar</code>。</p>
<h2 id="執行">執行</h2>
<p>接下來就可以回到根目錄，利用 <code>spark-submit</code> 執行程式。筆者不確定記憶體的需求為何，所以開的大了些：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> ..
</span></span><span class="line hl"><span class="cl">spark-1.4.1-bin-hadoop2.6/bin/spark-submit --class SparkW2V --master local<span class="o">[</span>*<span class="o">]</span> --executor-memory 20G --driver-memory 10G sparkw2v/target/scala-2.10/spark-word2vec_2.10-1.0.jar</span></span></code></pre></div></div>

<p>輸出的向量會放在 <code>{output directory}/model/data/</code> 底下，而且是存成 <a href="https://parquet.apache.org/">Parquet</a> 的格式，不太方便。
所以我們使用 spark-shell 快速的將檔案轉成文字檔：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 執行 Spark Shell</span>
</span></span><span class="line hl"><span class="cl">./spark-1.4.1-bin-hadoop2.6/bin/spark-shell
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 從這裡開始是 Spark Shell</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Welcome to</span>
</span></span><span class="line"><span class="cl"><span class="c1">#       ____              __</span>
</span></span><span class="line"><span class="cl"><span class="c1">#      / __/__  ___ _____/ /__</span>
</span></span><span class="line"><span class="cl"><span class="c1">#     _\ \/ _ \/ _ `/ __/  &#39;_/</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    /___/ .__/\_,_/_/ /_/\_\   version 1.4.1</span>
</span></span><span class="line"><span class="cl"><span class="c1">#       /_/</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 讀取檔案</span>
</span></span><span class="line"><span class="cl">scala&gt; val <span class="nv">d</span> <span class="o">=</span> sqlContext.read.parquet<span class="o">(</span><span class="s2">&#34;{output directory}/model/data&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">d: org.apache.spark.sql.DataFrame <span class="o">=</span> <span class="o">[</span>word: string, vector: array&lt;float&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 檢查格式</span>
</span></span><span class="line"><span class="cl">scala&gt; d.first
</span></span><span class="line"><span class="cl">res2: org.apache.spark.sql.Row <span class="o">=</span> <span class="o">[</span>latifolia,ArrayBuffer<span class="o">(</span>-0.08103186, 0.14688604, -0.060668133, -0.25648367, -0.06855837, -0...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 輸出到 output directory/vectors/</span>
</span></span><span class="line"><span class="cl">scala&gt; d.map<span class="o">{</span><span class="nv">r</span> <span class="o">=</span>&gt; r.getString<span class="o">(</span>0<span class="o">)</span> + <span class="s2">&#34; &#34;</span> + r.getSeq<span class="o">(</span>1<span class="o">)</span>.mkString<span class="o">(</span><span class="s2">&#34; &#34;</span><span class="o">)}</span>.saveAsTextFile<span class="o">(</span><span class="s2">&#34;{output directory}/vectors&#34;</span><span class="o">)</span></span></span></code></pre></div></div>

<p>如此便完成了！</p>
<h2 id="原始碼">原始碼</h2>
<p>相關程式碼放在 <a href="https://github.com/shaform/experiments/blob/master/spark_word2vec/">shaform/experiments/spark_word2vec</a>。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/dots.jpg" alt="Dots" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>一起聚餐去，金流系統</title>
      <link>https://city.shaform.com/zh/2015/04/20/dine-together-payment-system/</link>
      <pubDate>Mon, 20 Apr 2015 08:34:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2015/04/20/dine-together-payment-system/</guid>
      <description>在交大時因為地處偏僻又經濟拮据，很少有機會出去校外吃飯。來了台北以後，開始有機會和朋友出去聚餐。有次一大群人一起去吃飯，結帳時大家七手八腳的</description>
      <content:encoded><![CDATA[<p>在交大時因為地處偏僻又經濟拮据，很少有機會出去校外吃飯。來了台北以後，開始有機會和朋友出去聚餐。有次一大群人一起去吃飯，結帳時大家七手八腳的把錢擺在桌上，最後結帳的人拿了錢去付時，才發現短少了一些，但也無法釐清是誰少付了。自己也曾有次雖然只是三四人的聚餐，不過付完找錢完事後才發現虧了兩三百元呢。</p>
<p>確實這種朋友聚餐若不能分開結帳，付起帳來總讓人心慌慌。有許多的風險容易浮現：（1）在蒐集錢時可能有所短缺（2）可能會出現偽鈔（3）其實也可能店家會找錯、算錯（4）然而有些同學會在店家找錢時迅速的先拿走自己該找的部份，以致主付者難以確認店家是否找錯錢。</p>
<p>雖然想說可以透過每次聚餐前都事先準備好所有零錢，讓自己可以恰好付出自己的部份，不過有時還是會忘記。這時就會想如果有個金流系統可以幫忙解決這種情形該有多好。</p>
<p>運作的方法大約是這樣。聚餐後，可以用這金流系統建立一個聚餐事件，然後把所有人加進來。大家輸入自己該付的錢後，系統就會確認儲值的錢足夠，並自動扣款，事後交給主事人。程式還會幫妳計算總和的錢數，讓你可以較易跟店家確認他是否算錯錢。</p>
<p>可以用手機拍照紀錄菜單，這樣如果跟店家確認發現金額不符後，還可根據紀錄查出到底是哪位同學少付了，並溝通得到更正。</p>
<p>由於透過金流平台溝通，所有的對話都會讓所有聚餐的同學都看到。因此可以形成輿論壓力，讓有理的一方能順利得到金額的更正。</p>
<p>如果真的無法解決爭端，還可以評價對方的壞行為。這樣他下次跟其他人聚餐時，不好的評價就會顯示出來，讓大家事前得知要小心注意呢！</p>
<p>當然，如果可以直接付給店家或許更好！</p>
<p>這樣的金流平台，或許可以用同儕壓力來形成病毒行銷的作用，把所有的人都拉到平台之上，自然就可透過別的方法營利賺錢了！</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2015/tech.jpg" alt="Tech" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>用 rnnlm, liblinear 和 word2vec 做中文情感分析測試</title>
      <link>https://city.shaform.com/zh/2015/03/27/sentiment-analysis/</link>
      <pubDate>Fri, 27 Mar 2015 21:45:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2015/03/27/sentiment-analysis/</guid>
      <description>最近在研究一些 NLP 工具的使用方法，所以稍微紀錄一下心得。這次的實驗主要是參考 Tomas Mikolov 在 word2vec 論壇上發表的文章，以及 Ensemble of Generative and Discriminative Techniques for Sentiment Analysis of Movie Reviews 的程式碼。不</description>
      <content:encoded><![CDATA[<p>最近在研究一些 NLP 工具的使用方法，所以稍微紀錄一下心得。這次的實驗主要是參考 Tomas Mikolov 在 <a href="https://code.google.com/p/word2vec/">word2vec</a> 論壇上發表的<a href="https://groups.google.com/d/msg/word2vec-toolkit/Q49FIrNOQRo/J6KG8mUj45sJ">文章</a>，以及 <a href="http://arxiv.org/abs/1412.5335">Ensemble of Generative and Discriminative Techniques for Sentiment Analysis of Movie Reviews</a> 的程式碼。不過改運用在中文上，並且用簡單的 TF-IDF 取代 Naive Bayes Support Vector
Machine。</p>
<p>資料集是使用 2014 年 NTU NLP 課程的旅館評論資料 <code>207884_hotel_training.txt</code>，然後稍微進行一些處理。將資料修改成以下格式：</p>
<pre><code>LABEL TOKENS
</code></pre>
<p>每行有一則資料，先是正負向標記：1 表示正、2 表示負。其後接上斷詞後的評論（以空白分隔每個詞）。過濾掉斷詞失敗的句子後，共剩下 1124 句正向評論和 1217 句負向評論。</p>
<p>接下來我寫了一個 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/split.py">split.py</a> 把資料分成測試集和訓練集：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">python3 split.py --input data/data.txt --train_pos data/train_pos.txt --train_neg data/train_neg.txt --test_pos data/test_pos.txt --test_neg data/test_neg.txt</span></span></code></pre></div></div>

<p>我分別取了十分之一當作測試資料：有 112 句正向、121 句負向。</p>
<h2 id="rnnlm">RNNLM</h2>
<p>首先，我參考了 <a href="https://github.com/mesnilgr/iclr15">mesnilgr/iclr15</a> 的做法，使用 <a href="http://rnnlm.org/">rnnlm</a> 來建造語言模型，並預測測試資料的正負。rnnlm 是一個可以用來建立 Recurrent Neural Network Language Models 的方便工具。</p>
<p>首先分別挑出 200 則訓練資料當作幫助調整參數的 validation set，分別訓練出正向與負向語言模型：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> rnnlm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># construct positive language model</span>
</span></span><span class="line hl"><span class="cl">head -n <span class="m">200</span> ../data/train_pos.txt &gt; val.txt
</span></span><span class="line hl"><span class="cl">cat ../data/train_pos.txt <span class="p">|</span> sed <span class="s1">&#39;1,200d&#39;</span> &gt; train.txt
</span></span><span class="line hl"><span class="cl">./rnnlm -rnnlm pos.model -train train.txt -valid val.txt -hidden <span class="m">50</span> -direct-order <span class="m">3</span> -direct <span class="m">200</span> -class <span class="m">100</span> -debug <span class="m">2</span> -bptt <span class="m">4</span> -bptt-block <span class="m">10</span> -binary
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># construct negative language model</span>
</span></span><span class="line hl"><span class="cl">head -n <span class="m">200</span> ../data/train_neg.txt &gt; val.txt
</span></span><span class="line hl"><span class="cl">cat ../data/train_neg.txt <span class="p">|</span> sed <span class="s1">&#39;1,200d&#39;</span> &gt; train.txt
</span></span><span class="line hl"><span class="cl">./rnnlm -rnnlm neg.model -train train.txt -valid val.txt -hidden <span class="m">50</span> -direct-order <span class="m">3</span> -direct <span class="m">200</span> -class <span class="m">100</span> -debug <span class="m">2</span> -bptt <span class="m">4</span> -bptt-block <span class="m">10</span> -binary</span></span></code></pre></div></div>

<p>緊接著，把測試資料串在一起，並標記 ID 以符合 rnnlm 的輸入格式：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">cat ../data/test_pos.txt ../data/test_neg.txt <span class="p">|</span> nl -v0 -s<span class="s1">&#39; &#39;</span> -w1 &gt; test.txt</span></span></code></pre></div></div>

<p>最後再用正向與負向模型預測每個句子個可能性，並將其比值輸出到檔案中：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">./rnnlm -rnnlm pos.model -test test.txt -debug <span class="m">0</span> -nbest &gt; model_pos_score.txt
</span></span><span class="line hl"><span class="cl">./rnnlm -rnnlm neg.model -test test.txt -debug <span class="m">0</span> -nbest &gt; model_neg_score.txt
</span></span><span class="line hl"><span class="cl">mkdir ../scores
</span></span><span class="line hl"><span class="cl">paste model_pos_score.txt model_neg_score.txt <span class="p">|</span> awk <span class="s1">&#39;{print $1/$2;}&#39;</span> &gt; ../scores/RNNLM</span></span></code></pre></div></div>

<p>再稍微用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/normalize.py">normalize.py</a> 調整數據的範圍，就可以用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/evaluate.py">evaluate.py</a> 來檢查最後的正確率了。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> ..
</span></span><span class="line hl"><span class="cl">python3 normalize.py --input scores/RNNLM --output scores/RNNLM --type rnnlm
</span></span><span class="line hl"><span class="cl">python3 evaluate.py --test_pos data/test_pos.txt --scores scores/RNNLM
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># RNNLM accuracy: 87.9828%</span>
</span></span><span class="line"><span class="cl"> </span></span></code></pre></div></div>

<h2 id="word2vec-paragraph-vectors--logistic-regression">Word2Vec: Paragraph Vectors + Logistic Regression</h2>
<p>接下來我們要用具有將整個句子轉成 vector 能力的修改版 word2vec 來處理句子。值得注意的是，<a href="https://github.com/mesnilgr/iclr15">iclr15</a> 中的 word2vec 版本，在句子數目太多時，會因為 vocabulary 數量太大，而造成許多句子被丟棄而無法正確轉成 embedding。</p>
<p>為了解決這個問題，我修改了程式碼 <a href="https://github.com/shaform/word2vec/tree/doc2vec">word2vec@shaform</a>，讓我們可以用 <code>@@SE</code> 為開頭標示用來訓練 word embeddings 而不需要產生 paragraph vectors 的句子；以 <code>@@SS</code> 為開頭來標示需要產生 paragraph vectors 的句子。這樣一來就可以同時擁有大量的訓練資料，又可以完整產生所有指定的 paragraph vectors。不過在這個實驗中，為了方便，我們就不額外引進大量訓練資料，所以所有句子都會以 <code>@@SS</code> 開頭。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> word2vec
</span></span><span class="line hl"><span class="cl">cat ../data/train_pos.txt ../data/train_neg.txt ../data/test_pos.txt ../data/test_neg.txt <span class="p">|</span> nl -v0 -s<span class="s1">&#39; &#39;</span> -w1 <span class="p">|</span> sed <span class="s1">&#39;s/^/@@SS-/&#39;</span> <span class="p">|</span> shuf &gt; all.txt
</span></span><span class="line hl"><span class="cl"><span class="nb">time</span> ./word2vec -train all.txt -output vectors.txt -cbow <span class="m">0</span> -size <span class="m">400</span> -window <span class="m">10</span> -negative <span class="m">5</span> -hs <span class="m">1</span> -sample 1e-3 -threads <span class="m">24</span> -binary <span class="m">0</span> -iter <span class="m">20</span> -min-count <span class="m">1</span> -sentence-vectors <span class="m">1</span>
</span></span><span class="line hl"><span class="cl">grep <span class="s1">&#39;@@SS-&#39;</span> vectors.txt <span class="p">|</span> sed -e <span class="s1">&#39;s/^@@SS-//&#39;</span> <span class="p">|</span> sort -n &gt; sentence_vectors.txt</span></span></code></pre></div></div>

<p>緊接著用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/transform.py">transform.py</a> 和 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/train.py">train.py</a> 來產生訓練資料，並用 <a href="https://github.com/cjlin1/liblinear">liblinear</a> 的 logistic regression 來訓練：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">python3 ../transform.py --input sentence_vectors.txt --output sentence_features.txt
</span></span><span class="line hl"><span class="cl">python3 ../train.py --features sentence_features.txt --train_pos ../data/train_pos.txt --train_neg ../data/train_neg.txt --test_pos ../data/test_pos.txt --output_train train.txt --output_test test.txt
</span></span><span class="line hl"><span class="cl">../liblinear/train -s <span class="m">0</span> train.txt model.logreg
</span></span><span class="line hl"><span class="cl">../liblinear/predict -b <span class="m">1</span> test.txt model.logreg out.logreg</span></span></code></pre></div></div>

<p>再稍微用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/normalize.py">normalize.py</a> 調整數據的範圍，就可以用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/evaluate.py">evaluate.py</a> 來檢查最後的正確率了。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sed <span class="s1">&#39;1d&#39;</span> out.logreg <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3 &gt; ../scores/DOC2VEC
</span></span><span class="line hl"><span class="cl"><span class="nb">cd</span> ..
</span></span><span class="line hl"><span class="cl">python3 normalize.py --input scores/DOC2VEC --output scores/DOC2VEC --type logreg
</span></span><span class="line hl"><span class="cl">python3 evaluate.py --test_pos data/test_pos.txt --scores scores/DOC2VEC
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># DOC2VEC accuracy: 84.5494%</span>
</span></span><span class="line"><span class="cl"> </span></span></code></pre></div></div>

<h2 id="tf-idf">TF-IDF</h2>
<p>最後則是簡單的 TF-IDF，我使用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/tfidf.py">tfidf.py</a> 來產生 unigrams 和 bigrams，並用之前的 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/train.py">train.py</a> 來產生訓練資料。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">cd</span> tfidf
</span></span><span class="line hl"><span class="cl">cat ../data/train_pos.txt ../data/train_neg.txt ../data/test_pos.txt ../data/test_neg.txt &gt; all.txt
</span></span><span class="line hl"><span class="cl">python3 ../tfidf.py --input all.txt --output features.txt
</span></span><span class="line hl"><span class="cl">python3 ../train.py --features features.txt --train_pos ../data/train_pos.txt --train_neg ../data/train_neg.txt --test_pos ../data/test_pos.txt --output_train train.txt --output_test test.txt</span></span></code></pre></div></div>

<p>緊接著用 <a href="https://github.com/cjlin1/liblinear">liblinear</a> 的 logistic regression 來訓練：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">../liblinear/train -s <span class="m">0</span> train.txt model.logreg
</span></span><span class="line hl"><span class="cl">../liblinear/predict -b <span class="m">1</span> test.txt model.logreg out.logreg</span></span></code></pre></div></div>

<p>再稍微用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/normalize.py">normalize.py</a> 調整數據的範圍，就可以用 <a href="https://github.com/shaform/experiments/blob/master/sentiment_analysis/evaluate.py">evaluate.py</a> 來檢查最後的正確率了。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sed <span class="s1">&#39;1d&#39;</span> out.logreg <span class="p">|</span> cut -d<span class="s1">&#39; &#39;</span> -f3 &gt; ../scores/TFIDF
</span></span><span class="line hl"><span class="cl"><span class="nb">cd</span> ..
</span></span><span class="line hl"><span class="cl">python3 normalize.py --input scores/TFIDF --output scores/TFIDF --type logreg
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">python3 evaluate.py --test_pos data/test_pos.txt --scores scores/TFIDF
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># TFIDF accuracy: 90.9817%</span>
</span></span><span class="line"><span class="cl"> </span></span></code></pre></div></div>

<h2 id="整合">整合</h2>
<p>最後用簡單的算術平均整合 3 個模型，效能倒是沒有顯著上升：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">paste scores/RNNLM scores/DOC2VEC scores/TFIDF <span class="p">|</span> awk <span class="s1">&#39;{print ($1+$2+$3)/3;}&#39;</span> &gt; scores/TOTAL
</span></span><span class="line hl"><span class="cl">python3 evaluate.py --test_pos data/test_pos.txt --scores scores/TOTAL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># RNNLM accuracy: 87.9828%</span>
</span></span><span class="line"><span class="cl"><span class="c1"># DOC2VEC accuracy: 84.5494%</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TFIDF accuracy: 90.9817%</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TOTAL accuracy: 90.1288%</span>
</span></span><span class="line"><span class="cl"> </span></span></code></pre></div></div>

<h3 id="程式碼">程式碼</h3>
<p>我把相關的程式碼放在 GitHub 上面供參考：<a href="https://github.com/shaform/experiments/tree/master/sentiment_analysis">shaform/sentiment_analysis</a>。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/dots.jpg" alt="Dots" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>建立 LDAP 鏡像、及日常管理指令集</title>
      <link>https://city.shaform.com/zh/2014/12/14/mirror-and-mgmt-on-ldap/</link>
      <pubDate>Sun, 14 Dec 2014 17:42:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/12/14/mirror-and-mgmt-on-ldap/</guid>
      <description>建立鏡像 假設只有一台 LDAP server，則一旦 crash 大家都無法登入了，故可以建立一個鏡像 server，不斷同步資料內容。這篇假設你已經建好前篇的 ld</description>
      <content:encoded><![CDATA[<h2 id="建立鏡像">建立鏡像</h2>
<p>假設只有一台 LDAP server，則一旦 crash 大家都無法登入了，故可以建立一個鏡像 server，不斷同步資料內容。這篇假設你已經建好前篇的 ldap.lab.csie.ntu.edu.tw，而想再建一個 ldapm.lab.csie.ntu.edu.tw。則在 clients 的設定可設為：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># /etc/ldap/ldap.conf
</span></span><span class="line"><span class="cl">URI     ldaps://ldap.lab.csie.ntu.edu.tw ldaps://ldapm.lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">TLS_CACERT      /etc/ssl/certs/ca-certificates.crt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># /etc/nslcd.conf
</span></span><span class="line"><span class="cl">uri ldaps://ldap.lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">uri ldaps://ldapm.lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">#ssl off
</span></span><span class="line"><span class="cl">tls_reqcert demand
</span></span><span class="line"><span class="cl">tls_cacertfile /etc/ssl/certs/ca-certificates.crt
</span></span></code></pre></div><h2 id="初始安裝-mirror-server">初始安裝 Mirror Server</h2>
<p>首先透過<a href="/zh/2014/12/13/migrate-from-nis-to-ldap/">前一篇文章</a>的作法安裝 ldapm.lab.csie.ntu.edu.tw 但跳過「轉移 NIS 資料」的部份。此外，需使用同一個 <code>my_root</code> 但卻須產生新的 server 憑證，並對應到新的網域名稱（注意 <code>-set_serial</code> 號碼與之前不同）：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">openssl genrsa -out ldapm_key.pem <span class="m">1024</span>
</span></span><span class="line hl"><span class="cl">openssl req -new -key ldapm_key.pem -out ldapm_csr.pem
</span></span><span class="line hl"><span class="cl">openssl x509 -req -days <span class="m">36500</span> -in ldapm_csr.pem -CA my_root_crt.pem -CAkey my_root_key.pem -out ldapm_crt.pem -set_serial <span class="m">2</span></span></span></code></pre></div></div>

<h2 id="同時設定-master-和-mirror-server">同時設定 Master 和 Mirror Server</h2>
<p>接下來，我們要在兩邊分別建立一個帳戶供 mirror 之用，首先建立一個密碼，比如說 <code>1234</code>：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">slappasswd -h <span class="o">{</span>SSHA<span class="o">}</span>
</span></span><span class="line"><span class="cl">New password: 
</span></span><span class="line"><span class="cl">Re-enter new password: 
</span></span><span class="line"><span class="cl"><span class="o">{</span>SSHA<span class="o">}</span>oQ1Lw12oTHhdL9NwHQe2FoypBZX90QKx
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl"><span class="nb">echo</span> -n <span class="o">{</span>SSHA<span class="o">}</span>oQ1Lw12oTHhdL9NwHQe2FoypBZX90QKx <span class="p">|</span> base64
</span></span><span class="line"><span class="cl"><span class="nv">e1NTSEF9b1ExTHcxMm9USGhkTDlOd0hRZTJGb3lwQlpYOTBRS3g</span><span class="o">=</span></span></span></code></pre></div></div>

<p>緊接著，分別在兩台 server 上建立 <code>mirror.ldif</code> 檔案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dn: cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span><span class="line"><span class="cl">changetype: add 
</span></span><span class="line"><span class="cl">objectClass: simpleSecurityObject
</span></span><span class="line"><span class="cl">objectClass: organizationalRole
</span></span><span class="line"><span class="cl">cn: mirrormode
</span></span><span class="line"><span class="cl">description: Syncrepl user for mirrormode operation
</span></span><span class="line"><span class="cl">userPassword:: e1NTSEF9b1ExTHcxMm9USGhkTDlOd0hRZTJGb3lwQlpYOTBRS3g=
</span></span></code></pre></div><p>執行</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapmodify -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> -W -f mirror.ldif</span></span></code></pre></div></div>

<p>緊接著，分別在兩台 server 上建立 <code>mirror_config.ldif</code> 檔案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dn: cn=module{0},cn=config
</span></span><span class="line"><span class="cl">changetype: modify
</span></span><span class="line"><span class="cl">add: olcModuleLoad
</span></span><span class="line"><span class="cl">olcModuleLoad: syncprov
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dn: olcDatabase={1}hdb,cn=config
</span></span><span class="line"><span class="cl">changetype: modify
</span></span><span class="line"><span class="cl">delete: olcAccess
</span></span><span class="line"><span class="cl">olcAccess: {0}to attrs=userPassword,shadowLastChange by self write by anonymous auth by dn=&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34; write by * none
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">add: olcAccess
</span></span><span class="line"><span class="cl">olcAccess: {0}to attrs=userPassword,shadowLastChange by self write by anonymous auth by dn=&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34; write by dn=&#34;cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34; read by * none
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dn: olcOverlay=syncprov,olcDatabase={1}hdb,cn=config
</span></span><span class="line"><span class="cl">changeType: add 
</span></span><span class="line"><span class="cl">objectClass: olcOverlayConfig
</span></span><span class="line"><span class="cl">objectClass: olcSyncProvConfig
</span></span><span class="line"><span class="cl">olcOverlay: syncprov
</span></span><span class="line"><span class="cl">olcSpCheckpoint: 100 10
</span></span><span class="line"><span class="cl">olcSpSessionLog: 100 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dn: olcDatabase={1}hdb,cn=config
</span></span><span class="line"><span class="cl">changeType: modify
</span></span><span class="line"><span class="cl">delete: olcDbIndex
</span></span><span class="line"><span class="cl">olcDbIndex: objectClass eq
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">add: olcDbIndex
</span></span><span class="line"><span class="cl">olcDbIndex: objectClass,entryCSN,entryUUID eq
</span></span><span class="line"><span class="cl">-
</span></span></code></pre></div><p>執行</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapmodify -Y EXTERNAL -H ldapi:/// -f mirror_config.ldif</span></span></code></pre></div></div>

<p>最後在兩台機器上建立不同的兩個檔案 <code>ldap.ldif</code>, <code>ldapm.ldif</code>：</p>
<p>ldap.lab.csie.ntu.edu.tw：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dn: cn=config
</span></span><span class="line"><span class="cl">changeType: modify
</span></span><span class="line"><span class="cl">add: olcServerID
</span></span><span class="line"><span class="cl">olcServerID: 0
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dn: olcDatabase={1}hdb,cn=config
</span></span><span class="line"><span class="cl">changeType: modify
</span></span><span class="line"><span class="cl">add: olcSyncrepl
</span></span><span class="line"><span class="cl">olcSyncrepl: rid=001 provider=ldaps://ldapm.lab.csie.ntu.edu.tw bindmethod=simple binddn=&#34;cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34; credentials=1234 searchbase=&#34;dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34; schemachecking=on type=refreshAndPersist retry=&#34;60 +&#34;
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">add: olcMirrorMode
</span></span><span class="line"><span class="cl">olcMirrorMode: TRUE
</span></span><span class="line"><span class="cl">-
</span></span></code></pre></div><p>執行</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapmodify -Y EXTERNAL -H ldapi:/// -f ldap.ldif</span></span></code></pre></div></div>

<p>ldapm.lab.csie.ntu.edu.tw：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dn: cn=config
</span></span><span class="line"><span class="cl">changeType: modify
</span></span><span class="line"><span class="cl">add: olcServerID
</span></span><span class="line"><span class="cl">olcServerID: 1
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dn: olcDatabase={1}hdb,cn=config
</span></span><span class="line"><span class="cl">changeType: modify
</span></span><span class="line"><span class="cl">add: olcSyncrepl
</span></span><span class="line"><span class="cl">olcSyncrepl: rid=001 provider=ldaps://ldap.lab.csie.ntu.edu.tw bindmethod=simple binddn=&#34;cn=mirrormode,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34; credentials=1234 searchbase=&#34;dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34; schemachecking=on type=refreshAndPersist retry=&#34;60 +&#34;
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">add: olcMirrorMode
</span></span><span class="line"><span class="cl">olcMirrorMode: TRUE
</span></span><span class="line"><span class="cl">-
</span></span></code></pre></div><p>執行</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapmodify -Y EXTERNAL -H ldapi:/// -f ldapm.ldif</span></span></code></pre></div></div>

<p>注意 <code>olcServerID</code> 要用不同的編號，而 <code>provider</code> 要設成對方，<code>credentials</code> 則是剛剛選擇的密碼。</p>
<p>最後測試看看是否已經同步：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapsearch -x -h localhost</span></span></code></pre></div></div>

<h2 id="日常管理">日常管理</h2>
<h3 id="建立使用者">建立使用者</h3>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapadd -x -W -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">dn: cn=$username,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixGroup
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: top
</span></span></span><span class="line"><span class="cl"><span class="s">cn: $username
</span></span></span><span class="line"><span class="cl"><span class="s">userPassword: {crypt}x
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: $userid
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">ldapadd -x -W -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">dn: uid=$username,ou=People,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span></span><span class="line"><span class="cl"><span class="s">uid: $username
</span></span></span><span class="line"><span class="cl"><span class="s">cn: $realname
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: account
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: top
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: shadowAccount
</span></span></span><span class="line"><span class="cl"><span class="s">shadowMax: 99999
</span></span></span><span class="line"><span class="cl"><span class="s">shadowWarning: 7
</span></span></span><span class="line"><span class="cl"><span class="s">loginShell: /bin/bash
</span></span></span><span class="line"><span class="cl"><span class="s">uidNumber: $userid
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: $userid
</span></span></span><span class="line"><span class="cl"><span class="s">homeDirectory: /home/$username
</span></span></span><span class="line"><span class="cl"><span class="s">gecos: ,,,
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">ldappasswd -x -W -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> -S <span class="nv">uid</span><span class="o">=</span><span class="nv">$username</span>,ou<span class="o">=</span>People,dc<span class="o">=</span>lab,dc<span class="o">=</span>csie,dc<span class="o">=</span>ntu,dc<span class="o">=</span>edu,dc<span class="o">=</span>tw</span></span></code></pre></div></div>

<h3 id="刪除使用者">刪除使用者</h3>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapdelete -x -W -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> <span class="s2">&#34;cn=</span><span class="nv">$username</span><span class="s2">,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span>
</span></span><span class="line hl"><span class="cl">ldapdelete -x -W -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> <span class="s2">&#34;uid=</span><span class="nv">$username</span><span class="s2">,ou=People,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span></span></span></code></pre></div></div>

<h3 id="修改使用者的群組">修改使用者的群組</h3>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># add</span>
</span></span><span class="line hl"><span class="cl">ldapmodify -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> -W <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">dn: cn=$groupname,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span></span><span class="line"><span class="cl"><span class="s">changetype: modify
</span></span></span><span class="line"><span class="cl"><span class="s">add: memberUid
</span></span></span><span class="line"><span class="cl"><span class="s">memberUid: $username
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># remove</span>
</span></span><span class="line hl"><span class="cl">ldapmodify -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> -W <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">dn: cn=$groupname,ou=Group,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span></span><span class="line"><span class="cl"><span class="s">changetype: modify
</span></span></span><span class="line"><span class="cl"><span class="s">delete: memberUid
</span></span></span><span class="line"><span class="cl"><span class="s">memberUid: $username
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span></span></span></code></pre></div></div>

<h3 id="備份與還原">備份與還原</h3>
<p>如果只有一個鏡像壞掉，只要再用這篇的方法建立一個鏡像就可以備份到另一個。否則可以用以下兩個指令，注意不同的鏡像設定也會被備份，所以不同台 server 可能不能直接用同一個備份檔還原：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">slapcat &gt; bak.ldif
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">slapadd -l bak.ldif</span></span></code></pre></div></div>


<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>在 Debian 7.7 系統中轉移 NIS 到 LDAP</title>
      <link>https://city.shaform.com/zh/2014/12/13/migrate-from-nis-to-ldap/</link>
      <pubDate>Sat, 13 Dec 2014 17:42:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/12/13/migrate-from-nis-to-ldap/</guid>
      <description>本文件紀錄了基本的 LDAP 設置。 設定 LDAP Master 基本設置 首先編輯 /etc/ldap/ldap.conf 填上適當的網域名稱。例如： BASE dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw URI ldap://ldap.lab.csie.ntu.edu.tw 其中 URI 必須是可以連上 Master server 的 IP 或網域名稱。 緊接著，安裝 O</description>
      <content:encoded><![CDATA[<p>本文件紀錄了基本的 LDAP 設置。</p>
<h2 id="設定-ldap-master">設定 LDAP Master</h2>
<h3 id="基本設置">基本設置</h3>
<p>首先編輯 <code>/etc/ldap/ldap.conf</code> 填上適當的網域名稱。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">BASE    dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span><span class="line"><span class="cl">URI     ldap://ldap.lab.csie.ntu.edu.tw
</span></span></code></pre></div><p>其中 URI 必須是可以連上 Master server 的 IP 或網域名稱。</p>
<p>緊接著，安裝 OpenLDAP：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt-get install slapd ldap-utils</span></span></code></pre></div></div>

<p>此時它只會要你設定一個 admin 密碼，如果希望看到完整設定，可以事先執行以下指令，並設定 Dialog 為不高於 Medium 的層級。不過我偏好不改動這個設定，而是事後再重新執行設定程式。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo dpkg-reconfigure debconf</span></span></code></pre></div></div>

<p>事後重新設定的指令則是：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo dpkg-reconfigure slapd</span></span></code></pre></div></div>

<p>可按照喜好自行設定，但 domain name 要跟 <code>/etc/lapd/lapd.conf</code> 一致：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Omit OpenLDAP server configuration? No
</span></span><span class="line"><span class="cl">DNS domain name: lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">Organization name: lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">Administrator password: &lt;PASSWORD&gt;
</span></span><span class="line"><span class="cl">Confirm password: &lt;PASSWORD&gt;
</span></span><span class="line"><span class="cl">Database backend to use: HDB
</span></span><span class="line"><span class="cl">Do you want the database to be removed when slapd is purged? No
</span></span><span class="line"><span class="cl">Move old database? Yes
</span></span><span class="line"><span class="cl">Allow LDAPv2 protocol? No
</span></span></code></pre></div><p>以後如果想重設 LDAP 也可重新執行上述指令。他會將 old database 移動到 <code>/var/backups</code> 資料夾，不過如果已經移動過一次則指令會失敗，此時可先手動砍除舊的 <code>/var/backups/&lt;ldap directory&gt;</code>。</p>
<p>可以執行以下兩個指令來確認設置成功：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapsearch -x
</span></span><span class="line hl"><span class="cl">slapcat</span></span></code></pre></div></div>

<h3 id="轉移-nis-資料">轉移 NIS 資料</h3>
<p>首先安裝轉移工具組：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt-get install migrationtools</span></span></code></pre></div></div>

<p>接著編輯設定檔 <code>/usr/share/migrationtools/migrate_common.ph</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Default DNS domain</span>
</span></span><span class="line"><span class="cl"><span class="nv">$DEFAULT_MAIL_DOMAIN</span> <span class="o">=</span> <span class="s2">&#34;lab.csie.ntu.edu.tw&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Default base</span>
</span></span><span class="line"><span class="cl"><span class="nv">$DEFAULT_BASE</span> <span class="o">=</span> <span class="s2">&#34;dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl"><span class="c1"># Uncomment these to exclude Debian-managed system users and groups</span>
</span></span><span class="line"><span class="cl"><span class="nv">$IGNORE_UID_BELOW</span> <span class="o">=</span> 1000<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Don&#39;t uncomment this if you want to be able to add users to system groups</span>
</span></span><span class="line"><span class="cl"><span class="c1"># $IGNORE_GID_BELOW = 1000;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># And here&#39;s the opposite for completeness</span>
</span></span><span class="line"><span class="cl"><span class="nv">$IGNORE_UID_ABOVE</span> <span class="o">=</span> 29999<span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$IGNORE_GID_ABOVE</span> <span class="o">=</span> 29999<span class="p">;</span>
</span></span></code></pre></div><p>由於 Debian 的 LDAP 預設並沒有載入 misc.schema，所以如果要讀入 alias 資料就會出錯。因此我們只手動載入需要的部份，而不使用自動載入全部資料的方法。進入 <code>/usr/share/migrationtools/</code> 資料夾後執行以下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># create basic data</span>
</span></span><span class="line hl"><span class="cl">./migrate_base.pl <span class="p">|</span> ldapadd -x -W -h localhost -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> -c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># migrate passwd</span>
</span></span><span class="line hl"><span class="cl">./migrate_passwd.pl /etc/passwd <span class="p">|</span> ldapadd -x -W -h localhost -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> -c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># migrate group</span>
</span></span><span class="line hl"><span class="cl">./migrate_group.pl /etc/group <span class="p">|</span> ldapadd -x -W -h localhost -D <span class="s2">&#34;cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw&#34;</span> -c</span></span></code></pre></div></div>

<p>執行 <code>migrate_base.pl</code> 會有部份內容無法處理是正常的。</p>
<h2 id="設定-ldap-client">設定 LDAP Client</h2>
<p>在要透過 LDAP 登入的主機上進行以下步驟，若 LDAP Master server 本身也想透過 LDAP 登入的話，也是採用相同辦法。首先安裝相關程式</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt-get install libpam-ldapd libnss-ldapd nslcd</span></span></code></pre></div></div>

<p>並回答相關問題：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">LDAP server URI: &lt;this answer is the same as what you put in &#39;/etc/ldap/ldap.conf&#39;&gt;
</span></span><span class="line"><span class="cl">ldap://ldap.lab.csie.ntu.edu.tw/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LDAP server search base:
</span></span><span class="line"><span class="cl">dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name services to configure:
</span></span><span class="line"><span class="cl">group, password, shadow
</span></span></code></pre></div><p>接著如果要讓 root 可以在不輸入 LDAP 密碼的情況下修改別人密碼，則可修改 <code>/etc/nslcd.conf</code>，其中 <code>rootpwmodpw</code> 設為之前選擇的 LDAP 密碼：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">ldap_version 3
</span></span><span class="line"><span class="cl">rootpwmoddn cn=admin,dc=lab,dc=csie,dc=ntu,dc=edu,dc=tw
</span></span><span class="line"><span class="cl">rootpwmodpw &lt;PASSWORD&gt;
</span></span></code></pre></div><p>如果要讓 client 也能執行 <code>ldapsearch</code> 等指令，也可依 master 的方法修改 <code>/etc/lapd/lapd.conf</code>。</p>
<p>可重新開機測試是否成功。</p>
<h2 id="tls-加密連線">TLS 加密連線</h2>
<p>以上的作法，在連線時不夠安全，因此我們可以啟用 TLS 加密連線。</p>
<h3 id="建立憑證">建立憑證</h3>
<p>假設你有可供使用的憑證當然很好，但是一般人除了等待 <a href="https://letsencrypt.org/">Let&rsquo;s Encrypt</a> 以外，可能也只能自己的憑證自己建了。</p>
<p>在某個資料夾內建立相關憑證：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">openssl genrsa -out my_root_key.pem <span class="m">1024</span>
</span></span><span class="line hl"><span class="cl">openssl req -new -key my_root_key.pem -out my_root_csr.pem
</span></span><span class="line hl"><span class="cl">openssl x509 -req -days <span class="m">36500</span> -in my_root_csr.pem -signkey my_root_key.pem -out my_root_crt.pem
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">openssl genrsa -out ldap_key.pem <span class="m">1024</span>
</span></span><span class="line hl"><span class="cl">openssl req -new -key ldap_key.pem -out ldap_csr.pem
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">openssl x509 -req -days <span class="m">36500</span> -in ldap_csr.pem -CA my_root_crt.pem -CAkey my_root_key.pem -out ldap_crt.pem -set_serial <span class="m">1</span></span></span></code></pre></div></div>

<p>其中的資訊可以隨意填，但在建立 <code>ldap_csr.pem</code> 時，Common Name 一定要填 client 可以連到的，LDAP master server 的 domain name：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Country Name (2 letter code) [AU]:TW
</span></span><span class="line"><span class="cl">State or Province Name (full name) [Some-State]:Taiwan
</span></span><span class="line"><span class="cl">Locality Name (eg, city) []:Taipei
</span></span><span class="line"><span class="cl">Organization Name (eg, company) [Internet Widgits Pty Ltd]:NTU Lab
</span></span><span class="line"><span class="cl">Organizational Unit Name (eg, section) []:
</span></span><span class="line"><span class="cl">Common Name (e.g. server FQDN or YOUR name) []:ldap.lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">Email Address []:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please enter the following &#39;extra&#39; attributes
</span></span><span class="line"><span class="cl">to be sent with your certificate request
</span></span><span class="line"><span class="cl">A challenge password []:
</span></span><span class="line"><span class="cl">An optional company name []:
</span></span></code></pre></div><p>然後在 master 上建立一個資料夾，並將相關檔案複製，設定適當的權限：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo mkdir /etc/ldap/ssl
</span></span><span class="line hl"><span class="cl">sudo cp ldap_key.pem ldap_crt.pem /etc/ldap/ssl
</span></span><span class="line hl"><span class="cl">sudo mkdir /usr/share/ca-certificates/my/
</span></span><span class="line hl"><span class="cl">sudo cp my_root_crt.pem /usr/share/ca-certificates/my/my_root.crt
</span></span><span class="line hl"><span class="cl">sudo chmod <span class="m">644</span> /usr/share/ca-certificates/my/my_root.crt
</span></span><span class="line hl"><span class="cl">sudo dpkg-reconfigure ca-certificates <span class="c1"># choose to add my/my_root.crt</span>
</span></span><span class="line hl"><span class="cl">sudo update-ca-certificates
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">sudo chown -R root:openldap /etc/ldap/ssl
</span></span><span class="line hl"><span class="cl">sudo chmod -R o-rwx /etc/ldap/ssl</span></span></code></pre></div></div>

<p>然後在所有 client 上也可以複製 <code>my_root_crt.pem</code>：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo cp my_root_crt.pem /usr/share/ca-certificates/my/my_root.crt
</span></span><span class="line hl"><span class="cl">sudo chmod <span class="m">644</span> /usr/share/ca-certificates/my/my_root.crt
</span></span><span class="line hl"><span class="cl">sudo dpkg-reconfigure ca-certificates <span class="c1"># choose to add my/my_root.crt</span>
</span></span><span class="line hl"><span class="cl">sudo update-ca-certificates</span></span></code></pre></div></div>

<p>小心收藏剩餘的 key.pem，不要讓別人看到囉。</p>
<h3 id="設定-ldap-master-server">設定 LDAP Master Server</h3>
<p>注意，這裡的設定若一不小心可能導致 LDAP server 無法運作，故設定時最好先備份所有檔案。</p>
<p>首先在 master 上更改 <code>/etc/default/slapd</code>，將 <code>LAPD_SERVICES</code> 改成以下內容，也就是只允許本機不透過 TLS 連線：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">SLAPD_SERVICES=&#34;ldap://127.0.0.1:389/ ldaps:/// ldapi:///&#34;
</span></span></code></pre></div><p>緊接著建立一個 <code>tls.ldif</code> 檔案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dn: cn=config
</span></span><span class="line"><span class="cl">add: olcTLSCACertificateFile
</span></span><span class="line"><span class="cl">olcTLSCACertificateFile: /etc/ssl/certs/ca-certificates.crt
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">add: olcTLSCertificateFile
</span></span><span class="line"><span class="cl">olcTLSCertificateFile: /etc/ldap/ssl/ldap_crt.pem
</span></span><span class="line"><span class="cl">-
</span></span><span class="line"><span class="cl">add: olcTLSCertificateKeyFile
</span></span><span class="line"><span class="cl">olcTLSCertificateKeyFile: /etc/ldap/ssl/ldap_key.pem
</span></span></code></pre></div><p>並套用設定：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ldapmodify -Y EXTERNAL -H ldapi:/// -f tls.ldif</span></span></code></pre></div></div>

<p>同時更改 <code>/etc/ldap/ldap.conf</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">URI     ldaps://ldap.lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">TLS_CACERT      /etc/ssl/certs/ca-certificates.crt
</span></span></code></pre></div><p>最後重新啟動 ldap：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo service slapd restart</span></span></code></pre></div></div>

<h3 id="設定-ldap-client-1">設定 LDAP Client</h3>
<p>修改 <code>/etc/nslcd.conf</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">uri ldaps://ldap.lab.csie.ntu.edu.tw
</span></span><span class="line"><span class="cl">#ssl off
</span></span><span class="line"><span class="cl">tls_reqcert demand
</span></span><span class="line"><span class="cl">tls_cacertfile /etc/ssl/certs/ca-certificates.crt
</span></span></code></pre></div><p>重啟服務：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo service nslcd restart</span></span></code></pre></div></div>

<p>可測試是否可以登入。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>連結兩個私有內網</title>
      <link>https://city.shaform.com/zh/2014/11/12/connect-subnets/</link>
      <pubDate>Wed, 12 Nov 2014 09:20:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/11/12/connect-subnets/</guid>
      <description>實驗室的工作站先生們待在兩個不同的內網，各自透過一台工作站當 gateway 和外面的世界溝通。因此，要連結彼此時，常需要透過 gateway 的特定 port 來轉送到 sshd。這</description>
      <content:encoded><![CDATA[<p>實驗室的工作站先生們待在兩個不同的內網，各自透過一台工作站當 gateway 和外面的世界溝通。因此，要連結彼此時，常需要透過 gateway 的特定 port 來轉送到 sshd。這樣每台機器的其他不同 services 也都要額外開個 port，感覺非常不方便。</p>
<p>記得學長大大離開實驗室前，總是不能忘懷他們無法在一起的困難。於是晚輩們就決定試圖解決這個問題了！</p>
<h2 id="機器配置">機器配置</h2>
<p>假設現在有兩群工作站：</p>
<pre><code>bob     eth0: 192.168.13.1/24  eth1: 140.112.13.5
jack    eth0: 192.168.13.2/24

ted     eth0: 192.168.14.1/24  eth1: 140.112.14.20
nick    eth0: 192.168.14.2/24
</code></pre>
<p>其中，bob 和 ted 有接上 Internet，而 jack 接到 bob，nick 接到 ted，並透過他們連結外網。我們希望讓 jack 和 nick 可以直接連結。</p>
<h2 id="作法">作法</h2>
<h3 id="bob-的設定">Bob 的設定</h3>
<p>我們將會在 bob 和 ted 之間建立一個 tunnel，然後修改 routing table 將送往另一個內網的流量導進 tunnel 之中。</p>
<p>首先，在 bob 的 <code>/etc/network/interface</code> 中，修改 eth0 的設置（或者修改 eth1 也可以，不過考慮到如果 eth1 改錯可能就無法用 ssh 連進來，所以先改 eth0）：</p>
<pre><code>auto eth0
iface eth0 inet static
        address 192.168.13.1
        netmask 255.255.255.0
        network 192.168.13.0
        broadcast 192.168.13.255
        pre-up ip tunnel add mytunnel mode ipip remote 140.112.14.20
        up ip addr add 192.168.15.5/24 dev mytunnel
        up ip link set dev mytunnel up
        up ip route add 192.168.14.0/24 via 192.168.15.20
        down ip route del 192.168.14.0/24 via 192.168.15.20
        post-down ip tunnel del mytunnel
</code></pre>
<p>主要是要讓 bob 連結內網時，自動建立起 tunnel，而切斷連線時自動取消，在實際修改檔案前，也可以先用指令列測試其中的指令：</p>
<p>首先是建立一個虛擬的 tunnel 界面，並連結到 ted 的外部 IP：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo ip tunnel add mytunnel mode ipip remote 140.112.14.20</span></span></code></pre></div></div>

<p>緊接著，隨意為 bob 在此界面指定一個 IP：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo up ip addr add 192.168.15.5/24 dev mytunnel</span></span></code></pre></div></div>

<p>再來，把界面啟動連結：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo up ip link <span class="nb">set</span> dev mytunnel up</span></span></code></pre></div></div>

<p>最後再設定把連到另一個內網的流量都導到 ted 在此 tunnel 的 IP：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo up ip route add 192.168.14.0/24 via 192.168.15.20</span></span></code></pre></div></div>

<h3 id="ted-的設定">Ted 的設定</h3>
<p>同樣的道理，在 ted 的 <code>/etc/network/interface</code> 中，修改 eth0 的設置，加入以下項目：</p>
<pre><code>pre-up ip tunnel add mytunnel mode ipip remote 140.112.13.5
up ip addr add 192.168.15.20/24 dev mytunnel
up ip link set dev mytunnel up
up ip route add 192.168.13.0/24 via 192.168.15.5
down ip route del 192.168.13.0/24 via 192.168.15.5
post-down ip tunnel del mytunnel
</code></pre>
<h3 id="啟用-ip-forwarding">啟用 IP Forwarding</h3>
<p>理論上原本工作站的內網設置應該就有啟用 IP forwarding 的功能，不過為求完整，在這裡記載啟用的方法。可以在 bob 和 ted 上執行以下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo sysctl -w net.ipv4.ip_forward<span class="o">=</span><span class="m">1</span></span></span></code></pre></div></div>

<p>此外，若要讓此設定開機後仍然維持，則需修改 <code>/etc/sysctl.conf</code>，並取消註解以下的項目：</p>
<pre><code>#net.ipv4.ip_forward=1
</code></pre>
<h3 id="啟用新網路設定">啟用新網路設定</h3>
<p>接下來就可以在 bob 和 ted 上執行以下指令使新設定生效了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo ifdown eth0 <span class="o">&amp;&amp;</span> ifup eth0</span></span></code></pre></div></div>

<p>注意由於一開始 down 和 post-down 的指令可能會失敗，所以如果直接執行以上指令有可能會有問題，這時也可以重新開機。或者稍微修改一下指令執行及檔案修改的順序來達成想要的效果。</p>
<h3 id="測試">測試</h3>
<p>可以在 bob 和 jack 上測試以下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ping 192.168.14.2</span></span></code></pre></div></div>

<p>在 ted 和 nick 上測試以下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ping 192.168.13.2</span></span></code></pre></div></div>

<h2 id="參考">參考</h2>
<ul>
<li><a href="http://unix.stackexchange.com/questions/44065/linux-networking-routing-to-virtual-ip-addresses-from-a-different-subnet">Linux Networking routing to virtual ip addresses from a different subnet</a></li>
</ul>
<p>如果想要把兩組機器都放進同個內網，也可以參考更進階的：</p>
<ul>
<li><a href="https://docs.openvpn.net/how-to-tutorialsguides/site-to-site-layer-2-bridging-using-openvpn-access-server/">Site-to-Site Layer 2 Bridging Using OpenVPN Access Server and a Linux Gateway Client</a></li>
</ul>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>用中文資料測試 word2vec</title>
      <link>https://city.shaform.com/zh/2014/11/04/word2vec/</link>
      <pubDate>Tue, 04 Nov 2014 17:20:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/11/04/word2vec/</guid>
      <description>最近因為一些學習上的需要接觸了 word2vec，覺得好像是有點神秘的東西。一般初學自然語言處理的時候，處理文字最簡單的模型就是把每個詞當作一</description>
      <content:encoded><![CDATA[<p>最近因為一些學習上的需要接觸了 <a href="https://code.google.com/p/word2vec/">word2vec</a>，覺得好像是有點神秘的東西。一般初學自然語言處理的時候，處理文字最簡單的模型就是把每個詞當作一個單位，比如說用個 id 來表示他。然後再去算詞與詞之間的統計關係。或者是利用句子的文法結構來進行其他處理。如果把每個詞出現的次數當作一個維度的話，也可以把句子或文件用一個向量來表示。</p>
<p>不過 word2vec 是把每個詞本身用一個多維向量來表示，把詞投影到一個向量空間裡。而且不知道為什麼投影出來的空間有些特殊的性質，比如說相同屬性的詞可能會靠得很近，甚至部份的向量有邏輯上的線性關係等等：</p>
<pre><code>vector('King') - vector('Man') + vector('Woman') ~= vector('Queen')
</code></pre>
<p>這份筆記紀錄了使用 word2vec 處理中文資料的小小實驗。</p>
<h2 id="語料">語料</h2>
<p>不太確定有什麼開放的中文語料可供使用，於是決定先用<a href="https://github.com/audreyt/moedict-webkit">萌典</a>來做實驗，可按照教學，下載萌典資料：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">git clone --depth <span class="m">1</span> https://github.com/g0v/moedict-data.git
</span></span><span class="line hl"><span class="cl">git clone --depth <span class="m">1</span> https://github.com/g0v/moedict-epub.git
</span></span><span class="line hl"><span class="cl">cp -v moedict-data/dict-revised.json moedict-epub/
</span></span><span class="line hl"><span class="cl"><span class="nb">cd</span> moedict-epub
</span></span><span class="line hl"><span class="cl">perl json2unicode.pl &gt; dict-revised.unicode.json</span></span></code></pre></div></div>

<p>緊接著我自己寫了一個 <a href="https://github.com/shaform/experiments/blob/master/word2vec_tw/extract_json.py">extract_json.py</a> 把當中可供訓練的句子抽出來：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">python3 extract_json.py &lt; dict-revised.unicode.json &gt; sentences.txt</span></span></code></pre></div></div>

<h2 id="斷詞">斷詞</h2>
<p>因為 word2vec 的輸入必須是以空白隔開的詞，這樣得出來的句子還不能直接使用。於是我用了結巴斷詞，寫了一個 <a href="https://github.com/shaform/experiments/blob/master/word2vec_tw/cut.py">cut.py</a> 來處理這些句子。</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">python cut.py &lt; sentences.txt &gt; sentences.segged.txt</span></span></code></pre></div></div>

<p>斷出來的結果大約像是：</p>
<pre><code>紅樓夢 ． 第十七回 ： 「 一 槅 一 槅 ， 或 有 貯書處 ， 或 有 設鼎處 ， 或 安置 筆硯 處 ， 或供 設瓶花 、 或 安放 盆景 處 。 」 
</code></pre>
<p>感覺雖不是很理想，但尚可接受。</p>
<h2 id="使用-word2vec-訓練詞向量">使用 word2vec 訓練詞向量</h2>
<p>接著我就用工作站把詞全部丟給 word2vec 訓練：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">./word2vec -train sentences.segged.txt -output vectors.bin -cbow <span class="m">0</span> -size <span class="m">200</span> -window <span class="m">10</span> -negative <span class="m">5</span> -hs <span class="m">0</span> -sample 1e-4 -threads <span class="m">24</span> -binary <span class="m">1</span> -iter <span class="m">20</span> -min-count <span class="m">1</span></span></span></code></pre></div></div>

<p>因為萌典抽出來的資料不算多，所以訓練起來滿快的，只是當然效果就不太好了：</p>
<p><img src="/images/train_word2vec.png" alt="word2vec running&amp;hellip;"></p>
<h2 id="測試">測試</h2>
<p>首先測試距離相近的字：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">./distance vectors.bin </span></span></code></pre></div></div>

<p>雖然效果差強人意，不過還是可以看到相同屬性的字確實有些群聚效應：</p>
<pre><code>Enter word or sentence (EXIT to break): 法國

Word: 法國  Position in vocabulary: 992

                                            Word         Cosine distance
------------------------------------------------------------------------
                                            英國         0.763948
                                            德國         0.727664
                                          義大利         0.724732
                                            瑞士         0.724247
                                          西班牙         0.715528
                                          奧地利         0.696855
                                          蘇格蘭         0.689557
</code></pre>
<p>接著測試線性關係，A 比 B 就好像 C 比什麼？：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">./word-analogy vectors.bin </span></span></code></pre></div></div>

<p>對於國家與都市的推理，也稍有效果：</p>
<pre><code>Enter three words (EXIT to break): 法國 巴黎 英國

Word: 法國  Position in vocabulary: 992

Word: 巴黎  Position in vocabulary: 6379

Word: 英國  Position in vocabulary: 822

                                            Word         Distance
------------------------------------------------------------------------
                                            倫敦         0.583572
                                          七二年         0.576999
                                          莫斯科         0.566673
                                          四四年         0.566332
                                      一九四一年         0.562817
                                          芝加哥         0.559529
                                      一九六二年         0.556010
                                          羅浮宮         0.555593
                                          油畫院         0.554334
</code></pre>
<p>訓練出來的詞向量或許可以供進一步利用，只是在實際使用之前無法確定是否適用於特定的應用。</p>
<h2 id="程式碼">程式碼</h2>
<p>我把相關的程式碼放在 GitHub 上面供參考：<a href="https://github.com/shaform/experiments/tree/master/word2vec_tw">https://github.com/shaform/experiments/tree/master/word2vec_tw</a></p>
<h2 id="參考資料">參考資料</h2>
<ol>
<li><a href="https://code.google.com/p/word2vec/">word2vec</a></li>
<li><a href="http://www.cnblogs.com/hebin/p/3507609.html">利用中文数据跑Google开源项目word2vec</a></li>
<li><a href="http://blog.fukuball.com/ru-he-shi-yong-jieba-jie-ba-zhong-wen-fen-ci-cheng-shi/">如何使用 JIEBA 結巴中文分詞程式</a></li>
</ol>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/dots.jpg" alt="Dots" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>在工作站上使用自己的 Python 並安裝自訂套件</title>
      <link>https://city.shaform.com/zh/2014/06/22/pyvenv-and-virtualenv/</link>
      <pubDate>Sun, 22 Jun 2014 10:30:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/06/22/pyvenv-and-virtualenv/</guid>
      <description>使用工作站時常會遇到想要自行安裝 Python 套件，結果卻沒有管理權限的問題。雖然可以自行在 local 安裝套件，或者是乾脆自行安裝 local 版的 Python，但設置的程</description>
      <content:encoded><![CDATA[<p>使用工作站時常會遇到想要自行安裝 Python 套件，結果卻沒有管理權限的問題。雖然可以自行在 local 安裝套件，或者是乾脆自行安裝 local 版的 Python，但設置的程序稍微有點麻煩，而且遇到想要同時使用多種版本的 Python 時，設置就更複雜了。</p>
<p>遇到這種情形的時候，建立 Python 的 virtual environment 就可以方便的使用多個不同版本與環境的 Python。</p>
<h2 id="pyvenv">pyvenv</h2>
<p><a href="https://docs.python.org/3.4/library/venv.html">pyvenv</a> 是在 Python 3.3 後新加入官方 Python 發行版的一個 module，可以讓使用者建立自己的 virtual environment。雖然很可惜的，Debian 系的 OS 因為 <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=732703">bug 732703</a> 所以暫時無法使用。不過還是介紹一下他的用法：</p>
<ol>
<li>
<p>在 ENV_DIR 建立 virtual environment，<code>--system-site-packages</code> 參數則是讓系統安裝的套件也能被這個環境使用，3.4 則可選擇不同版本：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pyvenv-3.4 <span class="o">[</span>--system-site-packages<span class="o">]</span> ENV_DIR</span></span></code></pre></div></div>

</li>
<li>
<p>啟用特定的 virtual environment：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl"><span class="nb">source</span> ENV_DIR/bin/activate</span></span></code></pre></div></div>

<p>這時你就會發現在 prompt 前多了個名字，然後直接用 pip 安裝套件就會裝到這個 local 的 environment 了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>name<span class="o">)</span>$
</span></span></code></pre></div><p>以後要啟用某個 environment 時都要重新用 2 提到的方法啟用。</p>
</li>
</ol>
<h2 id="virtualenv">virtualenv</h2>
<p>如果工作站上有安裝 <a href="http://virtualenv.readthedocs.org/en/latest/">virtualenv</a> 的話，也可以用這個套件達到相同功能，好處是 Python 2 也可以用。</p>
<ol>
<li>
<p>在 ENV_DIR 建立 virtual environment，<code>--system-site-packages</code> 參數則是讓系統安裝的套件也能被這個環境使用，python3.4 則可選擇不同版本（包含 python2）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">virtualenv <span class="o">[</span>--system-site-packages<span class="o">]</span> -p python3.4 ENV_DIR
</span></span></code></pre></div></li>
<li>
<p>啟用特定的 virtual environment：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> ENV_DIR/bin/activate
</span></span></code></pre></div><p>這時你就會發現在 prompt 前多了個名字，然後直接用 pip 安裝套件就會裝到這個 local 的 environment 了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>name<span class="o">)</span>$
</span></span></code></pre></div><p>使用 <code>which</code> 可以看到 python 路徑：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">which python
</span></span><span class="line"><span class="cl">ENV_DIR/bin/python
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">which pip
</span></span><span class="line"><span class="cl">ENV_DIR/bin/pip
</span></span></code></pre></div><p>注意到如果當初指定用 python3.4 的話，這裡雖然下的是 python，其實也是 3.4 版。以後要啟用某個 environment 時都要重新用 2 提到的方法啟用。</p>
</li>
</ol>
<p>如果有裝 <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a> 的話其實還有更方便的方法，可以自行參考文件。</p>
<h2 id="local-packages">Local Packages</h2>
<p>如果實在是無法建立 virtual environment 的話，只能使用舊方法來安裝 local 套件了，首先在 <code>.bashrc</code> 加入對應的參數，使得執行 Python 時會載入 local 套件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">python3</span><span class="o">=</span><span class="s2">&#34;PYTHONPATH=</span><span class="nv">$PYTHONPATH</span><span class="s2">:</span><span class="nv">$HOME</span><span class="s2">/.local/lib/python3.4/site-packages python3&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">python</span><span class="o">=</span><span class="s2">&#34;PYTHONPATH=</span><span class="nv">$PYTHONPATH</span><span class="s2">:</span><span class="nv">$HOME</span><span class="s2">/.local/lib/python2.7/site-packages python&#34;</span>
</span></span></code></pre></div><p>其中各版本的路徑可自行調整。</p>
<p>接下來安裝套件時都加上 &ndash;user 參數即可，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip3 install --user flask
</span></span><span class="line"><span class="cl">python3.4 setup.py install --user
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip2 install --user flask
</span></span><span class="line"><span class="cl">python2 setup.py install --user
</span></span></code></pre></div>
<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>解決 Ubuntu 加密 Home 目錄後無法遠端用 public key 登入的問題</title>
      <link>https://city.shaform.com/zh/2014/06/21/fix-public-key-login-for-encrypted-home/</link>
      <pubDate>Sat, 21 Jun 2014 09:00:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/06/21/fix-public-key-login-for-encrypted-home/</guid>
      <description>通常啟用 SSH 登入會遇到一個大問題：經常會有奇怪的人想要暴力破解密碼，取得登入權限。最早我都是限制只能從校內 IP 來源登入來減輕這個問題，然而最近的</description>
      <content:encoded><![CDATA[<p>通常啟用 SSH 登入會遇到一個大問題：經常會有奇怪的人想要暴力破解密碼，取得登入權限。最早我都是限制只能從校內 IP 來源登入來減輕這個問題，然而最近的電腦是在 NAT 背後，透過一個 port 連結 SSH，所以似乎看不到真正的來源 IP，因此無法輕易過濾。</p>
<p>我最後決定停用密碼登入的功能，改成只能用 public key 登入，這樣子可能比較難以猜中正確的密鑰。不過實際用起來偶爾會發現登入失敗搞不清楚理由，後來才發現是因為我的 Ubuntu 啟用了家目錄加密的功能，因此尚未登入之前根本讀不到 <code>authorized_keys</code> 設定檔。為了解決這個問題，必須移動設定檔的位置才行。</p>
<h2 id="generate-ssh-keys">Generate SSH Keys</h2>
<p>首先如果沒有自己的 SSH keys 的話可以參考<a href="https://help.github.com/articles/generating-ssh-keys">〈Generating SSH Keys〉</a>建立自己的 SSH keys。大致上是使用如下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ssh-keygen -t rsa -C <span class="s2">&#34;your_email@example.com&#34;</span></span></span></code></pre></div></div>

<p>預設會把產生的 private key 存在 <code>/home/$USER/.ssh/id_rsa</code>，public key 存在 <code>/home/$USER/.ssh/id_rsa.pub</code>，不過也可以改位置。passphrase 則是用來加密 private key，建議要使用，這樣子每次要解開 private key 時都需要使用密碼，所以就算一不小心 private key 被別人取得，對方也要花上一段時間才能解開。</p>
<h2 id="更改-sshd_config-設定">更改 sshd_config 設定</h2>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudoedit /etc/ssh/sshd_config</span></span></code></pre></div></div>

<p>首先取消密碼登入，將</p>
<pre><code>#PasswordAuthentication yes
</code></pre>
<p>改成：</p>
<pre><code>PasswordAuthentication no
</code></pre>
<p>再來更動 <code>authorized_keys</code> 的位置，將</p>
<pre><code>#AuthorizedKeysFile     %h/.ssh/authorized_keys
</code></pre>
<p>改成：</p>
<pre><code>AuthorizedKeysFile     /etc/ssh/keys/%u/authorized_keys
</code></pre>
<h2 id="建立-authorized_keys-檔案">建立 authorized_keys 檔案</h2>
<p>然後根據你的 <code>$USER</code> 名字建立資料夾，並修改權限：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo mkdir -p /etc/ssh/keys/<span class="nv">$USER</span>
</span></span><span class="line hl"><span class="cl">sudo chmod <span class="m">755</span> /etc/ssh/keys
</span></span><span class="line hl"><span class="cl">sudo chmod <span class="m">700</span> /etc/ssh/<span class="nv">$USER</span>
</span></span><span class="line hl"><span class="cl">sudo chown <span class="nv">$USER</span>:<span class="nv">$USER</span> /etc/ssh/<span class="nv">$USER</span></span></span></code></pre></div></div>

<p>最後再將 <code>id_rsa.pub</code> 拷貝到 server 上，並複製到 authorized_keys：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># copy id_rsa.pub to server, then -&gt;</span>
</span></span><span class="line hl"><span class="cl">cat id_rsa.pub &gt;&gt; /etc/ssh/keys/<span class="nv">$USER</span>/authorized_keys
</span></span><span class="line hl"><span class="cl">chmod <span class="m">400</span> /etc/ssh/ssh/keys/<span class="nv">$USER</span>/authorized_keys</span></span></code></pre></div></div>

<h2 id="重新讀取設定">重新讀取設定</h2>
<p>重新讀取設定檔並測試一下登入就大功告成：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo service ssh reload</span></span></code></pre></div></div>


<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>在 UEFI 模式下同時安裝 Windows 8.1 和 Ubuntu 14.04</title>
      <link>https://city.shaform.com/zh/2014/06/19/install-w8-ubuntu-with-uefi/</link>
      <pubDate>Thu, 19 Jun 2014 16:05:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/06/19/install-w8-ubuntu-with-uefi/</guid>
      <description>總是喜歡在自己的電腦上裝 Linux。小時候安裝還很麻煩，要燒光碟。後來研究了從硬碟安裝的方法，可又需要額外的磁區。一直到 USB 隨身碟普及了以後，</description>
      <content:encoded><![CDATA[<p>總是喜歡在自己的電腦上裝 Linux。小時候安裝還很麻煩，要燒光碟。後來研究了從硬碟安裝的方法，可又需要額外的磁區。一直到 USB 隨身碟普及了以後，重灌才成為一件比較方便的事。尤其 <a href="http://www.ubuntu.com/">Ubuntu</a> 的安裝界面做的還不錯，後來就一直用到今天。</p>
<p>雖然習慣使用 Linux，可是有時候還是會遇到要在 Windows 上才能寫的作業，所以每次都把電腦灌成雙系統，也慢慢熟悉了這個過程，一直以來不太有改變。不過最近拿到一台有 <a href="http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface">UEFI</a> 開機的 Lenovo ThinkPad X1 Carbon 筆電，又想在啟用 Secure Boot 的情況下同時裝雙系統，設置上就比較麻煩了。本文就是記載這個過程。</p>
<h2 id="安裝-windows-8">安裝 Windows 8</h2>
<p>原本如果是在正常的電腦上安裝 Windows 8，可以透過 <a href="http://www.microsoftstore.com/store/msusa/html/pbPage.Help_Win7_usbdvd_dwnTool">Windows USB/DVD download tool</a> 來製作安裝用隨身碟，但在 UEFI 啟用的情況下就不行了。這時參考<a href="http://social.msdn.microsoft.com/Forums/en-US/e7ed293e-b565-44ee-a536-166dddf32205/how-to-create-windows-8-installation-bootable-usb-for-uefi-samsung-slate">〈How to create Windows 8 installation bootable USB for UEFI〉</a>，首先在 Windows 環境下使用管理員權限執行 cmd.exe，用 diskpart.exe 找出隨身碟的代號：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">diskpart.exe
</span></span><span class="line"><span class="cl">list disk
</span></span></code></pre></div><p>再把隨身碟格式化成 FAT32，並設成可開機。注意，<code>disk 1</code> 的這個 <code>1</code> 要選擇隨身碟代號，否則可能會把其他硬碟的內容給刪除。<code>partition 1</code> 則指的是隨身碟上的第一個 partition：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">select disk 1
</span></span><span class="line"><span class="cl">clean
</span></span><span class="line"><span class="cl">create partition primary
</span></span><span class="line"><span class="cl">select partition 1
</span></span><span class="line"><span class="cl">active
</span></span><span class="line"><span class="cl">format quick fs=fat32
</span></span><span class="line"><span class="cl">assign
</span></span><span class="line"><span class="cl"><span class="k">exit</span>
</span></span></code></pre></div><p>理論上用其他工具格式化隨身碟可能也可以，不過沒有嘗試過。</p>
<p>接下來，先 mount Windows 8 的安裝光碟，然後把內容全部拷貝到隨身碟上，比如說如果安裝光碟 mount 在 <code>H:</code>，而隨身碟在 <code>F:</code> 的話：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">xcopy H:\* F:\ /s /e
</span></span></code></pre></div><p>然後先用 BIOS 停用 UEFI Secure Boot，才能用隨身碟開機。首先開始安裝 Windows 8。參考 <a href="http://www.techrepublic.com/blog/windows-and-office/the-complete-guide-to-a-windows-8-clean-installation/">〈The complete guide to a Windows 8 clean installation〉</a> 進行安裝，但自行設定硬碟磁區大小，空出給 Ubuntu 的空間。此時安裝程式也會自動幫你建立 Recovery, System (Reserved), MSR (EFI 磁區) 等三個磁區，看起來很醜，不過可能有用，就保留吧。</p>
<p>裝完後不知為什麼時間設定有錯，而且也無法更新，於是參考<a href="http://www.trishtech.com/2013/03/change-time-servers-in-windows-8/">〈Change Time Servers in Windows 8〉</a>，將 time server 改成台大的 <code>ntp2.ntu.edu.tw</code>。</p>
<p>最後重開機，在 BIOS 中啟用 UEFI Secure Boot 就大功告成了。</p>
<h2 id="安裝-windows-81">安裝 Windows 8.1</h2>
<p>假設直接用 Windows 8.1 安裝光碟，到這裡就結束了。可是因為學校只有升級版的 Windows 8.1，所以緊接著馬上從 Windows 8 升級到 Windows 8.1。</p>
<p>首先用 Windows Update 更新系統，然後 mount Windows 8.1 光碟，並執行他。開始一步步安裝，安裝的選項跟 Windows 8 差不多，我選擇不要保留任何設定，把 Windows 8 的紀錄都洗掉。安裝完硬碟又會多一個 Recovery 磁區，雖然很醜，可是可能有用所以保留他。</p>
<p>安裝完後再重新設定一次 time server 就大功告成了！</p>
<h2 id="安裝-ubuntu-1404-64-bit">安裝 Ubuntu 14.04 64-bit</h2>
<p>只有 64-bit 版本對 UEFI 有較好的支援，所以首先參考<a href="http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-ubuntu">〈How to create a bootable USB stick on Ubuntu〉</a>製作一個 Ubuntu 14.04 安裝隨身碟，然後參考<a href="https://help.ubuntu.com/community/UEFI">〈Ubuntu Community Wiki: UEFI〉</a>來安裝，基本上安裝過程跟一般情形一樣，只是我選擇自訂磁碟分割，所以要自己找出 EFI 磁區，然後指定 mount 到 <code>/boot/efi</code>。</p>
<p>最後裝完會遇到一個 bug：<a href="https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/1091464">〈Unable to chainload Windows 8 with Secure Boot enabled
〉</a>，使得無法直接用 grub2 來啟動 Windows 8.1，不過 ThinkPad X1 Carbon 可以透過 BIOS 來多重開機，因此還是可以使用，對於很少使用 Windows 8.1 的我來說並不造成困擾。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>簡單的 PTT BBS 掛站設定</title>
      <link>https://city.shaform.com/zh/2014/05/27/stay-on-bbs/</link>
      <pubDate>Tue, 27 May 2014 13:21:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/05/27/stay-on-bbs/</guid>
      <description>很久以前看到了 othree 的〈掛站系統設定篇〉，學會了如何在工作站上掛著 BBS。在那以後就很少使用桌面軟體來連 PTT 等 BBS。使用工作站掛站的優點主要是不</description>
      <content:encoded><![CDATA[<p>很久以前看到了 othree 的<a href="https://blog.othree.net/log/2005/12/16/stay-on-bbs-setting/">〈掛站系統設定篇〉</a>，學會了如何在工作站上掛著 BBS。在那以後就很少使用桌面軟體來連 PTT 等 BBS。使用工作站掛站的優點主要是不用一直重新登入很方便，另外在一些公共區域上網時，避免直接使用明文帳密連結 telnet 而透過 ssh 感覺比較安心一點。（不過其實我建議 BBS 還是使用不同的密碼比較好呀。）</p>
<p>後來我發現其實掛一些我平常在逛的站如 PTT or PTT2 其實很少會遇到逾時被登出的狀況，所以就省去了使用 expect 來不斷送出空白訊號的麻煩。就用這篇文章來紀錄這個簡化的掛站方法。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

<h2 id="tmux">Tmux</h2>
<p>筆者原本使用 <code>screen</code>，不過後來換成 <code>tmux</code> 之後又改了新版的 PTT 掛站指令，感覺更方便了。如下所示，只要放進 <code>~/.bashrc</code> 之中，則只要打 <code>ptt</code> 或 <code>ptt2</code> 就可以連上掛站的 BBS 們了。</p>
<p>同時也支援在已經打開 tmux 的情況下切換到對應的 session。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">function</span> ptt<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$TMUX</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nv">TMUX</span><span class="o">=</span> tmux new-session -d -s P1 <span class="s2">&#34;tmux set status off; ssh bbsu@ptt.cc&#34;</span> <span class="p">&amp;</span>&gt;/dev/null
</span></span><span class="line"><span class="cl">    tmux switch-client -t P1
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    tmux new-session -A -s P1 <span class="s2">&#34;tmux set status off; ssh bbsu@ptt.cc&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> ptt2<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$TMUX</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nv">TMUX</span><span class="o">=</span> tmux new-session -d -s P2 <span class="s2">&#34;tmux set status off; ssh bbsu@ptt2.cc&#34;</span> <span class="p">&amp;</span>&gt;/dev/null
</span></span><span class="line"><span class="cl">    tmux switch-client -t P2
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    tmux new-session -A -s P2 <span class="s2">&#34;tmux set status off; ssh bbsu@ptt2.cc&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="screen">Screen</h2>
<p>首先在 <code>$HOME</code> 目錄建一個叫做 <code>screenrc-bbs</code> 的資料夾，接下來在資料夾裡根據想逛的 bbs 建立 screenrc 檔案。</p>
<p>比如說 screenrc-bbs/ptt：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vbell off 
</span></span><span class="line"><span class="cl">screen -t <span class="s1">&#39;ptt&#39;</span> ssh bbsu@ptt.cc
</span></span></code></pre></div><p>screenrc-bbs/ptt2：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vbell off 
</span></span><span class="line"><span class="cl">screen -t <span class="s1">&#39;ptt2&#39;</span> ssh bbsu@ptt2.cc
</span></span></code></pre></div><p>screenrc-bbs/ptt3：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vbell off
</span></span><span class="line"><span class="cl">defencoding big5
</span></span><span class="line"><span class="cl">screen -t <span class="s1">&#39;ptt3&#39;</span> telnet ptt3.cc
</span></span><span class="line"><span class="cl">defencoding big5
</span></span></code></pre></div><p>screenrc-bbs/bs2：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vbell off 
</span></span><span class="line"><span class="cl">defencoding big5 
</span></span><span class="line"><span class="cl">screen -t <span class="s1">&#39;bs2&#39;</span> telnet -8 bs2.to 
</span></span><span class="line"><span class="cl">defencoding big5 
</span></span></code></pre></div><p>最後在 <code>.bashrc</code> 加入 alias 就大功完成啦：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">bs2</span><span class="o">=</span><span class="s2">&#34;if ! screen -rD BS2 &gt;&amp; /dev/null ; then LANG=&#39;zh_TW.UTF-8&#39; screen -S BS2 -c </span><span class="nv">$HOME</span><span class="s2">/screenrc-bbs/bs2 ; fi&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ptt</span><span class="o">=</span><span class="s2">&#34;if ! screen -rD PTT1 &gt;&amp; /dev/null ; then LANG=&#39;zh_TW.UTF-8&#39; screen -S PTT1 -c </span><span class="nv">$HOME</span><span class="s2">/screenrc-bbs/ptt ; fi&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ptt2</span><span class="o">=</span><span class="s2">&#34;if ! screen -rD PTT2 &gt;&amp; /dev/null ; then LANG=&#39;zh_TW.UTF-8&#39; screen -S PTT2 -c </span><span class="nv">$HOME</span><span class="s2">/screenrc-bbs/ptt2 ; fi&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">ptt3</span><span class="o">=</span><span class="s2">&#34;if ! screen -rD PTT3 &gt;&amp; /dev/null ; then LANG=&#39;zh_TW.UTF-8&#39; screen -S PTT3 -c </span><span class="nv">$HOME</span><span class="s2">/screenrc-bbs/ptt3 ; fi&#34;</span>
</span></span></code></pre></div><p>如此一來，下次登入時只要直接打 <code>ptt</code> 就可以開始逛版了，要離開則按 <code>Ctrl-A Ctrl-D</code>，只要沒有被斷線的話隨時登入工作站都可以下 <code>ptt</code> 指令重回之前的進度。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>從 Pixnet 轉移到 Pelican</title>
      <link>https://city.shaform.com/zh/2014/05/17/migrate-from-pixnet-to-pelican/</link>
      <pubDate>Sat, 17 May 2014 07:25:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/05/17/migrate-from-pixnet-to-pelican/</guid>
      <description>「翼之都」這個技術部落格其實早在 2006 年就成立了，一直放在 Blogger 上，但很少新增文章。最近好不容易開始打算多寫一些技術文，卻突然發現在 Blogger 上實在是有點麻</description>
      <content:encoded><![CDATA[<p>「翼之都」這個技術部落格其實早在 2006 年就成立了，一直放在 Blogger 上，但很少新增文章。最近好不容易開始打算多寫一些技術文，卻突然發現在 Blogger 上實在是有點麻煩：它對於一些程式碼的的支援有點不直覺，而文章的寫作方式也有許多不符我的需求。最後索性就把這個網誌改用 Pelican 建立了。而因為文章只有一點點，所以是用手動搬的。</p>
<p>搬完以後覺得這種靜態網頁在管理和備份文章上實在是很方便。想到「浮光」這個文章集散處，其實完全是由很少 HTML 的靜態文章所組成，實在是很適合放到 Pelican 上，再者 Pixnet 的後台界面自己一直不是很喜歡，所以就乾脆一起搬了。</p>
<p>以下記載完成這件事的流程，使用的環境是 Ubuntu 14.04 64-bit。</p>
<h2 id="安裝-pelican">安裝 Pelican</h2>
<p>詳細安裝方法可見 <a href="http://docs.getpelican.com/en/3.3.0/getting_started.html">Getting started</a> 文件，我自己選的方法是用 <a href="http://virtualenvwrapper.readthedocs.org">virtualenvwrapper</a>，並從 source code 直接安裝最新版的 Pelican（其實這是因為我想要讓文章的發布時間可以支援用不同時區的表示格式，舊版的 Pelican 似乎尚未支援）。</p>
<h3 id="1-安裝-virtualenvwrapper">1. 安裝 virtualenvwrapper</h3>
<p>首先輸入以下指令：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt-get install python-pip virtualenvwrapper</span></span></code></pre></div></div>

<p>然後新增 pelican 環境</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">mkvirtualenv pelican</span></span></code></pre></div></div>

<p>這樣以後如果要進入 pelican 環境的話只要下：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">workon pelican</span></span></code></pre></div></div>

<p>而安裝的套件也不會跟系統混在一起。</p>
<h3 id="2-安裝-pelican">2. 安裝 pelican</h3>
<p>在 pelican 環境下隨意找個位置，下載 pelican 原始碼，並安裝相關套件：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">git clone https://github.com/getpelican/pelican.git
</span></span><span class="line hl"><span class="cl"><span class="nb">cd</span> pelican
</span></span><span class="line hl"><span class="cl">python setup.py install
</span></span><span class="line hl"><span class="cl">pip install Markdown</span></span></code></pre></div></div>

<p>最後選個資料夾放置網誌檔案，並下以下指令，就可以建立簡單的設定擋了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pelican-quickstart</span></span></code></pre></div></div>

<h2 id="匯出">匯出</h2>
<p>Pixnet 的匯出格式是 Movable Type，恰巧 pelican-import 尚未支援。同時，浮光上的文章常有大量空行，我希望對轉換的格式有更多控制，所以乾脆自己寫了一個 Python script 來進行轉換：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># -*- coding: utf-8 -*-</span>
</span></span><span class="line"><span class="cl"><span class="c1"># python convert.py &lt; blog-export.txt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">fileinput</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os.path</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pelican.utils</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">p_transform</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_lines</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">empty</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">empty</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">empty</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">empty</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">new_lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">num</span> <span class="o">=</span> <span class="p">((</span><span class="n">empty</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                    <span class="n">new_lines</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="s1">&#39;&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="sa">u</span><span class="s1">&#39;&amp;nbsp;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="n">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">empty</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">            <span class="n">new_lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">new_lines</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rData</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;(\d</span><span class="si">{2}</span><span class="s1">)/(\d</span><span class="si">{2}</span><span class="s1">)/(\d</span><span class="si">{4}</span><span class="s1">) (\d</span><span class="si">{2}</span><span class="s1">):(\d</span><span class="si">{2}</span><span class="s1">):(\d</span><span class="si">{2}</span><span class="s1">) (PM|AM)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">article</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;TITLE: &#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">article</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">7</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">l</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;DATE: &#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">m</span> <span class="o">=</span> <span class="n">rData</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">m</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;wrong with </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">gs</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">groups</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gs</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">gs</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">==</span> <span class="sa">u</span><span class="s1">&#39;PM&#39;</span> <span class="ow">and</span> <span class="n">t</span> <span class="o">!=</span> <span class="mi">12</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">t</span> <span class="o">+=</span> <span class="mi">12</span>
</span></span><span class="line"><span class="cl">                <span class="n">article</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="sa">u</span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1">-</span><span class="si">{}</span><span class="s1">-</span><span class="si">{}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">:</span><span class="si">{}</span><span class="s1">:</span><span class="si">{}</span><span class="s1">+0800&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">gs</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">gs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">gs</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                        <span class="n">t</span><span class="p">,</span> <span class="n">gs</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">gs</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">l</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;PRIMARY CATEGORY: &#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">cat</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">18</span><span class="p">:</span><span class="n">l</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;STATUS&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">cat</span> <span class="ow">in</span> <span class="p">[</span><span class="sa">u</span><span class="s1">&#39;雪山&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;海岸&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;城市&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;？？&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">article</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="sa">u</span><span class="s1">&#39;天予&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="n">article</span><span class="p">[</span><span class="s1">&#39;tags&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sa">u</span><span class="s1">&#39;天予：&#39;</span> <span class="o">+</span> <span class="n">cat</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;系列&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;奇幻&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="n">cat</span> <span class="ow">in</span> <span class="p">[</span><span class="sa">u</span><span class="s1">&#39;我的世界&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;記憶&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">article</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cat</span>
</span></span><span class="line"><span class="cl">                <span class="n">article</span><span class="p">[</span><span class="s1">&#39;tags&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sa">u</span><span class="s1">&#39;系列&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">article</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">cat</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">l</span> <span class="o">==</span> <span class="sa">u</span><span class="s1">&#39;BODY:</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="s1">&#39;-----</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;nbsp&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">lines</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="sa">u</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="sa">u</span><span class="s1">&#39;&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">space</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                            <span class="n">space</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">                        <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;&lt;p&gt;&#39;</span><span class="p">,</span> <span class="sa">u</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;&lt;!-- more --&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="n">space</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                            <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span>
</span></span><span class="line"><span class="cl">            <span class="n">article</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_transform</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">l</span> <span class="o">==</span> <span class="sa">u</span><span class="s1">&#39;--------</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="s1">&#39;body&#39;</span> <span class="ow">in</span> <span class="n">article</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">article</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;content/&#39;</span> <span class="o">+</span> <span class="n">article</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">pelican</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">slugify</span><span class="p">(</span><span class="n">article</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="s1">&#39;.md&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Title: </span><span class="si">{}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">article</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Date: </span><span class="si">{}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">article</span><span class="p">[</span><span class="s1">&#39;date&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Category: </span><span class="si">{}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">article</span><span class="p">[</span><span class="s1">&#39;category&#39;</span><span class="p">])</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="s1">&#39;tags&#39;</span> <span class="ow">in</span> <span class="n">article</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Tags: </span><span class="si">{}</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">article</span><span class="p">[</span><span class="s1">&#39;tags&#39;</span><span class="p">]))</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;Authors: Shaform</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">u</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">article</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>這個 script 會將結果輸出到 content/{category}/{title}.md 檔案，自動轉換適當的空行、分類、日期格式等等。分類的處理是依據浮光的架構，所以只有浮光能用。</p>
<h2 id="發布到-google-app-engine">發布到 Google App Engine</h2>
<p>在這過程中，我短暫的嘗試用 <a href="https://console.developers.google.com/start/appengine">Google App Engine</a> 作為發布平台，不過因為太麻煩，所以最後還是採用 GitHub Pages。</p>
<p>實際的作法是先申請個帳號，然後安裝 SDK：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">curl sdk.cloud.google.com <span class="p">|</span> bash
</span></span><span class="line"><span class="cl"><span class="c1"># restart the Terminal, then</span>
</span></span><span class="line hl"><span class="cl">gcloud auth login</span></span></code></pre></div></div>

<p>緊接著在網誌目錄中新增 app.yaml 檔案，設定讓伺服器顯示靜態網頁：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">application</span><span class="p">:</span><span class="w"> </span><span class="l">APP-NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">runtime</span><span class="p">:</span><span class="w"> </span><span class="l">python27</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">api_version</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">threadsafe</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">module</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">handlers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">static_files</span><span class="p">:</span><span class="w"> </span><span class="l">output/index.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">upload</span><span class="p">:</span><span class="w"> </span><span class="l">output/index.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">static_dir</span><span class="p">:</span><span class="w"> </span><span class="l">output</span><span class="w">
</span></span></span></code></pre></div><p>然後修改 <code>Makefile</code> 新增如下指令，自動將檔案複製到指定位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">gcloud</span><span class="o">:</span> <span class="n">publish</span>
</span></span><span class="line"><span class="cl">    mkdir -p gcloud/output
</span></span><span class="line"><span class="cl">    cp -r <span class="k">$(</span>OUTPUTDIR<span class="k">)</span>/* gcloud/output
</span></span><span class="line"><span class="cl">    mv gcloud <span class="k">$(</span>OUTPUTDIR<span class="k">)</span>
</span></span><span class="line"><span class="cl">    cp app.yaml <span class="k">$(</span>OUTPUTDIR<span class="k">)</span>/gcloud
</span></span><span class="line"><span class="cl">    appcfg.py update <span class="k">$(</span>OUTPUTDIR<span class="k">)</span>/gcloud
</span></span></code></pre></div><p>這樣的話只要在網誌的目錄下執行以下指令，就可以把網頁發布到 Google App Engine 上了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">make gcloud</span></span></code></pre></div></div>

<h2 id="發布到-github-pages">發布到 GitHub Pages</h2>
<p>雖然 Pelican 原本就有支援 GitHub Pages 的發布，不過我比較希望在 local 端的 master branch 紀錄網誌的原始 Markdown 檔案，在 gh-pages branch 上紀錄產生的網頁，因此我在 <code>Makefile</code> 做了以下修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">GITHUB_PAGES_BRANCH</span><span class="o">=</span>gh-pages
</span></span><span class="line"><span class="cl">github: publish
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;DOMAIN-NAME&#34;</span> &gt; <span class="k">$(</span>OUTPUTDIR<span class="k">)</span>/CNAME
</span></span><span class="line"><span class="cl">        ghp-import -r gh-pages -b <span class="k">$(</span>GITHUB_PAGES_BRANCH<span class="k">)</span> <span class="k">$(</span>OUTPUTDIR<span class="k">)</span> -m <span class="s2">&#34;</span><span class="k">$(</span>MSG<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        git push gh-pages <span class="k">$(</span>GITHUB_PAGES_BRANCH<span class="k">)</span>:master
</span></span></code></pre></div><p>其中 DOMAIN-NAME 那行是自訂 domain 用的，若沒有可以刪除。而 <code>-m $(MSG)</code> 則是為了讓我可以用 <code>MSG=&quot;new update&quot; make github</code> 來自訂 commit 訊息。最後一行的 <code>master</code>，如果是用 username.github.io 的話就保留 <code>master</code>，如果是一般 projects 的話就改成 <code>gh-pages</code>。</p>
<p>緊接著安裝 <code>ghp-import</code>：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">pip install ghp-import</span></span></code></pre></div></div>

<p>然後按照 <a href="https://pages.github.com">GitHub Pages</a> 的說明，建立一個 repository，並把整個網誌的目錄當成這個 repository。（我其實是先 <code>git clone</code> 然後把 .git 資料夾直接搬到網誌目錄中。）</p>
<h2 id="結果">結果</h2>
<p>最後再調整一些佈景和版面的設定，就成了最後的結果。初步感覺還滿令我滿意的。以後再慢慢調整浮光以及翼之都的版面吧。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>在 Ubuntu 12.04 安裝 HDFS 及 HBase 筆記</title>
      <link>https://city.shaform.com/zh/2014/04/13/hbase-on-ubuntu-12.04/</link>
      <pubDate>Sun, 13 Apr 2014 15:56:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2014/04/13/hbase-on-ubuntu-12.04/</guid>
      <description>這篇是假設 master, slave-1, slave-2 的 domain name/ip 分別為： master-dn, slave-1-dn, slave-2-dn。 一、HDFS 安裝 JDK 7 sudo apt-get update &amp;amp;&amp;amp; apt-get upgrade # 更新套件庫 sudo apt-get install software-properties-common python-software-properties # 取得 add-apt-repository sudo add-apt-repository ppa:webupd8team/java # 新增有 oracle-java7-installer 的 ppa sudo</description>
      <content:encoded><![CDATA[<p>這篇是假設 master, slave-1, slave-2 的 domain name/ip 分別為： master-dn, slave-1-dn, slave-2-dn。</p>
<h2 id="一hdfs">一、HDFS</h2>
<ol>
<li>
<p>安裝 JDK 7</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade <span class="c1"># 更新套件庫</span>
</span></span><span class="line hl"><span class="cl">sudo apt-get install software-properties-common python-software-properties  <span class="c1"># 取得 add-apt-repository</span>
</span></span><span class="line hl"><span class="cl">sudo add-apt-repository ppa:webupd8team/java  <span class="c1"># 新增有 oracle-java7-installer 的 ppa</span>
</span></span><span class="line hl"><span class="cl">sudo apt-get update
</span></span><span class="line hl"><span class="cl">sudo apt-get install oracle-java7-installer</span></span></code></pre></div></div>

</li>
<li>
<p>設定 SSH</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ssh-keygen -b <span class="m">2048</span> -t rsa:q  <span class="c1"># 產生 RSA key pair</span>
</span></span><span class="line hl"><span class="cl">cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys  <span class="c1"># 讓自己可以不用密碼登入自己</span></span></span></code></pre></div></div>

<p>在 NameNode 上：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">ssh-copy-id -i <span class="nv">$HOME</span>/.ssh/id_rsa.pub user@slave-1-dn  <span class="c1"># 讓 NameNode 可不用密碼登入 DataNode</span>
</span></span><span class="line hl"><span class="cl">ssh-copy-id -i <span class="nv">$HOME</span>/.ssh/id_rsa.pub user@slave-2-dn  <span class="c1"># 讓 NameNode 可不用密碼登入 DataNode</span></span></span></code></pre></div></div>

</li>
<li>
<p>安裝 Hadoop</p>
<p>先在 $HOME/.bashrc 加上 <code>export PATH=$PATH:$HOME/hadoop-1.2.1/bin</code>，然後進入家目錄：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">wget http://ftp.tc.edu.tw/pub/Apache/hadoop/common/hadoop-1.2.1/hadoop-1.2.1-bin.tar.gz
</span></span><span class="line hl"><span class="cl">tar -xvf hadoop-1.2.1-bin.tar.gz
</span></span><span class="line hl"><span class="cl"><span class="nb">cd</span> hadoop-1.2.1/conf</span></span></code></pre></div></div>

<p>修改 hadoop-env.sh 加上 <code>export JAVA_HOME=/usr/lib/jvm/java-7-oracle</code>。</p>
</li>
<li>
<p>進階設定</p>
<p>在下列檔案中的<!-- raw HTML omitted -->內新增如下內容：</p>
<ul>
<li>
<p>core-site.xml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;name&gt;</span>fs.default.name<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;value&gt;</span>hdfs://master-dn:54310<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>mapred-site.xml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;name&gt;</span>mapred.job.tracker<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;value&gt;</span>master-dn:54311<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>hdfs-site.xml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;value&gt;</span>3<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div></li>
</ul>
<p>然後在 NameNode 上修改將以下檔案修改成如下內容：</p>
<ul>
<li>
<p>masters</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">master-dn
</span></span></code></pre></div></li>
<li>
<p>slaves</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">master-dn
</span></span><span class="line"><span class="cl">slave-1-dn
</span></span><span class="line"><span class="cl">slave-2-dn
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>開啟伺服器
最後在 NameNode 上執行以下指令將 cluster 啟動（可能需要重新登入讓 PATH 設定生效）：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">hadoop namenode -format  <span class="c1"># 格式化檔案系統</span>
</span></span><span class="line hl"><span class="cl">start-all.sh  <span class="c1"># 啟動所有服務（包含 HDFS）</span></span></span></code></pre></div></div>

</li>
</ol>
<h2 id="二hbase">二、HBase</h2>
<p>首先進入每台的家目錄，下載並解壓縮 HBase：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">wget http://ftp.twaren.net/Unix/Web/apache/hbase/stable/hbase-0.94.14.tar.gz
</span></span><span class="line hl"><span class="cl">tar -xvf hbase-0.94.14.tar.gz</span></span></code></pre></div></div>

<p>編輯 hbase-0.94.14/conf/hbase-env.sh，新增數行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/java-7-oracle
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HADOOP_CONF_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/hadoop-1.2.1/conf
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HBASE_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/hbase-0.94.14
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HBASE_LOG_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/logs/hbase-logs
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HBASE_PID_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/logs/hbase-pids
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HBASE_CLASSPATH</span><span class="o">=</span><span class="nv">$HBASE_CLASSPATH</span>:<span class="nv">$HOME</span>/hadoop-1.2.1/conf
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HBASE_MANAGES_ZK</span><span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></div><p>編輯 hbase-0.94.14/conf/hbase-site.xml，在<!-- raw HTML omitted -->內新增如下內容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;name&gt;</span>hbase.rootdir<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;value&gt;</span>hdfs://master-dn:54310/hbase<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;name&gt;</span>hbase.tmp.dir<span class="nt">&lt;/name&gt;</span> 
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;value&gt;</span>/home/hbase-${user.name}<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;name&gt;</span>hbase.cluster.distributed<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>       
</span></span><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span> 
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;name&gt;</span>hbase.zookeeper.quorum<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;value&gt;</span>master-dn,slave-1-dn,slave-2-dn<span class="nt">&lt;/value&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;property&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;name&gt;</span>hbase.zookeeper.property.dataDir<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;value&gt;</span>/home/hbase-data<span class="nt">&lt;/value&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/property&gt;</span>
</span></span></code></pre></div><p>然後編輯 hbase-0.94.14/conf/regionservers 將內容改為如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">master-dn
</span></span><span class="line"><span class="cl">slave-1-dn
</span></span><span class="line"><span class="cl">slave-2-dn
</span></span></code></pre></div><p>最後就可以在 master 執行 HBase 了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">./hbase-0.94.14/bin/start-hbase.sh</span></span></code></pre></div></div>


<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>qwerty 轉換到 dvorak 筆記</title>
      <link>https://city.shaform.com/zh/2013/07/12/qwerty-to-dvorak/</link>
      <pubDate>Fri, 12 Jul 2013 18:53:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2013/07/12/qwerty-to-dvorak/</guid>
      <description>Windows Windows 是透過新增輸入法的方式增加 dvoark 鍵盤，如果是新的版本，登入畫面也可以選擇不同的鍵盤使用，如果一開始安裝就選擇 dvorak 的話，就會成為預設值。如果是 XP</description>
      <content:encoded><![CDATA[
<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2013/keyboard.jpg" alt="Keyboard" />
    </div>
    
  </figure>
</div>

<h2 id="windows">Windows</h2>
<p>Windows 是透過新增輸入法的方式增加 dvoark 鍵盤，如果是新的版本，登入畫面也可以選擇不同的鍵盤使用，如果一開始安裝就選擇 dvorak 的話，就會成為預設值。如果是 XP 或者想要把像是注音輸入法的符號對應也改成 dvorak 的話，可以參考我以前寫的文章：<a href="https://island.shaform.com/zh/2007/07/14/dvorak/">〈Dvorak: 另一種鍵盤排列〉</a>。</p>
<h2 id="linux">Linux</h2>
<p>最近的 Linux distributions 只要在安裝時就選擇 dvorak 鍵盤的話，大致上就會設定完成，通常 GUI 頁面也會有鍵盤設定。Linux 上輸入法和鍵盤設定通常是分開的兩個東西。如果你使用像是<a href="https://github.com/shaform/ibus-freearray">自由行列輸入法</a>等等原本就有支援 dvorak 的輸入法，則符號對應只要設定一下就可以了。</p>
<p>如果因為某些原因無法更動設定檔，使用以下指令可以在鍵盤間切換：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">setxkbmap dvorak <span class="c1"># 更動成 dvorak</span>
</span></span><span class="line hl"><span class="cl">setxkbmap us     <span class="c1"># 還原成 us 標準鍵盤</span></span></span></code></pre></div></div>

<h2 id="xrdp">Xrdp</h2>
<p>如果使用 rdp 的方式遠端連上 linux 的話，他的鍵盤對應是由自己的設定檔所控制，檔案位置在 <code>/etc/xrdp/km-\*\*\*\*.ini</code>，其中 <code>\*\*\*\*</code> 為不同語言設定的檔案，其編號可參考 <a href="http://xrdp.sourceforge.net/documents/keymap/rfc1766.html">rfc1766</a>。通常我們需要修改的是 <code>km-0409.ini</code> (en-US) 這個檔案。</p>
<p>在正常登入的情況下，使用以下指令可以在當前目錄產生目前鍵盤對應的 xrdp 設定檔：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">xrdp-genkeymap km-now.ini</span></span></code></pre></div></div>

<p>接著我們把它搬移取代 xrdp 參照的檔案：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo mv km-now.ini /etc/xrdp/km-0409.ini</span></span></code></pre></div></div>

<p>或許我們會想在覆蓋之前先備份原本的設定檔：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo mv /etc/xrdp/km-0409.ini /etc/xrdp/km-0409.ini.old</span></span></code></pre></div></div>

<p>最後重新啟動 xrdp 伺服器就可以了：</p>
<div class="sh-highlight"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line hl"><span class="cl">sudo /etc/init.d/xrdp restart</span></span></code></pre></div></div>

<p>但如果因為某些原因只能用 rdp 連上主機，而無法接觸正常的桌面的話，則根本無法得到 dvorak 的鍵盤對應，因此也無法產生設定檔，在這種情況下，只好直接修改原本的 <code>km-0409.ini</code>。而也有人說用 <code>xrdp-genkeymap</code> 產生的檔案有時會有問題，這時也只能直接修改了。我寫了一個程式用來做這個轉換：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># xrdpkeymap_qwerty_to_dvorak.py</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">Usage: python xrdpkeymap_qwerty_to_dvorak.py km-input.ini &gt; km-output.ini
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">fileinput</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># keycodes</span>
</span></span><span class="line"><span class="cl"><span class="c1"># $ xmodmap -pk for current mapping</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ref: http://forums.fedoraforum.org/showthread.php?t=265100</span>
</span></span><span class="line"><span class="cl"><span class="n">QWERTY</span> <span class="o">=</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="mi">41</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="mi">61</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">DVORAK</span> <span class="o">=</span> <span class="p">(</span><span class="mi">34</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="mi">52</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TRANS_DICT</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">QWERTY</span><span class="p">,</span> <span class="n">DVORAK</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_title</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\[.*\]\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_keydef</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;Key(\d+)=(.*)\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">buf</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">buf_dict</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">output_keydefs</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">TRANS_DICT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Key</span><span class="si">%d</span><span class="s1">=</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">buf_dict</span><span class="p">[</span><span class="n">TRANS_DICT</span><span class="p">[</span><span class="n">k</span><span class="p">]]))</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Key</span><span class="si">%d</span><span class="s1">=</span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">buf_dict</span><span class="p">[</span><span class="n">k</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[],</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">re_title</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">buf</span><span class="p">,</span> <span class="n">buf_dict</span> <span class="o">=</span> <span class="n">output_keydefs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">re_keydef</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">m</span> <span class="o">=</span> <span class="n">re_keydef</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">buf</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">            <span class="n">buf_dict</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))]</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># output remaining keys</span>
</span></span><span class="line"><span class="cl">    <span class="n">output_keydefs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="vim">Vim</h2>
<p>有的時候我們甚至無法重新啟動 xrdp server，或者根本沒有管理員權限，這時只好有限度的在 Vim 裡頭使用 dvoark。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="line"><span class="cl"><span class="nx">set</span> <span class="nx">keymap</span><span class="p">=</span><span class="nx">dvorak</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="nx">set</span> <span class="nx">langmap</span><span class="p">=-=</span><span class="nx">qwertyuiop</span>[]<span class="nx">sdfghjkl</span>\\;<span class="s1">&#39;zxcvbn\\,./_+QWERTYUIOP{}SDFGHJKL:\&#34;ZXCVBN&lt;&gt;?;[]&#39;</span>\\<span class="p">,</span>.<span class="nx">pyfgcrl</span>/<span class="p">=</span><span class="nx">oeuidhtns</span><span class="p">-</span>\\;<span class="nx">qjkxbwvz</span>{}\&#34;<span class="p">&lt;&gt;</span><span class="nx">PYFGCRL</span>?<span class="p">+</span><span class="nx">OEUIDHTNS_</span>:<span class="nx">QJKXBWVZ</span><span class="err">
</span></span></span></code></pre></div><p>keymap 可以修改輸入模式的對應，langmap 則是一般及 visual 模式等指令的按鍵，後面那串其格式可參考 :help &rsquo;langmap&rsquo;，基本上是先打 qwerty 的按鍵，加個分號，再打上轉換成的 dvorak 按鍵，不過 , 和 ; 需要在前面補上 \，&quot; 則是要補上 \。這設定唯一無法轉換的部份是 &ldquo;:&rdquo; 開頭的指令模式。此外，如果 set keymap 沒有作用的話，或許是系統缺少 dvorak 的 keymap，此時建立 ~/.vim/keymap/dvorak.vim 檔案，插入 <a href="http://ftp.vim.org/vim/runtime/keymap/dvorak.vim">dvorak.vim</a> 的內容即可。</p>
<h2 id="gcin">GCIN</h2>
<p>有的輸入法沒有直接支援 dvoark，不只是符號對應沒有支援，連正常輸入都整個亂掉了。這時可能要搜尋一下看有沒有現成的修改版檔案，例如我曾經修改過 <a href="http://hyperrate.com/thread.php?tid=19541#19541">GCIN 的行列輸入法表格</a>。如果沒有的話，可能就得自行轉換了。</p>
<p>我寫了一個轉換 GCIN .cin 檔的程式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># gcin_qwerty_to_dvorak.py</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">Usage: python gcin_qwerty_to_dvorak.py input.cin &gt; output.cin
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">fileinput</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">QWERTY</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;-=qwertyuiop[]sdfghjkl;&#39;zxcvbn,./_+QWERTYUIOP</span><span class="si">{}</span><span class="s1">SDFGHJKL:&#34;ZXCVBN&lt;&gt;?&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">DVORAK</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;[]&#39;,.pyfgcrl/=oeuidhtns-;qjkxbwvz</span><span class="si">{}</span><span class="s1">&#34;&lt;&gt;PYFGCRL?+OEUIDHTNS_:QJKXBWVZ&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">TRANS</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">maketrans</span><span class="p">(</span><span class="n">QWERTY</span><span class="p">,</span> <span class="n">DVORAK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_option</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;%(selkey|endkey)\s+(\S+)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_begin</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;%\S+\s+begin&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_keydef</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^([^#]\S*)(\s+\S+)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">re_end</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;%\S+\s+end&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">begin</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># process key definitions</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">begin</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">re_end</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">begin</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_def</span> <span class="o">=</span> <span class="n">re_keydef</span><span class="o">.</span><span class="n">subn</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">TRANS</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># print transformed line</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">new_def</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="n">new_def</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># print comment/end lines</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">m</span> <span class="o">=</span> <span class="n">re_option</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">m</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%%%s</span><span class="s1"> </span><span class="si">%s</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">TRANS</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">re_begin</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">begin</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><p>轉換完後再用 gcin2tab 產生 GCIN 能用的 .gtab 檔。</p>
<p>使用此程式轉換檔案的話，可能還是會需要手動調整，因為有些像是「,」 -&gt;「，」的符號對應應該還是保留會比較好。</p>
<h2 id="下載">下載</h2>
<p>相關程式可在 <a href="https://github.com/shaform/dvorak-tools">shaform/dvorak-tools</a> 下載。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>最低成本的程式協作: CoProgramming</title>
      <link>https://city.shaform.com/zh/2013/03/05/coprogramming/</link>
      <pubDate>Tue, 05 Mar 2013 08:03:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2013/03/05/coprogramming/</guid>
      <description>緣起 在程式課堂，團隊合作常常是件頭痛的事，若是每個人各自工作，常會產生許多難以整合的版本。即使是一起到電腦教室討論，也常是一個人寫程式，其他</description>
      <content:encoded><![CDATA[<h2 id="緣起">緣起</h2>
<p>在程式課堂，團隊合作常常是件頭痛的事，若是每個人各自工作，常會產生許多難以整合的版本。即使是一起到電腦教室討論，也常是一個人寫程式，其他人在旁邊看。雖然有版本控制系統等等合作工具，然而我從來沒有成功在一堂課中讓隊友學會其運作(應該說是幾乎，僅有在雙方都早已會使用，或者是由我做所有merge時才曾使用)，事實上，像 git, hg 等等複雜的系統，是否真的適合這種小型專案也尚有可懷疑的地方，尤其，有些作業所有的程式碼都在同一個檔案中，使得版本控制系統用起來十分不順手。</p>
<p>我突然想起在<a href="http://en.wikipedia.org/wiki/Here_Comes_Everybody">《Here Comes Everybody》</a>書裡看過的說法：Wikipedia 的貢獻者中，絕大多數可能只有編輯過一兩行的文章。一家公司如果大部分的員工都只做一點工作，則這家公司多半無法生存。可是在 Wikipedia 的例子裡，合作的成本被降的很低，所以原來不可能利用的小量付出，也能被整合成一個共同成果。</p>
<p>這確實就是我們遇到的情況，有時在課堂中的程式作業規模是如此的小，任何的合作成本都太過高昂。而且，這種只存在一學期的臨時團隊，根本難以形成向心力。而要求任何人為了一學期的作業學會複雜的版本控制系統更是完全不實際的想法。</p>
<p>如果要成功整合大家一起完成這種小型的合作、如果要在每個人只寫幾行程式的情況下依然可以合作，唯一的可能性就是要將合作成本壓到極端的低。可是，要怎麼做呢？我的腦中浮現起從前透過 <a href="http://etherpad.org/">EtherPad</a> 或者是 <a href="https://docs.google.com/">Google Docs</a> 教人寫程式時的場景，這就是了。像這樣即時同步的作法在專業的程式開發中或許會因為無法預期其他人的修改而造成不少問題，但對於小型合作而言，這就是最簡單的協作形式。</p>
<p>沒有錯，只要在 Google Docs 上協作程式，然後再加上即時編譯執行的功能，免去不斷在 IDE 與 Docs 間不斷複製貼上的成本，就足夠了。這個非常簡單的專案將目標鎖定在程式新手的小型合作，最好的使用情境其實就是兩人互相坐在電腦教室裡，同時使用兩台電腦，邊討論邊寫程式。再也不會有一個人寫程式，其他人在旁邊看的情形了！腦中有了想法後，我就開始試著把他實做出來。</p>
<div class="embed slideshare">
  <iframe src="//www.slideshare.net/slideshow/embed_code/key/cQWCpeHvlA9ivd?rel=0" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>
</div>

<h2 id="經過">經過</h2>
<p>理論上這應該是個非常簡單的專案，而我其實也只是抱著展示想法的心情，所以是以快速開發作為原則，然而最後卻花了不少時間。問題出在 <a href="https://developers.google.com/drive">Google Drive SDK</a> 並沒有支援 C/C++，所以一開始選擇語言時我走了些歧路，原本想採用 Python，可是開發到一半才覺得我不太熟悉用 <a href="http://en.wikipedia.org/wiki/Tkinter">Tkinter</a> 製作圖形界面，且效果也不是很好，再考慮到一般 Windows 使用者並沒有安裝 Python 函式庫，<a href="http://www.py2exe.org">py2exe</a> 好像也有些 .dll 的問題，所以就放棄了。</p>
<p>雖然知道 Java 是個不錯的選擇，可是印象中 Java 簡單的程式總要寫一大堆程式碼，實在提不起勁來。這時，我發現 <a href="http://golang.org">Go</a> 是個很有趣的語言，雖然他主要是用在系統開發，可是也有人開發<a href="https://github.com/AllenDang/gform">圖形界面的函式庫</a>，加上是個編譯語言，很符合我希望使用者能簡單使用這個軟體的需求，於是就決定來學一下 Go 了！這確實是個很簡單易學的語言，我花了一天的時間就讀完基本的教學，準備開始開發。只是突然發現那個圖形函式庫其實根本編譯不起來，而且功能也有限，所以最後我還是決定改用 Java 了。為了使用者的方便，我也打算採用 <a href="http://launch4j.sourceforge.net">launch4j</a> 來製作可執行檔，並包入 <a href="http://tdm-gcc.tdragon.net">TDM-GCC</a> 以及 Code::Blocks 的 <a href="http://linux.die.net/man/1/cb_console_runner">cb_console_runner</a>，讓使用者測試程式結束時視窗不會立即結束。</p>
<p>目前程式碼可在 <a href="https://github.com/shaform/coprogramming">coprogramming@github</a> 觀看。</p>
<p>本來想製作包裝好的執行檔，但因為不知為何有時編譯出來的程式會被測出木馬<a href="http://comments.gmane.org/gmane.comp.gnu.mingw.user/38529">（雖然可能是誤判）</a>，為了避免真的把木馬包進去，所以我決定只放上主程式，想參考研究的朋友可自行下載 TDM-GCC 安裝到 MinGW 子資料夾即可使用，另外如果把 JRE 安裝到 jre7 子資料夾，則可在未安裝 JRE 的電腦上直接執行主程式。</p>
<p>包好的壓縮檔目前可在 <a href="https://code.google.com/p/coprogramming/downloads/list">download page</a> 下載。</p>
<h2 id="已知問題">已知問題</h2>
<p>由於專案本身只是想要展示想法，所以目前有不少問題：</p>
<ul>
<li><em>由於直接下載編譯執行程式，所以可能有安全性問題。</em></li>
<li>目前需要要求存取 Drive 所有檔案的權限，否則無法列出別人分享的程式碼。</li>
<li>程式碼的標題在 Drive 中有特殊限制，會自動以 coprg 做為結尾，雖然在程式中看不出來。</li>
<li>需要自行在 Drive 中選取 Tools -&gt; Preferences&hellip; 取消 smart quotes 的設定，以免分號被轉換，造成程式無法編譯。</li>
<li>只支援單檔案編譯。</li>
<li>只支援 C++。</li>
<li>&hellip;</li>
</ul>
<h2 id="結語">結語</h2>
<p>其實早就有線上編譯的服務，理論上要做到線上協作、編譯、測試程式應該也可以，且對於使用者而言或許會更加方便。或者可以做一個本機端的伺服器程式，專門接收程式碼與編譯，而將界面寫成 Google Chrome 的擴充套件，這樣就可以使用該套件開啟特定文件，解決目前必須要求存取所有檔案的問題了！（因為本機程式沒有辦法讓使用者針對特定檔案給予權限，我猜測寫成擴充套件應該就可以實做在 Drive 界面裡，在檔案上按右鍵以該套件開啟的功能了吧。）</p>
<p>這個想法是因為他專門針對新手的小型專案而特別，可是這種合作方式真的只適合新手嗎？即使在專業的環境中，若是在任何檔案上按下右鍵，就能即時同步分享於 Drive 之上，然後在請教同事時，他也能即時在檔案中編輯，而在他編輯的同時，本地端程式碼即時同步，隨時可用原本的方法編譯，這或許也有方便之處？</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>稍微整理了一下自由行列的原始碼</title>
      <link>https://city.shaform.com/zh/2013/02/26/freearray-bugfixes/</link>
      <pubDate>Tue, 26 Feb 2013 14:17:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2013/02/26/freearray-bugfixes/</guid>
      <description>停擺多年 還記得數年前完成了「自由行列輸入法」的測試版本，雖然一開始還有斷斷續續修正一些 bugs，但到後來這個專案就完全停擺了。當然其中一個重</description>
      <content:encoded><![CDATA[<h2 id="停擺多年">停擺多年</h2>
<p>還記得數年前完成了<a href="/zh/2010/02/15/intro-to-freearray/">「自由行列輸入法」</a>的測試版本，雖然一開始還有斷斷續續修正一些 bugs，但到後來這個專案就完全停擺了。當然其中一個重要理由是突然發現 <a href="http://hyperrate.com/thread.php?tid=18200">gcin 原本就有支援智慧選詞的行列輸入法</a>，覺得花那麼多力氣重造輪子有點不值得。但其實也是沒有特別的新功能可以開發，而且程式本身寫的太亂不太好維護，加上課業繁忙，所以就沒有投注太多關心。</p>
<p>gcin 的版本雖然很好，但對 Dvorak 和「行列定符」的支援總是差了那麼一點，而且不知為何總是無法習慣使用 gcin，所以後來就沒有繼續使用。而隨著作業系統的更新，之前的自由行列輸入法也不知為何無法編譯了，於是我就重回注音輸入法的懷抱，和行列輸入法疏離了許久。</p>
<p>後來剛好又看到行列以及 dvorak 的討論串，加上最近剛好比較有空，就想把之前的程式碼翻修一下，看看能不能動，也順便把原始碼轉到現在比較習慣的 <a href="https://github.com/shaform/ibus-freearray">GitHub</a>。雖然只花了幾天時間，不過其實遇到的問題也不少，甚至有些問題的根源還很難弄明白。</p>
<h2 id="問題">問題</h2>
<p>首先遇到的問題是不知為何編譯時所連結的外部函式庫，包含 sqlite3, ibus, freearray 等等，都無法順利連結，使用到的函式都變成了 undefined reference。花了一段時間才發現似乎是一定要透過 libtool 才能順利連結，在 configure.ac 裡加上 AM_PROG_LIBTOOL 以後情況才有所改善。</p>
<p>但是很奇怪的是，原本我的編譯程序是先將一部分的 object 檔製成暫時的函式庫 libfaft.a，最後再連結在一起，但這個函式庫指向的外部連結也都變成是 undefined reference。除此之外，也遇到 libtool 在連結 c++, c 檔案時無法順利找到 libstdc++ 的問題。最後只有取消中繼函式庫，直接將所有 object 檔連在一起才能解決。</p>
<p>除此之外，automake 和 autoconf 等等的行為似乎跟以前比起來也有微妙的改變，因此我參考其他專案修改了 autogen.sh，新增 libtoolize 和 autoheader 等指令，讓編譯流程順利進行，雖然其實我也不太清楚這些微妙的改變實際上有什麼作用就是。</p>
<p>接下來則是 ibus 新版的 ibus_config_set_value, ibus_config_get_value, ibus_config_new 等等的行為已經有所不同，還有許多函式不知為何開始要求傳進去的參數要先經過 g_object_ref_sink 的處理。這些也透過觀察類似專案得到了解法，雖然還沒有時間深入研究。</p>
<p>最後則是 64bit 環境下 libchewing 的 TreeType 大小會有問題，暫時用強制的型別解決了。</p>
<h2 id="結語">結語</h2>
<p>幾番修正後終於成功啟動了 ibus-freearray，說起來行列輸入法真是不錯，雖然那麼久沒用可是我卻還記得怎麼打字。抱著學習的心態，這次也順便嘗試製作了 .deb 檔案，雖然一開始遇到一些問題，不過也順利解決了。</p>
<p>雖說如此，這樣匆促的修復應該會隱藏著不少 bugs，而且目前實在也是沒有投入太多心力持續開發這個專案的打算，所以它還是會繼續以測試版的姿態存在下去吧。</p>
<p>有興趣測試的朋友，所有的檔案都可在 <a href="http://code.google.com/p/freearray/downloads/list">freearray download page</a> 下載，若你是使用 64bit Ubuntu，可直接安裝 libfreearray0 和 ibus-freearray 等 .deb 檔。否則的話就參考從前的文件下載 .tar 檔編譯安裝。</p>
<p>原始碼已經搬移到 Github：</p>
<ul>
<li><a href="https://github.com/shaform/libfreearray">libfreearray</a></li>
<li><a href="https://github.com/shaform/ibus-freearray">ibus-freearray</a></li>
</ul>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>ibus-faft 開發日誌</title>
      <link>https://city.shaform.com/zh/2010/02/20/ibus-faft-develop-notes/</link>
      <pubDate>Sat, 20 Feb 2010 19:46:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2010/02/20/ibus-faft-develop-notes/</guid>
      <description>FreeArray for Test for the Input Bus 是基於 ibus 輸入法架構所製作之行列輸入法引擎，其結合來自 libchewing 的斷詞模組實作智慧選字功能，並利用「行列定符」改進原行列的符號輸入。此外</description>
      <content:encoded><![CDATA[<p>FreeArray for Test for the Input Bus 是基於 ibus 輸入法架構所製作之行列輸入法引擎，其結合來自 libchewing 的斷詞模組實作智慧選字功能，並利用「行列定符」改進原行列的符號輸入。此外，對 dvorak 鍵盤具有完整支援。</p>
<p>在開發過程中，除了引用大量 libchewing 的程式碼外，也參考了 <a href="http://code.google.com/p/ibus-array/">ibus-array</a>, <a href="https://github.com/definite/ibus-chewing">ibus-chewing</a> 的程式碼才得以完成。</p>
<p>時間大約是在 2010 年 2 月初直到 2 月中，連續而密集的開發。</p>
<h2 id="libchewing">libchewing</h2>
<p>研究 libchewing 其實已經頗久了，直到現在對它的了解也才只是剛好得以把斷詞模組和一部分的輸入處理拿來用而已。為了配合 faft，而對 libchewing 做了些改動，主要是把 Phone 換成 ArrayCode，但也對一部分行為做了小修改，程式碼的改動應該都有用 <code>#ifndef FAFT_CHEWING / #ifdef FAFT_CHEWING</code> 包了起來，所以應該頗好追蹤的。</p>
<p>詞樹資料的創建是用了一系列工具轉換出來的，不過因為寫的時候是基於 C++ 版的 libfreearray，而且很亂沒整理，所以並沒有放在 ibus-faft 之中。檔案很大的一部分原因是同一個字有很多行列碼的表示方法，並且文字編碼長度比原新酷音長，另外，不小心把特別碼也轉進去了，不過一直提不起勁來重新轉換 XD。</p>
<h2 id="資料處理">資料處理</h2>
<p>行列碼和中文字以及鍵盤排列轉換的處理，是從 libfreearray 中 C++ 的版本改過來的，處理中文字、行列定符、詞彙輸入的詞庫、特別碼及簡碼，都是由這部分負責，透過 SQLite 來存取資料。而斷詞用的詞庫，以及簡易符號輸入，則是用 libchewing 的檔案格式，詞彙輸入的詞庫和斷詞的詞庫我並沒有統一資料。另外，我把 libchewing 中使用者詞庫的功能移除以降低開發的複雜度。</p>
<p>對於 SQLite 其實還不是很熟悉，設了一些 index 也不知是否有必要。主要的參考書藉是<a href="https://www.apress.com/us/book/9781430232254">《The Definitive Guide to SQLite》</a>，以及官方文件<a href="http://www.sqlite.org/docs.html">《SQLite Documents》</a>。</p>
<h2 id="核心輸入模組">核心輸入模組</h2>
<p>其實原本我想把輸入處理全寫到 ibus-faft-engine 中的 process_key_event()，然後呼叫一些 libchewing 的，或自己寫的函式。想不到後來慢慢把很多東西都移進 faft 中，再由 ibus-faft-engine 來呼叫 faft 裡的函式，所以 ibus-faft 就不用呼叫 libchewing 的函式了。事實上是，現在要把 faft 拿出來，放進 scim 或其它輸入法架構，都變成一件有可能的事。我也因此得以寫了一支 faft-test 程式，配合 gdb 偵錯，對 ibus-faft 的開發有很大幫助。</p>
<p>對於輸入法資料 FAFTContext 其實改動很多次，本來還另外寫了 FAFTData, FAFTOutput，再試圖引進 libchewing 之中，但最後變得非常複雜，所以還是直接改動 ChewingData, ChewingOutput，再把它們引進 faft 之中。faft 的介面曾改動過非常多次才變成現在的樣子，所以其實在某些地方可能會有一些功能重複或沒有用到的遺跡。另外就是一些狀態變數設了很多，最後好像也不見得有用。</p>
<p>與 ibus 的介面程式，絕大多數都是參考 ibus-chewing 所做，一部分則是從 ibus-array 而來。</p>
<h2 id="關於-settings">關於 Settings</h2>
<p>在製作 Settings 介面時，我選擇和 ibus-array 一樣，透過 Python 來做，一方面是因為覺得可能比較簡單，二方面是正想學 Python，不能放過每一個機會。過程中比較有趣的是，正值沒有網路的寒假，我又沒有用過 GTK+，在電腦裡只找到一份以前想學 GTK+ 時下載的文件，只是那份寫的是 C，所以跟 Python 又有點不一樣，所以其實很多地方都得「猜猜看」，還得常常用 dir() 之類的。原本製作時是想拿 ibus-array 的來改一下即可，不過最後似乎重寫了絕大部分，順便也是在練習 Python，並一邊閱讀著<a href="http://www.python.org/doc/">《Python documentation》</a>。</p>
<h2 id="autotools">Autotools</h2>
<p>在初期，是自己寫 Makefile 來編譯 ibus-faft 的，直到末期才把 Autotools 的部分補了上去。主要是參考 ibus-tmpl 的檔案，以及<a href="http://www.freesoftwaremagazine.com/books/autotools_a_guide_to_autoconf_automake_libtool">《Autotools: a practitioner&rsquo;s guide to Autoconf, Automake and Libtool》</a>，才得以完成。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
    <item>
      <title>簡介自由行列專案</title>
      <link>https://city.shaform.com/zh/2010/02/15/intro-to-freearray/</link>
      <pubDate>Mon, 15 Feb 2010 15:46:00 +0800</pubDate>
      
      <guid>https://city.shaform.com/zh/2010/02/15/intro-to-freearray/</guid>
      <description>本持自由軟體，Release Early, Release Often 之精神，我實在應該趕快把自由行列的程式碼公開出來。不過覺得程式碼實在太醜，而且其實根本也還沒寫出什麼，再者</description>
      <content:encoded><![CDATA[<p>本持自由軟體，Release Early, Release Often 之精神，我實在應該趕快把自由行列的程式碼公開出來。不過覺得程式碼實在太醜，而且其實根本也還沒寫出什麼，再者我現在其實是一邊寫一邊學 OOP，因此程式碼常有大幅改動，再者又覺 SVN 操作好麻煩，所以遲遲未發。</p>
<p>不過為了避免自由行列的想法消失在歷史之中。於是決定，先把自由行列專案的簡介發出。</p>
<h2 id="簡易使用">簡易使用</h2>
<p>行列輸入法雖然是用字根組字的輸入法，然而由於其字根的特性，需要花的記憶心力其實是比較小的，只是為了求快或者避免選字，時常必須記憶特別碼或簡碼。並且因為有些組字必須選字，而有些則不用，使得要時常注意螢幕或者把它的行為強記下來。</p>
<p>引入智慧選字的功能之後，自由行列的新特性將是簡易。也許不再追求最快的輸入法，但是卻有機會成為組字輸入法中最易上手，選字機會最低的輸入法。每次出字時，不會再有依是否要選字而有的不一致行為，同時我也想將加上特定字尾才能輸出難字的功能去掉，而藏在「w」中的符號表，也被拿到「`」之下。如此一來，輸入的一致性將大為提高。</p>
<h2 id="符號輸入">符號輸入</h2>
<p>符號輸入是自由行列要改進的核心事項之一。除了符號表之外，還有從透過從行列字根發展出的「符根」輸出符號的「行列定符」，以及透過英文鍵盤，輸出全形中文符號的簡易符號輸入。</p>
<p>使用過行列輸入法的人，即使不用特別說明，只要看到以下符號表，就會明白行列定符的意義。由於和字根非常相似，幾乎不用什麼記憶。</p>
<table>
<thead>
<tr>
<th>按鍵</th>
<th>符號</th>
<th>按鍵</th>
<th>符號</th>
<th>按鍵</th>
<th>符號</th>
</tr>
</thead>
<tbody>
<tr>
<td>1^</td>
<td>＝</td>
<td>5^</td>
<td>」</td>
<td>8-</td>
<td>＼</td>
</tr>
<tr>
<td>1-</td>
<td>─</td>
<td>5^5^</td>
<td>』</td>
<td>8v</td>
<td>‘</td>
</tr>
<tr>
<td>2^</td>
<td>「</td>
<td>5-</td>
<td>〉</td>
<td>8v8v</td>
<td>“</td>
</tr>
<tr>
<td>2^2^</td>
<td>『</td>
<td>5-5-</td>
<td>》</td>
<td>9^</td>
<td>※</td>
</tr>
<tr>
<td>2-</td>
<td>〈</td>
<td>5v</td>
<td>）</td>
<td>9-</td>
<td>／</td>
</tr>
<tr>
<td>2-2-</td>
<td>《</td>
<td>5v</td>
<td>）</td>
<td>9v</td>
<td>’</td>
</tr>
<tr>
<td>2v</td>
<td>（</td>
<td>5v5v</td>
<td>〕</td>
<td>9v9v</td>
<td>”</td>
</tr>
<tr>
<td>2v2v</td>
<td>〔</td>
<td>5v5v5v</td>
<td>】</td>
<td>0^</td>
<td>：</td>
</tr>
<tr>
<td>2v2v2v</td>
<td>【　</td>
<td>6-</td>
<td>、</td>
<td>0-</td>
<td>。</td>
</tr>
<tr>
<td>3-</td>
<td>！</td>
<td>7^</td>
<td>？</td>
<td>0-0-</td>
<td>·</td>
</tr>
<tr>
<td>4-</td>
<td>＋</td>
<td>7-</td>
<td>，</td>
<td>0-0-0-</td>
<td>…</td>
</tr>
<tr>
<td>4-4-</td>
<td>＃</td>
<td>0v</td>
<td>；</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>在輸入完符碼後，按下 Shift+「詞彙鍵」即可輸出符號。</p>
<p>簡易符號輸入則是像新注音或新酷音那樣，在全型模式下，可輸入英文符號而輸出中文符號。此外，各種符號都可在緩衝區中再按下選字鍵選擇類似的符號。關於簡易符號輸入其實還是有很多改進的方法，有待開發。</p>
<p>事實上，對於符號輸入的改進，一部分的原因是要完全解決 Jedi 在他文章中所提出的跨 qwerty/dvorak 鍵盤時會遇到的問題。透過行列定符，使用者可以在完全不知道英文鍵盤的符號在哪的情況下輸出符號，讓行列自成一體系。而特意加強的簡易符號輸入，則是可依不同鍵盤輸出對應的中/英文符號。</p>
<h2 id="繁簡分離">繁簡分離</h2>
<p>行列輸入法的字根除了可以用來拆繁體字外，其實也可以輸人簡體字。原本的設計是在輸入特定字尾時輸出簡體，但我想將簡體輸入獨立出來做為簡體模式。也就是說，我想嘗試讓自由行列具有做為一個簡體中文輸入法的可能性。</p>
<h2 id="不只是輸入法">不只是輸入法</h2>
<p>在製作 libfreearray 時，我所考慮的其實不只是輸入法而已，而是要將其發展成自由行列的通用函式庫。例如 typing tutor 或查碼程式，或其他更多的應用，都可基於其上發展。特別是一個可以在 Linux 平台上執行的 typing tutor，更是我將來有機會想實行的方向。覺得行列輸入法實在是一個很好的輸入法，現在似乎不太多人學，實為可惜。</p>
<h2 id="手機輸入法">手機輸入法</h2>
<p>行列輸入法做為一個用數字排列字根的輸入法，自然具有成為手機輸入法的潛力，甚至要做到只有十鍵輸入，且不看螢幕都有可能。libfreearray 既然想成為行列的通用函式庫，最後很可能會希望建立起一個具有原始拆字字根，而非減縮後的 30 字根，的文字資料庫。屆時，當可研究如何製作手機輸入法。想來，要把行列字根轉到手機上其實有很多種做法，優缺點也不一，有心人可細細研究。</p>
<p>也許後來手機的鍵盤將不再有十鍵的限制，但行列做作手機輸入法的可能性還是令人憧憬。</p>

<link rel="stylesheet" href="https://city.shaform.com/css/hugo-easy-gallery.css" />
<div class="box aligncenter">
  <figure  itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
    <div class="img">
      <img class="webfeedsFeaturedVisual" itemprop="thumbnail" src="/images/2016/notebook-hero-workspace-minimal.jpg" alt="Notebook" />
    </div>
    
  </figure>
</div>

]]></content:encoded>
    </item>
    
  </channel>
</rss>
